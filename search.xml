<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA常用快捷键</title>
      <link href="2021/02/21/Editors/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2021/02/21/Editors/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="idea常用快捷键"><a class="markdownIt-Anchor" href="#idea常用快捷键"></a> IDEA常用快捷键</h1><table><thead><tr><th>名称</th><th>快捷键</th></tr></thead><tbody><tr><td>折叠/展开</td><td>ctrl + +/-</td></tr><tr><td>全部折叠/展开</td><td>ctrl + shift + +/-</td></tr><tr><td>折叠/展开project</td><td>alt + 1</td></tr><tr><td>展开/折叠project文件夹</td><td>→/←</td></tr><tr><td>格式化</td><td>ctrl + alt + L</td></tr><tr><td>行尾添加分号</td><td>ctrl + shift + enter</td></tr><tr><td>替换</td><td>ctrl + r</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Editors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写call-apply-bind</title>
      <link href="2020/12/29/JavaScript/%E6%89%8B%E5%86%99call-apply-bind/"/>
      <url>2020/12/29/JavaScript/%E6%89%8B%E5%86%99call-apply-bind/</url>
      
        <content type="html"><![CDATA[<h1 id="手写call-apply-bind"><a class="markdownIt-Anchor" href="#手写call-apply-bind"></a> 手写call-apply-bind</h1><h2 id="1-call"><a class="markdownIt-Anchor" href="#1-call"></a> 1. call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rewrite call</span></span><br><span class="line"><span class="comment"> * https://tc39.es/ecma262/#sec-function.prototype.call</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype._call = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  ctx = <span class="built_in">Object</span>(ctx) || <span class="built_in">window</span></span><br><span class="line">  ctx.fn = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">    args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-apply"><a class="markdownIt-Anchor" href="#2-apply"></a> 2. apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rewrite apply</span></span><br><span class="line"><span class="comment"> * https://tc39.es/ecma262/#sec-function.prototype.apply</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype._apply = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, args</span>) </span>&#123;</span><br><span class="line">  ctx = <span class="built_in">Object</span>(ctx) || <span class="built_in">window</span></span><br><span class="line">  ctx.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">var</span> _toString = <span class="built_in">Object</span>.prototype.toString</span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// args is primitive value</span></span><br><span class="line">  <span class="keyword">if</span> (args &amp;&amp; <span class="keyword">typeof</span> args !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;CreateListFromArrayLike called on non-object&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!args || _toString.call(args).slice(<span class="number">8</span>, -<span class="number">1</span>) !== <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">    result = ctx.fn()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-bind"><a class="markdownIt-Anchor" href="#3-bind"></a> 3. bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rewrite bind</span></span><br><span class="line"><span class="comment"> * https://tc39.es/ecma262/#sec-function.prototype.bind</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype._bind = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> originFn = <span class="built_in">this</span>,</span><br><span class="line">      args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 原型传递中介函数</span></span><br><span class="line">  <span class="comment">// var _tempFn = function () &#123; &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArgs = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// new newFn(), this -&gt; 实例对象,</span></span><br><span class="line">    <span class="comment">// newFn(), this -&gt; ctx</span></span><br><span class="line">    <span class="keyword">return</span> originFn.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> newFn ? <span class="built_in">this</span> : ctx, args.concat(newArgs))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一种方式</span></span><br><span class="line">  <span class="comment">// 与原生bind行为保持一致, newFn原型指向originFn原型</span></span><br><span class="line">  newFn.prototype = originFn.prototype</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种方式</span></span><br><span class="line">  <span class="comment">// 与原生bind行为不一致, 利用中介函数_tempFn充当originFn原型</span></span><br><span class="line">  <span class="comment">// _tempFn.prototype = originFn.prototype</span></span><br><span class="line">  <span class="comment">// newFn.prototype = new _tempFn()</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写new-instanceof-Object.create</title>
      <link href="2020/12/29/JavaScript/%E6%89%8B%E5%86%99new-instanceof-Object.create/"/>
      <url>2020/12/29/JavaScript/%E6%89%8B%E5%86%99new-instanceof-Object.create/</url>
      
        <content type="html"><![CDATA[<h1 id="手写new-instanceof-objectcreate"><a class="markdownIt-Anchor" href="#手写new-instanceof-objectcreate"></a> 手写new-instanceof-Object.create</h1><h2 id="一-new"><a class="markdownIt-Anchor" href="#一-new"></a> 一、new</h2><p>new运算符原理：</p><ol><li>创建一个空对象，作为将要返回的实例对象</li><li>将该空对象的原型，指向构造函数的prototype</li><li>将该空对象赋值给函数内部的this</li><li>开始执行构造函数内部的代码</li><li>返回this：<ul><li>手动返回数值，会被忽略</li><li>手动返回对象，则忽略this</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rewrite new</span></span><br><span class="line"><span class="comment"> * https://tc39.es/ecma262/#sec-new-operator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>)</span><br><span class="line"></span><br><span class="line">  // 第一种方式</span><br><span class="line">  // <span class="title">var</span> <span class="title">_this</span> = &#123;&#125;</span><br><span class="line">  <span class="comment">// _this.__proto__ = constructor.prototype</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种方式</span></span><br><span class="line">  <span class="comment">// var _this = Object.setPrototypeOf(&#123;&#125;, constructor.prototype)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三种方式</span></span><br><span class="line">  <span class="keyword">var</span> _this = <span class="built_in">Object</span>.create(<span class="title">constructor</span>.<span class="title">prototype</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title">var</span> <span class="title">res</span> = <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">_this, <span class="built_in">arguments</span></span>)</span><br><span class="line">  <span class="title">return</span> <span class="title">typeof</span> <span class="title">res</span> === &#x27;<span class="title">object</span>&#x27; &amp;&amp; <span class="title">res</span> !== <span class="title">null</span> ? <span class="title">res</span> : <span class="title">_this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-instanceof"><a class="markdownIt-Anchor" href="#二-instanceof"></a> 二、instanceof</h2><p>instanceof原理：依次查找自身原型链上的原型，看是否有匹配上的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rewrite instanceof</span></span><br><span class="line"><span class="comment"> * https://tc39.es/ecma262/#sec-instanceofoperator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_instanceof</span> (<span class="params">target, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  type = type.prototype</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一种方式</span></span><br><span class="line">  <span class="comment">// __proto__ 是私有属性,最好不要使用</span></span><br><span class="line">  <span class="comment">// target = target.__proto__</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种方式</span></span><br><span class="line">  target = <span class="built_in">Object</span>.getPrototypeOf(target)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target === type)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// target = target.__proto__</span></span><br><span class="line">    target = <span class="built_in">Object</span>.getPrototypeOf(target)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-objectcreate"><a class="markdownIt-Anchor" href="#三-objectcreate"></a> 三、Object.create</h2><p>Object.create：有两个参数，第一个参数为原型对象，第二参数为属性描述对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example: </span></span><br><span class="line"><span class="built_in">Object</span>.create(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    value: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rewrite Object.create</span></span><br><span class="line"><span class="comment"> * https://tc39.es/ecma262/#sec-object.create</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>._create = <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Object prototype may only be an Object or null.&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  F.prototype = target</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">new</span> F()</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(_this, <span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">return</span> _this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome架构进化史</title>
      <link href="2020/12/29/Browser/Chrome%E6%9E%B6%E6%9E%84%E8%BF%9B%E5%8C%96%E5%8F%B2/"/>
      <url>2020/12/29/Browser/Chrome%E6%9E%B6%E6%9E%84%E8%BF%9B%E5%8C%96%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="chrome架构进化史"><a class="markdownIt-Anchor" href="#chrome架构进化史"></a> Chrome架构进化史</h1><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><h3 id="1-并行处理"><a class="markdownIt-Anchor" href="#1-并行处理"></a> 1. 并行处理</h3><p>计算机中的并行处理就是<strong>同一时刻处理多个任务</strong>。</p><p>如：有一个程序，计算下面三个表达式的值，并显示出结果。</p><p>A = 1 + 2</p><p>B = 20 / 5</p><p>C = 7 * 8</p><p>在编写代码的时候，我们可以将这个程序的过程分成四个任务：</p><ul><li><p>任务1：计算A = 1 + 2</p></li><li><p>任务2：计算B = 20 / 5</p></li><li><p>任务3：计算C = 7 * 8</p></li><li><p>任务4：显示计算的结果</p></li></ul><p>正常情况下，程序可以使用<strong>单线程</strong>来处理，需要四步，即按顺序执行四个任务。</p><p>但是，如果使用<strong>多线程</strong>来处理，只需要两步，即第一步使用三个线程同时执行前三个任务，第二步执行任务4。</p><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20210315214951.png" alt="" /></p><p><strong>不难发现，线程依附于进程，进程中使⽤多线程并⾏处理能大大提升运算效率。</strong></p><h3 id="2-进程"><a class="markdownIt-Anchor" href="#2-进程"></a> 2. 进程</h3><p><strong>一个进程就是一个程序的运行实例</strong>，是资源分配和调度的基本单位。</p><p>启动一个程序的时候，操作系统会为该程序创建一块内存空间，用来存放代码、运行中的数据和一个执行任务的<strong>主线程</strong>，这样的一个运行环境就叫进程。</p><h3 id="3-线程"><a class="markdownIt-Anchor" href="#3-线程"></a> 3. 线程</h3><p><strong>线程不能单独存在，它是由进程来启动和管理的</strong>。</p><p>线程是一个基本的CPU执行单元，是程序执行流的最小单位。</p><h3 id="4-进程与线程的的关系"><a class="markdownIt-Anchor" href="#4-进程与线程的的关系"></a> 4. 进程与线程的的关系</h3><ol><li><p>进程中的任意线程执⾏出错，都会导致整个进程的崩溃。</p></li><li><p>线程之间共享进程中的数据。</p></li><li><p>进程关闭之后，操作系统会回收进程所占⽤的内存。</p><p>一个进程退出时，操作系统会回收该进程申请的所有资源，即使进程中的线程有操作不当而导致的内存泄漏，也会被回收。</p></li><li><p>进程之间相互隔离</p><p>进程隔离是操作系统为保护进程之间互不干扰的技术，每个进程只能访问自己所申请的资源，这样可以防止进程A将数据写入进程B的情况。</p><p>同时，一个进程如果崩溃了，并不会影响其他进程的运行。</p><p>如果进程之间需要进行数据通信的话，可以使用<strong>进程间通信的机制（IPC机制）</strong></p></li></ol><h2 id="一-单进程浏览器时代"><a class="markdownIt-Anchor" href="#一-单进程浏览器时代"></a> 一、单进程浏览器时代</h2><h3 id="1-单进程浏览器架构"><a class="markdownIt-Anchor" href="#1-单进程浏览器架构"></a> 1. 单进程浏览器架构</h3><p><strong>浏览器的所有功能模块都运行在一个进程里</strong>，如网络、插件、JavaScript运行环境、渲染引擎和页面等模块。2007年之前，市面上的浏览器都是单进程。</p><h3 id="image-202010311634544442-单进程架构带来的问题"><a class="markdownIt-Anchor" href="#image-202010311634544442-单进程架构带来的问题"></a> <img src="https://gitee.com/MarMomento/image/raw/master/img/20201229133717.png" alt="image-20201031163454444" />2. 单进程架构带来的问题</h3><h4 id="1-不稳定"><a class="markdownIt-Anchor" href="#1-不稳定"></a> (1) 不稳定</h4><p>早期浏览器需要借助<strong>插件</strong>来实现Web视频，Web游戏等功能，一个插件的崩溃就会导致整个浏览器崩溃。</p><p><strong>渲染引擎模块</strong>也不稳定，一些复杂的JavaScript代码就有可能引起渲染引擎模块的崩溃，导致整个浏览器崩溃。</p><h4 id="2-不流畅"><a class="markdownIt-Anchor" href="#2-不流畅"></a> (2) 不流畅</h4><p>所有页面的渲染模块，JavaScript执行环境，插件都是运行在一个页面线程中，如果JavaScript代码执行时间过长，会占用整个页面线程，导致页面失去响应，变卡顿。</p><p>同时页面存在内存泄漏等问题，也会让浏览器内存占用越来越高，越来越慢。</p><h4 id="3-不安全"><a class="markdownIt-Anchor" href="#3-不安全"></a> (3) 不安全</h4><p>恶意的插件或脚本通过浏览器漏洞获取系统权限，从而会引发安全问题。</p><h2 id="二-多进程浏览器时代"><a class="markdownIt-Anchor" href="#二-多进程浏览器时代"></a> 二、多进程浏览器时代</h2><h3 id="1-早期多进程架构"><a class="markdownIt-Anchor" href="#1-早期多进程架构"></a> 1. 早期多进程架构</h3><p>2008年Chrome发布时的进程架构。</p><p>Chrome的页面运行在单独的渲染进程中，同时插件也独立出来了，运行在插件进程中，进程之间通过IPC机制进行通信。</p><p><strong>将单进程拆分为一个浏览器主进程，多个渲染进程，多个插件进程。</strong></p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201229133726.png" alt="image-20201030224247087"/><h4 id="1-如何解决不稳定的问题"><a class="markdownIt-Anchor" href="#1-如何解决不稳定的问题"></a> (1) 如何解决不稳定的问题？</h4><p>**进程之间相互隔离。**当一个页面或者插件崩溃时，仅仅影响到的是当前页面或插件的进程，并不会对浏览器主进程造成影响，这样就不会导致崩溃问题，从而解决了不稳定的问题。</p><h4 id="2-如何解决不流畅的问题"><a class="markdownIt-Anchor" href="#2-如何解决不流畅的问题"></a> (2) 如何解决不流畅的问题？</h4><p>**一个页面对应一个渲染进程。**因为JavaScript运行在渲染进程中，所以即使JavaScript阻塞了渲染进程，影响到的也是当前的渲染进程，并不会对浏览器主进程和其他渲染进程有影响，即使遇到不流畅问题也只是当前页面不流畅，不会影响其他页面，从而解决了不流畅问题。</p><h4 id="3-如何解决不安全的问题"><a class="markdownIt-Anchor" href="#3-如何解决不安全的问题"></a> (3) 如何解决不安全的问题？</h4><p>**使用安全沙箱。**相当于操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能往硬盘上写任何数据或是读取敏感数据等危险操作。Chrome把插件进程和渲染进程锁在沙箱里运行，这样即使插件进程或渲染进程有恶意程序，也无法突破沙箱获取系统权限。</p><h3 id="2-目前多进程架构"><a class="markdownIt-Anchor" href="#2-目前多进程架构"></a> 2. 目前多进程架构</h3><p><strong>最新的Chrome浏览器包括：1个浏览器主进程、1个GPU进程、1个网络进程、多个渲染进程和多个插件进程。</strong></p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201229133729.png" alt="image-20201030224415290"/><ul><li>浏览器主进程：主要负责界面显示、用户交互、子进程管理，同时提供存储功能。</li><li>GPU进程：Chrome刚发布时是没有GPU进程的。为了实现3D CSS的效果，从而引入了GPU，随后，网页、Chrome的UI界面都采用GPU来绘制，这使得GPU成为浏览器普遍的需求。之后，Chrome在多进程架构上引入了GPU进程。</li><li>网络进程：主要负责页面的网络资源加载。之前是作为一个模块运行在浏览器主进程里面的，后来才独立出来的。</li><li>渲染进程：核心任务是将HTML、CSS和JavaScript转换为可以与用户交互的页面，<strong>排版引擎Blink和JavaScript引擎V8</strong>都运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程，同时是在沙箱模式下运行的。</li><li>插件进程：主要负责插件的运行。保证插件的运行不会对浏览器主进程和渲染进程造成影响。</li></ul><h3 id="3-多进程架构带来的问题"><a class="markdownIt-Anchor" href="#3-多进程架构带来的问题"></a> 3. 多进程架构带来的问题</h3><p>虽然多进程架构提升了浏览器的稳定性、流畅性和安全性，但同样带来了不可避免的一些问题。</p><h4 id="1-更高的资源占用"><a class="markdownIt-Anchor" href="#1-更高的资源占用"></a> (1) 更高的资源占用</h4><p>因为每个进程都包含公共基础结构的副本（如JavaScript运行环境），这就意味着浏览器会消耗更多的内存资源。</p><h4 id="2-更复杂的体系架构"><a class="markdownIt-Anchor" href="#2-更复杂的体系架构"></a> (2) 更复杂的体系架构</h4><p>浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构难以适应新的需求。</p><h2 id="三-未来面向服务的架构"><a class="markdownIt-Anchor" href="#三-未来面向服务的架构"></a> 三、未来面向服务的架构</h2><p>为了解决上面2个问题，在2016年，Chrome官方团队使用“面向服务的架构”（Services Oriented Architecture, SOA）的思想设计了新的架构。</p><p>原来的各种模块会被重构成独立的Service，每个Service都可以在独立的进程中运行，访问Service必须使用定义好的接口，通过IPC来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统。</p><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201229133733.png" alt="image-20201030224455884"/>目前Chrome正处在老的架构向服务化架构过渡阶段，这是一个漫长的迭代过程。</p><p>Chrome正在逐步构建基础服务，同时还提供灵活的弹性架构，在强大的性能设备上会以多进程的方式运行Chrome基础服务，但如果在资源受限的设备上，Chrome会将很多服务整合到一个进程中，以减少内存占用。</p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201229133736.png" alt="image-20201031160848335"  /><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li>李兵《浏览器工作原理与实践》：<a href="https://time.geekbang.org/column/intro/100033601">https://time.geekbang.org/column/intro/100033601</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode不能读取.bash_profile</title>
      <link href="2020/12/28/Error%20Collection/VSCode%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96.bash_profile/"/>
      <url>2020/12/28/Error%20Collection/VSCode%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96.bash_profile/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode不能读取bash_profile"><a class="markdownIt-Anchor" href="#vscode不能读取bash_profile"></a> VSCode不能读取.bash_profile</h1><p>VSCode中的终端命令行读取不到.bash_profile文件。</p><p>方法一：</p><p>.bash_profile文件改名为.bashrc</p><p>方法二：</p><p>复制一份.bash_profile，并改名为.bashrc</p><p>在.bash_profile第一行添加<code>if [ -f ~/.bashrc ]; then . ~/.bashrc; fi</code></p>]]></content>
      
      
      <categories>
          
          <category> Error Collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Promise及其方法</title>
      <link href="2020/12/28/JavaScript/%E6%89%8B%E5%86%99Promise%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95/"/>
      <url>2020/12/28/JavaScript/%E6%89%8B%E5%86%99Promise%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="手写promise及其方法"><a class="markdownIt-Anchor" href="#手写promise及其方法"></a> 手写Promise及其方法</h1><h2 id="一-promise-then"><a class="markdownIt-Anchor" href="#一-promise-then"></a> 一、Promise-then</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * promise实例的状态常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理then函数的参数(onfulfilled,onrejected)的执行结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span> (<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Chaining cycle detected for promise #&lt;Promise&gt;&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> &amp;&amp; x !== <span class="literal">null</span>) </span><br><span class="line">    || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span> <span class="comment">// 防止多次调用成功或失败</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        then.call(x,</span><br><span class="line">          y =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            resolvePromise(promise2, y, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          r =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            reject(r)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title">constructor</span> (<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = PENDING</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.onfulfilledCallback = []</span><br><span class="line">    <span class="built_in">this</span>.onrejectedCallback = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">        <span class="built_in">this</span>.value = value</span><br><span class="line">        <span class="built_in">this</span>.onfulfilledCallback.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">        <span class="built_in">this</span>.reason = reason</span><br><span class="line">        <span class="built_in">this</span>.onrejectedCallback.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then (onfulfilled, onrejected) &#123;</span><br><span class="line">    </span><br><span class="line">    onfulfilled = <span class="keyword">typeof</span> onfulfilled === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? onfulfilled</span><br><span class="line">      : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    </span><br><span class="line">    onrejected = <span class="keyword">typeof</span> onrejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? onrejected</span><br><span class="line">      : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onfulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onrejected(<span class="built_in">this</span>.reason)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onfulfilledCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = onfulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onrejectedCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = onrejected(<span class="built_in">this</span>.reason)</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于promises-aplus-tests</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.defer = Promise.deferred = function () &#123;</span></span><br><span class="line"><span class="comment">//   let dfd = &#123;&#125;</span></span><br><span class="line"><span class="comment">//   dfd.promise = new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     dfd.resolve = resolve</span></span><br><span class="line"><span class="comment">//     dfd.reject = reject</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">//   return dfd</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports = Promise</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个值是否是promise实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isPromise = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value !== <span class="literal">null</span>) </span><br><span class="line">    || <span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-catch-finally"><a class="markdownIt-Anchor" href="#二-catch-finally"></a> 二、catch-finally</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">catch</span> (onrejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onrejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">finally</span> (cb) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">      res =&gt; <span class="built_in">Promise</span>.resolve(cb()).then(<span class="function">() =&gt;</span> res),</span><br><span class="line">      err =&gt; <span class="built_in">Promise</span>.resolve(cb()).catch(<span class="function">() =&gt;</span> err)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-resolve-reject"><a class="markdownIt-Anchor" href="#三-resolve-reject"></a> 三、resolve-reject</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> resolve (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPromise(value)) &#123;</span><br><span class="line">        value.then(resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> reject (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-race"><a class="markdownIt-Anchor" href="#四-race"></a> 四、race</h2><p>Promise.race：谁先改变状态就返回谁的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> race (values) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = values[i]</span><br><span class="line">        <span class="keyword">if</span> (isPromise(cur)) &#123;</span><br><span class="line">          cur.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(cur)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-all"><a class="markdownIt-Anchor" href="#五-all"></a> 五、all</h2><p>Promise.all：状态都是fulfilled，返回所有结果，有一个rejected，就返回rejected结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> all (values) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> ret = []</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">processData</span> (<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">        ret[i] = val</span><br><span class="line">        <span class="keyword">if</span> (++index === values.length) &#123;</span><br><span class="line">          resolve(ret)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = values[i]</span><br><span class="line">        <span class="keyword">if</span> (isPromise(cur)) &#123;</span><br><span class="line">          cur.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            processData(i, val)</span><br><span class="line">          &#125;, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          processData(i, cur)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-allsettled"><a class="markdownIt-Anchor" href="#六-allsettled"></a> 六、allSettled</h2><p>Promise.allSettled：状态总是fulfilled，记录所有成功失败结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> allSettled (values) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ret = []</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">processData</span> (<span class="params">i, val, type</span>) </span>&#123;</span><br><span class="line">        ret[i] = &#123;</span><br><span class="line">          status: type === <span class="string">&#x27;value&#x27;</span> ? FULFILLED : REJECTED,</span><br><span class="line">          [type]: val</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++index === values.length) &#123;</span><br><span class="line">          resolve(ret)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = values[i]</span><br><span class="line">        <span class="keyword">if</span> (isPromise(cur)) &#123;</span><br><span class="line">          cur.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            processData(i, res, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">          &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            processData(i, err, <span class="string">&#x27;reason&#x27;</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          processData(i, cur, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七-any"><a class="markdownIt-Anchor" href="#七-any"></a> 七、any</h2><p>Promise.any：有一个fulfilled，就返回fulfilled的结果，都rejected，则返回rejecte。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> any (values) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> errData = []</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">processError</span> (<span class="params">i, err</span>) </span>&#123;</span><br><span class="line">        errData[i] = err</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (++index === values.length) &#123;</span><br><span class="line">          reject(<span class="string">&quot;AggregateError: All promises were rejected&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = values[i]</span><br><span class="line">        <span class="keyword">if</span> (isPromise(cur)) &#123;</span><br><span class="line">          cur.then(resolve, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            processError(i, err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(cur)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li>Promises/A+：<a href="https://promisesaplus.com/">https://promisesaplus.com/</a></li><li>阮一峰 ES6教程：<a href="https://wangdoc.com/es6/promise.html">https://wangdoc.com/es6/promise.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8是如何实现async/await的?</title>
      <link href="2020/12/27/JavaScript/V8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0asyncawait%E7%9A%84/"/>
      <url>2020/12/27/JavaScript/V8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0asyncawait%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="v8是如何实现asyncawait的"><a class="markdownIt-Anchor" href="#v8是如何实现asyncawait的"></a> V8是如何实现async/await的?</h1><h2 id="一-异步编程方案史"><a class="markdownIt-Anchor" href="#一-异步编程方案史"></a> 一、异步编程方案史</h2><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201228191600.png" alt="image-20201228190227226" /></p><h2 id="二-generator函数"><a class="markdownIt-Anchor" href="#二-generator函数"></a> 二、Generator函数</h2><p>Generator函数：<code>function*</code>,配合<code>yield</code>可以实现函数的<strong>暂停和恢复</strong>执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析执行过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;getData&#x27;</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">yield</span> getData(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">yield</span> getData(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;finish&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = genFn()</span><br><span class="line"><span class="built_in">console</span>.log(gen.next())</span><br><span class="line"><span class="built_in">console</span>.log(gen.next())</span><br><span class="line"><span class="built_in">console</span>.log(gen.next())</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">&#123;value: Promise&#123;&lt;pending&gt;&#125;,done: false&#125;</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">&#123;value: Promise&#123;&lt;pending&gt;&#125;,done: false&#125;</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">&#123;value: &#x27;finish&#x27;,done: true&#125;</span></span><br><span class="line"><span class="comment">getData1</span></span><br><span class="line"><span class="comment">getData2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在Generator函数内部，如果遇到yield，那么，V8将返回yield后面的内容给外部，并暂停Generator函数的执行。Generator函数暂停执行后，外部的代码便开始执行，外部代码如果想要恢复Generator函数的执行，可以使用 next 方法。</p><p>那么，<strong>V8是如何实现Generator函数的暂停和恢复执行的？？？</strong></p><p>那就是<strong>协程</strong>。</p><h2 id="三-协程"><a class="markdownIt-Anchor" href="#三-协程"></a> 三、协程</h2><p>协程：一种比线程更加轻量级的存在。</p><p>可以把协程看做是跑在线程上的任务，一个线程可以存在多个协程，但在线程上同时只能执行一个协程，同时，协程不是被操作系统内核管理的，而是由程序所控制的（也就是在用户态执行），这样协程切换不会太消耗资源。</p><p>通常，如果从A协程启动B协程，就把A协程成为B协程的父协程。</p><p>在JavaScript中，生成器就是协程的一种实现方式。</p><p>但是光有生成器还不够，每次都要手动去暂停和恢复，所以又引入了执行器，著名的<code>co</code>，就是一个<strong>执行器</strong>。</p><h2 id="四-终极方案asyncawait"><a class="markdownIt-Anchor" href="#四-终极方案asyncawait"></a> 四、终极方案async/await</h2><p>由于需要引入 co 来充当执行器，这一点还不够友好。</p><p>所以ES7引入了async/await，它改进了生成器的缺点，提供了在不阻塞主线程的情况下使用同步的方式实现异步访问资源的能力。</p><p>其背后的原理就是Promise和生成器，再细一点的说就是微任务和协程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析执行过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;getData&#x27;</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">genFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> getData(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res1)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> res2 = <span class="keyword">await</span> getData(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res2)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;finish&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = genFn()</span><br><span class="line"><span class="built_in">console</span>.log(gen)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">__proto__: Promise</span></span><br><span class="line"><span class="comment">[[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line"><span class="comment">[[PromiseResult]]: &quot;finish&quot;</span></span><br><span class="line"><span class="comment">getData1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">getData2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>async是一个通过<strong>异步执行</strong>并隐式返回Promise实例作为结果的函数。</p><p>await后面可以跟两种类型的表达式：</p><ul><li>任何普通表达式：会被包装成Promise对象</li><li>Promise对象的表达式</li></ul><p>如果在async函数里使用了await，那么执行到await时，就会暂停执行，等待await后面的表达式有结果了再返回给外面，也就是等到Promise变成resolved，然后再恢复执行。</p><p>其实async声明的函数在执行时，就相当于创建了一个单独的协程，可以通过await来暂停执行，等到await后面的Promise表达式变成resolved，再恢复执行。</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li>李兵《图解 Google V8》：<a href="https://time.geekbang.org/column/intro/100048001">https://time.geekbang.org/column/intro/100048001</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8是如何实现微任务的?</title>
      <link href="2020/12/27/JavaScript/V8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84/"/>
      <url>2020/12/27/JavaScript/V8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="v8是如何实现微任务的"><a class="markdownIt-Anchor" href="#v8是如何实现微任务的"></a> V8是如何实现微任务的?</h1><p>基于V8的UI线程架构模型，JavaScript延伸了很多新技术，其中应用最广泛的就是<strong>宏任务</strong>和<strong>微任务</strong>。</p><h2 id="一-宏任务"><a class="markdownIt-Anchor" href="#一-宏任务"></a> 一、宏任务</h2><p>宏任务：就是指消息队列中等待被主线程执行的任务。</p><p>每个宏任务在执行时，V8都会重新创建调用栈，随着宏任务中函数的调用，调用栈也会随之变化，最终，该宏任务执行结束时，整个调用栈又会被清空，接着执行下一个宏任务。</p><p>常见宏任务：定时器，各种事件。</p><h2 id="二-微任务"><a class="markdownIt-Anchor" href="#二-微任务"></a> 二、微任务</h2><p>微任务：微任务可以看做是一个需要异步执行的函数，执行时机是在<strong>主函数执行结束之后，当前宏任务结束之前</strong>。</p><p><strong>V8为什么要引入微任务？？？</strong></p><p>由于主线程执行消息队列中宏任务的时间颗粒度太粗了，无法胜任一些对精度和实时性要求较高的场景，所以引入微任务在实时性和效率之间做一个有效的平衡。同时，使用微任务可以让我们改变异步编程的方式，以同步的方式编写异步代码。</p><p>常见微任务：Promise，async/await，MutationObserver</p><p>微任务相关知识：</p><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201227213443.png" alt="微任务知识栈" /></p><p>微任务是基于消息队列，事件循环，UI线程架构，堆栈的，同时基于微任务，又可以延伸出promise，generaor，协程，async/await。</p><h2 id="三-主线程-调用栈"><a class="markdownIt-Anchor" href="#三-主线程-调用栈"></a> 三、主线程-调用栈</h2><p>调用栈是一种数据结构，用来管理主线程上执行的函数的调用关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用栈分析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">foo(bar)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201227213451.jpg" alt="未标题-1" /></p><p>由于调用栈空间在内存中是连续的，所以通常会限制调用栈的大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栈溢出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决栈溢出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    foo()</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>当函数嵌套过深时，调用栈中的执行上下文会堆积在栈中，最终导致<strong>栈溢出</strong>。</p><p>当然我们可以用setTimeout来解决栈溢出问题。原理就是将同步函数调用改成异步函数调用，这样foo函数就会被封装成宏任务，添加到消息队列中，主线程每次在执行消息队列中的宏任务时，都会重新创建调用栈，这样就不会存在栈溢出问题。</p><p>但是，这又存在一个问题，如果某些宏任务的执行时间过久，会影响到后面宏任务的执行。因为宏任务的执行时间是不可控的，我们不知道多要多久才能执行结束。</p><h2 id="四-微任务解决宏任务执行时机不可控问题"><a class="markdownIt-Anchor" href="#四-微任务解决宏任务执行时机不可控问题"></a> 四、微任务解决宏任务执行时机不可控问题</h2><p>微任务会在当前的宏任务快要执行结束时才执行，这样可以比较精确的控制回调函数的执行时机。</p><p>那么，<strong>V8如何实现微任务的？？？</strong></p><p>V8会为每个宏任务维护一个<strong>微任务队列</strong>。当V8执行一段JS代码时，会为这段代码创建一个全局执行上下文，微任务队列就存放在该执行上下文中。当通过Promise.resolve等创建一个微任务时，该微任务就会被V8添加进微任务队列中，等这段代码快要执行结束时，V8会先检查微任务队列中是否有任务要执行，有的话，就按顺序执行微任务，最后销毁该执行上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析代码执行过程中消息队列,调用栈,微任务队列变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>) <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;micro-bar&#x27;</span>)) <span class="comment">// 5</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;macro-bar&#x27;</span>), <span class="number">0</span>) <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>)  <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;micro-foo&#x27;</span>)) <span class="comment">// 4</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;macro-foo&#x27;</span>), <span class="number">0</span>) <span class="comment">// 7</span></span><br><span class="line">  bar()</span><br><span class="line">&#125; </span><br><span class="line">foo() </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;global&#x27;</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;micro-global&#x27;</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;macro-global&#x27;</span>), <span class="number">0</span>) <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析代码执行过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(foo)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>当在微任务中循环触发新的微任务时，会导致页面成卡死状态，但并不会栈溢出。因为当前宏任务始终无法执行结束，导致后面的宏任务无法执行，同时，取出微任务，执行又添加微任务，当前微任务执行结束退出，又重复之前操作，这样页面就体现出卡死的状态，同时并不会栈溢出。</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><p>李兵《图解 Google V8》：<a href="https://time.geekbang.org/column/intro/100048001">https://time.geekbang.org/column/intro/100048001</a></p>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8是如何实现回调函数的?</title>
      <link href="2020/12/27/JavaScript/V8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84/"/>
      <url>2020/12/27/JavaScript/V8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="v8是如何实现回调函数的"><a class="markdownIt-Anchor" href="#v8是如何实现回调函数的"></a> V8是如何实现回调函数的?</h1><p>从内部了解回调函数，有助于理解很多问题：</p><ol><li>理解浏览器中的Web API 是如何工作的；</li><li>理解宏任务，微任务以及它们之间的区别；</li><li>回调函数是理解异步编程的基础；</li></ol><a id="more"></a><h2 id="一-回调函数"><a class="markdownIt-Anchor" href="#一-回调函数"></a> 一、回调函数</h2><p>回调函数其实是一个函数，区别于普通函数，在于它的调用方式。当某个函数作为参数，传递给另一个函数，然后在该函数内部被调用，就称为回调函数。</p><p>回调函数有两种不同的形式：</p><ol><li>同步回调：在执行函数内部被执行。</li><li>异步回调：在执行函数外部被执行。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步回调, double函数在map函数内部执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">arr.map(double)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步回调, 执行位置和时间点不在函数内部</span></span><br><span class="line"><span class="comment"> * log函数不是在setTimeout函数内部执行的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(log, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>由此可知回调函数执行时机：</p><ul><li>同步回调：在执行函数内部按代码顺序执行</li><li>异步回调：那异步回调呢？？？在什么位置什么时间点执行？？？那就需要先了解V8在运行时的线程架构模型</li></ul><h2 id="二-v8的线程架构模型"><a class="markdownIt-Anchor" href="#二-v8的线程架构模型"></a> 二、V8的线程架构模型</h2><p>早期浏览器的页面运行在一个<strong>单独的UI线程</strong>中（运行窗口的线程），要在页面中引入JavaScript，那必须要让JavaScript运行在和页面相同的UI线程中。在页面线程中，当一个事件被触发时，该事件会被提交给UI线程来处理，然而，在大部分情况下，UI线程不能立即响应和处理该事件，因为UI线程可能在处理前一个任务。</p><p>针对这种情况，为UI线程提供了一个<strong>消息队列</strong>，将这些待执行的事件添加到消息队列中，然后UI线程会不断循环地从消息队列中取出事件，并执行。我们把UI线程每次从消息队列取出事件，执行事件的过程称为一个<strong>任务</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIMainThread</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(queue.length)&#123;  <span class="comment">// queue: 消息队列</span></span><br><span class="line"><span class="keyword">const</span> task = queue.shift()  <span class="comment">// 取出一个任务</span></span><br><span class="line">    processTask(task)  <span class="comment">// 执行该任务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201227193636.png" alt="通用UI线程架构" /></p><h2 id="三-异步回调函数的调用时机"><a class="markdownIt-Anchor" href="#三-异步回调函数的调用时机"></a> 三、异步回调函数的调用时机</h2><p>了解了UI线程架构，就可以解释异步回调的执行时机了。在执行setTimeout函数的过程中，会将foo函数封装成一个事件，并添加到消息队列中，然后setTimeout函数执行结束。主线程不断从消息队列中取出任务并执行。所以foo函数的执行位置是在执行函数外部的。</p><p>有一类回调和setTimout触发的回调是有区别的，最典型的就是XMLHttpRequest所触发的回调。因为XMLHttpRequest是用来下载网络资源的，下载任务耗时比较久，并不适合在UI线程上执行，所以当主线程从消息队列中取出这类<strong>下载任务</strong>的任务之后，会将其分配给<strong>网络线程</strong>，让其在网络线程上执行下载过程。</p><p><img src="https://gitee.com/MarMomento/image/raw/master/img/20201227193653.png" alt="xhr的回调过程" /></p><p>UI线程处理下载事件过程：</p><ol><li>UI线程从消息队列中取出一个任务，并分析该任务，发现该任务是一个下载请求，就会将该任务交给网络线程</li><li>网络线程收到请求之后，便和服务端建立连接，并发出下载请求</li><li>网络线程不断接收服务端传过来的数据。每次接收到数据时都会将回调函数和接收的数据封装成事件，并添加到消息队列中</li><li>UI线程循环从消息队列中读取并执行任务。如果是下载状态的事件，那么就可以通过回调函数追踪下载的进度，直到最后接收到下载结束事件，那么下载任务就结束了。</li></ol><p>除了XMLHttpRequest所触发的下载任务采用了这种方式外，获取系统设备信息，读取文件等也都采用这种类似方式实现的。</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li>李兵《图解 Google V8》：<a href="https://time.geekbang.org/column/intro/100048001">https://time.geekbang.org/column/intro/100048001</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM常见兼容性封装</title>
      <link href="2020/12/26/JavaScript/DOM%E5%B8%B8%E8%A7%81%E5%85%BC%E5%AE%B9%E6%80%A7%E5%B0%81%E8%A3%85/"/>
      <url>2020/12/26/JavaScript/DOM%E5%B8%B8%E8%A7%81%E5%85%BC%E5%AE%B9%E6%80%A7%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="dom常见兼容性封装"><a class="markdownIt-Anchor" href="#dom常见兼容性封装"></a> DOM常见兼容性封装</h1><h2 id="一-事件"><a class="markdownIt-Anchor" href="#一-事件"></a> 一、事件</h2><h3 id="绑定事件处理函数"><a class="markdownIt-Anchor" href="#绑定事件处理函数"></a> 绑定事件处理函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 绑定事件处理函数 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">      <span class="comment">// DOM2</span></span><br><span class="line">      ele.addEventListener(type, handler, <span class="literal">false</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.attachEvent) &#123;</span><br><span class="line">      <span class="comment">// IE</span></span><br><span class="line">      ele.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        handler.call(ele)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// DOM0</span></span><br><span class="line">      ele[<span class="string">&#x27;on&#x27;</span> + type] = handler</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解绑事件处理函数"><a class="markdownIt-Anchor" href="#解绑事件处理函数"></a> 解绑事件处理函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 解绑事件处理函数 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.removeEventListener) &#123;</span><br><span class="line">      <span class="comment">// DOM2</span></span><br><span class="line">      ele.removeEventListener(type, handler, <span class="literal">false</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.detachEvent) &#123;</span><br><span class="line">      <span class="comment">// IE</span></span><br><span class="line">      ele.detachEvent(<span class="string">&#x27;on&#x27;</span> + type, handler)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// DOM0</span></span><br><span class="line">      ele[<span class="string">&#x27;on&#x27;</span> + type] = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件对象"><a class="markdownIt-Anchor" href="#事件对象"></a> 事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 获取事件对象 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件源目标"><a class="markdownIt-Anchor" href="#事件源目标"></a> 事件源目标</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 获取事件目标 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止冒泡"><a class="markdownIt-Anchor" href="#阻止冒泡"></a> 阻止冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 阻止冒泡 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.stopPropagation) &#123;</span><br><span class="line">      e.stopPropagation()  <span class="comment">// 标准</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e.cancelBubble = <span class="literal">true</span>  <span class="comment">// IE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取消默认事件"><a class="markdownIt-Anchor" href="#取消默认事件"></a> 取消默认事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 取消默认事件 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e.returnValue = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-元素偏移量"><a class="markdownIt-Anchor" href="#二-元素偏移量"></a> 二、元素偏移量</h2><h3 id="左侧偏移量"><a class="markdownIt-Anchor" href="#左侧偏移量"></a> 左侧偏移量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素的左侧偏移值, content+padding+border</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementOffsetLeft</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentLeft = ele.offsetLeft</span><br><span class="line">  <span class="keyword">let</span> parent = ele.offsetParent</span><br><span class="line"><span class="keyword">while</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">    currentLeft += parent.offsetLeft</span><br><span class="line">    parent = parent.offsetParent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentLeft</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上侧偏移量"><a class="markdownIt-Anchor" href="#上侧偏移量"></a> 上侧偏移量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素的上侧偏移值, content+padding+border</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementOffsetTop</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentTop = ele.offsetTop</span><br><span class="line">  <span class="keyword">let</span> parent = ele.offsetParent</span><br><span class="line">  <span class="keyword">while</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">    currentTop += parent.offsetTop</span><br><span class="line">    parent = parent.offsetParent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentTop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-获取视口宽高"><a class="markdownIt-Anchor" href="#三-获取视口宽高"></a> 三、获取视口宽高</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取窗口页面可视区域宽高</span></span><br><span class="line"><span class="comment"> * getViewportOffset().w</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pageWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">  <span class="keyword">let</span> pageHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">&#x27;BackCompat&#x27;</span>) &#123;</span><br><span class="line">      pageWidth = <span class="built_in">document</span>.body.clientWidth</span><br><span class="line">      pageHeight = <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pageWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">      pageHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    w: pageWidth,</span><br><span class="line">    h: pageHeight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-滚动条滚动距离"><a class="markdownIt-Anchor" href="#四-滚动条滚动距离"></a> 四、滚动条滚动距离</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取滚动条的滚动距离</span></span><br><span class="line"><span class="comment"> * getScrollOffset().y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x, y</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.pageXOffset || <span class="built_in">window</span>.pageYOffset) &#123;</span><br><span class="line">    x = <span class="built_in">window</span>.pageXOffset || <span class="built_in">window</span>.scrollX</span><br><span class="line">    y = <span class="built_in">window</span>.pageYOffset || <span class="built_in">window</span>.scrollY</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x = <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft</span><br><span class="line">    y = <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x, y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-解析查询字符串"><a class="markdownIt-Anchor" href="#五-解析查询字符串"></a> 五、解析查询字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析查询字符串</span></span><br><span class="line"><span class="comment"> * parseQueryString(&#x27;?foo=bar&#x27;)</span></span><br><span class="line"><span class="comment"> * parseQueryString(&#x27;foo=bar&#x27;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> qs = str[<span class="number">0</span>] === <span class="string">&#x27;?&#x27;</span> ? str.slice(<span class="number">1</span>) : str</span><br><span class="line">  <span class="keyword">let</span> args = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> items = qs.length ? qs.split(<span class="string">&quot;&amp;&quot;</span>) : []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = items[i].split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> key = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> (key.length) &#123;</span><br><span class="line">      args[key] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数防抖和节流</title>
      <link href="2020/12/26/JavaScript/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>2020/12/26/JavaScript/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="函数防抖和节流"><a class="markdownIt-Anchor" href="#函数防抖和节流"></a> 函数防抖和节流</h1><h2 id="一-函数防抖"><a class="markdownIt-Anchor" href="#一-函数防抖"></a> 一、函数防抖</h2><p>函数防抖：事件在n秒后再执行，也就是延迟执行，若n秒内再次触发事件，则重新开始计时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v1 - 首次触发防抖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) <span class="built_in">clearTimeout</span>(t)</span><br><span class="line"></span><br><span class="line">    t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(_self, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首次触发不防抖，n秒之内触发防抖。应用于频繁AJAX请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v2 - 首次可以不防抖</span></span><br><span class="line"><span class="comment"> * 可手动移除防抖</span></span><br><span class="line"><span class="comment"> * 可返回函数执行的结果</span></span><br><span class="line"><span class="comment"> * 主要应用于频繁ajax请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay, triggerNow = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="literal">null</span>, </span><br><span class="line">    res = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) <span class="built_in">clearTimeout</span>(t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 立即触发</span></span><br><span class="line">    <span class="keyword">if</span> (triggerNow) &#123;</span><br><span class="line">      <span class="comment">// 第一次t=null,exec=true</span></span><br><span class="line">      <span class="keyword">var</span> exec = !t</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// t = idNumber</span></span><br><span class="line">      <span class="comment">// delay seconds 之后, t = null</span></span><br><span class="line">      <span class="comment">// delay seconds 之内频繁触发, exec = false</span></span><br><span class="line">      t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        t = <span class="literal">null</span></span><br><span class="line">      &#125;, delay)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 首次执行</span></span><br><span class="line">      <span class="keyword">if</span> (exec) &#123;</span><br><span class="line">        res = fn.apply(_self, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res = fn.apply(_self, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动移除防抖</span></span><br><span class="line">  debounced.remove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(t)</span><br><span class="line">    t = <span class="literal">null</span></span><br><span class="line">    res = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-函数节流"><a class="markdownIt-Anchor" href="#二-函数节流"></a> 二、函数节流</h2><p>函数节流：事件在n秒之内只执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v1 - 锁机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lock = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(lock) <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    fn.apply(_self,args)</span><br><span class="line">    lock = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      lock = <span class="literal">false</span></span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v2 - 计时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="literal">null</span>,</span><br><span class="line">    begin = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>,</span><br><span class="line">      cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) <span class="built_in">clearTimeout</span>(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur - begin &gt;= delay) &#123;</span><br><span class="line">      fn.apply(_self, args)</span><br><span class="line">      begin = cur</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.apply(_self, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3个O(nlogn)排序</title>
      <link href="2020/12/24/Algorithm/3%E4%B8%AAO(nlogn)%E6%8E%92%E5%BA%8F/"/>
      <url>2020/12/24/Algorithm/3%E4%B8%AAO(nlogn)%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="3个onlogn排序"><a class="markdownIt-Anchor" href="#3个onlogn排序"></a> 3个O(nlogn)排序</h1><h2 id="一-helperjs"><a class="markdownIt-Anchor" href="#一-helperjs"></a> 一、helper.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    testTimes: <span class="number">50000</span>,</span><br><span class="line">    maxSize: <span class="number">100</span>,</span><br><span class="line">    maxValue: <span class="number">100</span>,</span><br><span class="line">    spendTime: <span class="number">0</span>,</span><br><span class="line">    isSuccess: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; options.testTimes; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.isSuccess) &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = generateRandomArray(options.maxSize, options.maxValue)</span><br><span class="line">      <span class="keyword">const</span> copiedArray = copyArray(arr)</span><br><span class="line">      builtInSort(arr)</span><br><span class="line">      testSortAndRecordTime(fn, copiedArray, options)</span><br><span class="line">      <span class="keyword">const</span> isSuccess = isSorted(arr, copiedArray)</span><br><span class="line">      <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">        options.isSuccess = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (options.isSuccess) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nice!!!&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fn.name&#125;</span>: testTimes: <span class="subst">$&#123;options.testTimes&#125;</span>次, averageSpendTime: <span class="subst">$&#123;options.spendTime / options.testTimes&#125;</span>ms`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">    options.maxSize = <span class="number">5</span></span><br><span class="line">    options.maxValue = <span class="number">10</span></span><br><span class="line">    debugFn(fn, options.maxSize, options.maxValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机数组</span></span><br><span class="line"><span class="comment"> * 容量为[0,maxSize]</span></span><br><span class="line"><span class="comment"> * 取值范围在[-maxValue,+maxValue],</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span> (<span class="params">maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(~~(<span class="built_in">Math</span>.random() * (maxSize + <span class="number">1</span>)))</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (~~(<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>))) - (~~(<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyArray</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.slice(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内置排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">builtInSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试待排序的数组并记录执行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testSortAndRecordTime</span> (<span class="params">fn, data, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  fn(data)</span><br><span class="line">  <span class="keyword">const</span> end = <span class="built_in">Date</span>.now()</span><br><span class="line">  options.spendTime += (end - start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较两个排序,看是否已经有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSorted</span> (<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr1.length &amp;&amp; !arr2.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (!arr1.length || !arr2.length || arr1.length !== arr2.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.length; i++)</span><br><span class="line">    <span class="keyword">if</span> (arr1[i] !== arr2[i])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调试排序函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugFn</span> (<span class="params">fn, maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = generateRandomArray(maxSize, maxValue)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>, arr)</span><br><span class="line">  fn(arr)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中的两个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有当 i !== j 时才可以</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">  <span class="comment">// arr[j] ^= arr[i]</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成一个[start,end]的n个元素的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const generateRandomArray = (n, start, end) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  const arr = []</span></span><br><span class="line"><span class="comment">  for (let i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="comment">    arr.push(~~(Math.random() * (end - start + 1) + start))</span></span><br><span class="line"><span class="comment">  return arr</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; test, swap &#125;</span><br></pre></td></tr></table></figure><h2 id="二-快速排序"><a class="markdownIt-Anchor" href="#二-快速排序"></a> 二、快速排序</h2><p>快速排序——每次选取一个基准值,将数组分为小于基准值和大于基准值的两部分,再重复之前的递归操作</p><ul><li>不稳定</li><li>O(nlogn)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  _quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对arr[low...high]进行快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = _partition(arr, low, high)</span><br><span class="line">  _quickSort(arr, low, p - <span class="number">1</span>)</span><br><span class="line">  _quickSort(arr, p + <span class="number">1</span>, high)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_partition</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">  <span class="comment">// arr[low+1...j] &lt; pivot ; arr[j+1...i) &gt; pivot</span></span><br><span class="line">  <span class="keyword">let</span> j = low</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = low + <span class="number">1</span>; i &lt;= high; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      swap(arr, i, j + <span class="number">1</span>)</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, low, j)</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化+双路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (high - low &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">    insertSort(arr, low, high)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = _partition(arr, low, high)</span><br><span class="line">  _quickSort(arr, low, p - <span class="number">1</span>)</span><br><span class="line">  _quickSort(arr, p + <span class="number">1</span>, high)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt; l &amp;&amp; arr[j - <span class="number">1</span>] &gt; e; j--)</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">    arr[j] = e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_partition</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 选取随机的位置作为pivot,防止存在近乎有序的数组</span></span><br><span class="line">  swap(arr, low, ~~(<span class="built_in">Math</span>.random() * (high - low + <span class="number">1</span>) + low))</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) high--</span><br><span class="line">    arr[low] = arr[high]</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt; pivot) low++</span><br><span class="line">    arr[high] = arr[low]</span><br><span class="line">  &#125;</span><br><span class="line">  arr[low] = pivot</span><br><span class="line">  <span class="keyword">return</span> low</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化_partition</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_partition</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  swap(arr, low, ~~(<span class="built_in">Math</span>.random() * (high - low + <span class="number">1</span>) + low)) <span class="comment">// 选取随机的位置作为pivot,防止存在近乎有序的数组</span></span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">  <span class="comment">// arr[low+1...i] &lt;= pivot ; arr(j...high] &gt;= pivot</span></span><br><span class="line">  <span class="keyword">let</span> i = low + <span class="number">1</span>, j = high</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= high &amp;&amp; arr[i] &lt; pivot) i++</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= low + <span class="number">1</span> &amp;&amp; arr[j] &gt; pivot) j--</span><br><span class="line">    <span class="keyword">if</span> (i &gt; j) <span class="keyword">break</span></span><br><span class="line">    swap(arr, i, j)</span><br><span class="line">    i++</span><br><span class="line">    j--</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, low, j)</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort3Ways</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  _quickSort3Ways(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort3Ways</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (high - low &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">    insertSort(arr, low, high)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// partition</span></span><br><span class="line">  swap(arr, low, ~~(<span class="built_in">Math</span>.random() * (high - low + <span class="number">1</span>) + low))</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lt = low, <span class="comment">// arr[low+1...lt] &lt; pivot  </span></span><br><span class="line">    gt = high + <span class="number">1</span>, <span class="comment">// arr[gt...high] &gt; pivot</span></span><br><span class="line">    i = low + <span class="number">1</span> <span class="comment">// arr[lt+1...i-1] = pivot  </span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      swap(arr, i, lt + <span class="number">1</span>)</span><br><span class="line">      lt++</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">      swap(arr, i, gt - <span class="number">1</span>)</span><br><span class="line">      gt--</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, low, lt)</span><br><span class="line"></span><br><span class="line">  _quickSort(arr, low, lt - <span class="number">1</span>)</span><br><span class="line">  _quickSort(arr, gt, high)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-归并排序"><a class="markdownIt-Anchor" href="#三-归并排序"></a> 三、归并排序</h2><p>归并排序：将原数组分割成一个一个子数组,分别排序子数组,再合并</p><ul><li>稳定</li><li>O(nlogn)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  _mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归调用归并排序，对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_mergeSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">  _mergeSort(arr, l, mid)</span><br><span class="line">  _mergeSort(arr, mid + <span class="number">1</span>, r)</span><br><span class="line">  _merge(arr, l, mid, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将arr[l...mid]和arr[mid+1...r]两部分合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_merge</span> (<span class="params">arr, l, mid, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aux = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l; i &lt;= r; i++)</span><br><span class="line">    aux[i] = arr[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = l, j = mid + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">      arr[k] = aux[j]</span><br><span class="line">      j++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">      arr[k] = aux[i]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i] &lt;= aux[j]) &#123;</span><br><span class="line">      arr[k] = aux[i]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[k] = aux[j]</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_mergeSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (r - l &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">    insertSort(arr, l, r)  <span class="comment">// 1.当数据量小时,转而使用插入会更快</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">  _mergeSort(arr, l, mid)</span><br><span class="line">  _mergeSort(arr, mid + <span class="number">1</span>, r)</span><br><span class="line">  <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) <span class="comment">// 2.如果已经有序,则不合并,否则,合并</span></span><br><span class="line">    _merge(arr, l, mid, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt; l &amp;&amp; arr[j - <span class="number">1</span>] &gt; e; j--)</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">    arr[j] = e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_merge</span> (<span class="params">arr, l, mid, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aux = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l; i &lt;= r; i++)</span><br><span class="line">    aux[i - l] = arr[i]       <span class="comment">// 3.减少数组空间开销</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = l, j = mid + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">      arr[k] = aux[j - l]</span><br><span class="line">      j++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">      arr[k] = aux[i - l]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &lt;= aux[j - l]) &#123;</span><br><span class="line">      arr[k] = aux[i - l]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[k] = aux[j - l]</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortNR</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> sz = <span class="number">1</span>; sz &lt;= arr.length; sz *= <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i + sz &lt; arr.length; i += sz * <span class="number">2</span>)</span><br><span class="line">      <span class="comment">//对arr[i...i+sz-1] 和 arr[i+sz ... i+sz+sz -1] 进行归并</span></span><br><span class="line">      _merge(arr, i, i + sz - <span class="number">1</span>, <span class="built_in">Math</span>.min(i + sz * <span class="number">2</span> - <span class="number">1</span>, arr.length - <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-堆排序"><a class="markdownIt-Anchor" href="#四-堆排序"></a> 四、堆排序</h2><p>堆排序：将数组调整成大根堆,每次将第一个元素与最后一个未排好序的元素交换</p><ul><li>不稳定</li><li>O(nlogn)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = ~~((arr.length - <span class="number">1</span>) / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    _shiftDown(arr, i, arr.length)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">    swap(arr, <span class="number">0</span>, j)</span><br><span class="line">    _shiftDown(arr, <span class="number">0</span>, j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_shiftDown</span> (<span class="params">arr, i, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">2</span> * i + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; arr[j + <span class="number">1</span>] &gt; arr[j])</span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[j]) <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    swap(arr, i, j)</span><br><span class="line">    i = j</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3个O(n²)排序</title>
      <link href="2020/12/24/Algorithm/3%E4%B8%AAO(n%C2%B2)%E6%8E%92%E5%BA%8F/"/>
      <url>2020/12/24/Algorithm/3%E4%B8%AAO(n%C2%B2)%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="3个on2排序"><a class="markdownIt-Anchor" href="#3个on2排序"></a> 3个O(n²)排序</h1><h2 id="helperjs"><a class="markdownIt-Anchor" href="#helperjs"></a> helper.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中的两个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有当 i !== j 时才可以</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">  <span class="comment">// arr[j] ^= arr[i]</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个长度为n的有序数组，[0...n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateOrderedArray</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(n)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    arr[i] = i</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个长度为n的随机数组，每个值的范围在[0,bound)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span> (<span class="params">n, bound</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(n)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    arr[i] = ~~(<span class="built_in">Math</span>.random() * bound)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个长度为n的随机数组，每个值的范围在[start,end]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomArrayByStartAndEnd</span> (<span class="params">n, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(n)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    arr[i] = ~~(<span class="built_in">Math</span>.random() * (end - start + <span class="number">1</span>) + start)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个数组是否有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSorted</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">    <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试排序算法性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testSort</span> (<span class="params">fn, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  fn(arr)</span><br><span class="line">  <span class="keyword">const</span> endTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">const</span> spendTime = endTime - startTime</span><br><span class="line">  <span class="keyword">if</span> (!isSorted(arr)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fn.name&#125;</span> failed!`</span>)</span><br><span class="line">    <span class="keyword">const</span> debugFn = generateRandomArray(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Before sort: [<span class="subst">$&#123;debugFn.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>]`</span>)</span><br><span class="line">    fn(debugFn)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`After sort: [<span class="subst">$&#123;debugFn.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>]`</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fn.name&#125;</span>: <span class="subst">$&#123;arr.length&#125;</span>, time: <span class="subst">$&#123;spendTime / <span class="number">1000</span>&#125;</span>s`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  swap,</span><br><span class="line">  generateOrderedArray,</span><br><span class="line">  generateRandomArray,</span><br><span class="line">  generateRandomArrayByStartAndEnd,</span><br><span class="line">  isSorted,</span><br><span class="line">  testSort</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一-选择排序"><a class="markdownIt-Anchor" href="#一-选择排序"></a> 一、选择排序</h2><p>简单选择排序：每次从待排序的序列中选择最小的元素放到前面</p><ul><li>不稳定</li><li>O(n²)</li></ul><h3 id="1-从前往后排序"><a class="markdownIt-Anchor" href="#1-从前往后排序"></a> 1. 从前往后排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择 arr[i...n) 中最小值的索引</span></span><br><span class="line">    <span class="keyword">let</span> minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line">        minIndex = j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i !== minIndex)</span><br><span class="line">      swap(arr, i, minIndex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-从后往前排序"><a class="markdownIt-Anchor" href="#2-从后往前排序"></a> 2. 从后往前排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择 arr[0...i] 中最大值的索引</span></span><br><span class="line">    <span class="keyword">let</span> maxIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[maxIndex])</span><br><span class="line">        maxIndex = j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i !== maxIndex)</span><br><span class="line">      swap(arr, i, maxIndex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-冒泡排序"><a class="markdownIt-Anchor" href="#二-冒泡排序"></a> 二、冒泡排序</h2><p>冒泡排序：从头到尾/从尾到头,按顺序两两比较,每一趟将最小/最大值交换到最左/最右边</p><ul><li>稳定</li><li>O(n²)</li></ul><h3 id="1-从前往后排序-2"><a class="markdownIt-Anchor" href="#1-从前往后排序-2"></a> 1. 从前往后排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isSwapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>)</span><br><span class="line">        isSwapped = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isSwapped)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>;) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastSwappedIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>)</span><br><span class="line">        lastSwappedIndex = j + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    i = arr.length - lastSwappedIndex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-从后往前排序-2"><a class="markdownIt-Anchor" href="#2-从后往前排序-2"></a> 2. 从后往前排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort4</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> isSwapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = arr.length - <span class="number">1</span>; j - <span class="number">1</span> &gt;= <span class="number">0</span> + i; j--)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>)</span><br><span class="line">        isSwapped = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isSwapped)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort5</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>;) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastSwappedIndex = arr.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = arr.length - <span class="number">1</span>; j - <span class="number">1</span> &gt;= <span class="number">0</span> + i; j--)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>)</span><br><span class="line">        lastSwappedIndex = j - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    i = lastSwappedIndex + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-插入排序"><a class="markdownIt-Anchor" href="#三-插入排序"></a> 三、插入排序</h2><p>插入排序：按顺序从待排序序列中取出一个并插入前面已经排序好的序列中</p><ul><li>稳定</li><li>O(n²)</li></ul><h3 id="1-从前往后排序-3"><a class="markdownIt-Anchor" href="#1-从前往后排序-3"></a> 1. 从前往后排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j - <span class="number">1</span> &gt;= <span class="number">0</span>; j--)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>])</span><br><span class="line">        swap(arr, j, j - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写形式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]; j--)</span><br><span class="line">      swap(arr, j, j - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line">    <span class="keyword">for</span> (j = i; j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - <span class="number">1</span>]; j--)</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-从后往前排序-3"><a class="markdownIt-Anchor" href="#2-从后往前排序-3"></a> 2. 从后往前排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line">    <span class="keyword">for</span> (j = i; j + <span class="number">1</span> &lt;= arr.length - <span class="number">1</span> &amp;&amp; temp &gt; arr[j + <span class="number">1</span>]; j++)</span><br><span class="line">      arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-泛型递归</title>
      <link href="2020/12/24/Algorithm/leetcode-%E6%B3%9B%E5%9E%8B%E9%80%92%E5%BD%92/"/>
      <url>2020/12/24/Algorithm/leetcode-%E6%B3%9B%E5%9E%8B%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-泛型递归"><a class="markdownIt-Anchor" href="#leetcode-泛型递归"></a> leetcode-泛型递归</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line">recursion(level,param1,param2)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params">level, param1, param2</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">  <span class="keyword">if</span>(level &gt; max_level)&#123;</span><br><span class="line">    process_result</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. process logic in current level 处理当前层逻辑</span></span><br><span class="line">  process(level,data)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. dirll down 进入下一层</span></span><br><span class="line">  recursion(level+<span class="number">1</span>,param1,param2)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-回溯</title>
      <link href="2020/12/24/Algorithm/leetcode-%E5%9B%9E%E6%BA%AF/"/>
      <url>2020/12/24/Algorithm/leetcode-%E5%9B%9E%E6%BA%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-回溯"><a class="markdownIt-Anchor" href="#leetcode-回溯"></a> leetcode-回溯</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-经典回溯通用模板"><a class="markdownIt-Anchor" href="#1-经典回溯通用模板"></a> 1. 经典回溯通用模板</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 经典回溯通用模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  dfs(data, <span class="number">0</span>, <span class="string">&quot;&quot;</span>) <span class="comment">// cur_state: &quot;&quot; / []</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">data, level, cur_state</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator</span></span><br><span class="line">    <span class="keyword">if</span> (level === data.length) &#123;</span><br><span class="line">      <span class="comment">// notice: every level should not affect each other.</span></span><br><span class="line">      res.push(cur_state) <span class="comment">// [].slice() </span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. process logic in current level</span></span><br><span class="line">    <span class="comment">// 2.1 no pick logic</span></span><br><span class="line">    <span class="comment">// 2.2 pick logic</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. drill down</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. reverse</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-二维"><a class="markdownIt-Anchor" href="#2-二维"></a> 2. 二维</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 二维 */</span></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">board, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] <span class="comment">// ↑→↓←</span></span><br><span class="line">  <span class="keyword">const</span> dy = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>] <span class="comment">// ↑→↓←</span></span><br><span class="line">  <span class="keyword">const</span> rows = board.length <span class="comment">// 行</span></span><br><span class="line">  <span class="keyword">const</span> cols = board[<span class="number">0</span>].length  <span class="comment">// 列</span></span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Array</span>(rows) <span class="comment">// 记录是否已访问</span></span><br><span class="line">    .fill(<span class="number">0</span>)</span><br><span class="line">    .map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(cols).fill(<span class="literal">false</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inArea</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; cols</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">      <span class="keyword">if</span> (dfs(board, target, <span class="number">0</span>, i, j))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">board, target, level, x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator</span></span><br><span class="line">    <span class="keyword">if</span> (level === target.length - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> board[x][y] === target[level]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. current login in current level</span></span><br><span class="line">    <span class="comment">// 2.1 not pick</span></span><br><span class="line">    <span class="keyword">if</span> (board[x][y] !== word[level]) </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 pick</span></span><br><span class="line">    visited[x][y] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> newX = x + dx[i]</span><br><span class="line">      <span class="keyword">const</span> newY = y + dy[i]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. drill down</span></span><br><span class="line">      <span class="keyword">if</span> (inArea(newX, newY) </span><br><span class="line">          &amp;&amp; !visited[newX][newY] </span><br><span class="line">          &amp;&amp; dfs(board, word, level + <span class="number">1</span>, newX, newY)</span><br><span class="line">         )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.reverse</span></span><br><span class="line">    visited[x][y] = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** floodfill */</span></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] <span class="comment">// ↑→↓←</span></span><br><span class="line">  <span class="keyword">const</span> dy = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>] <span class="comment">// ↑→↓←</span></span><br><span class="line">  <span class="keyword">const</span> rows = board.length <span class="comment">// 行</span></span><br><span class="line">  <span class="keyword">const</span> cols = board[<span class="number">0</span>].length  <span class="comment">// 列</span></span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Array</span>(rows) <span class="comment">// 记录是否已访问</span></span><br><span class="line">    .fill(<span class="number">0</span>)</span><br><span class="line">    .map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(cols).fill(<span class="literal">false</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inArea</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; cols</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">      <span class="keyword">if</span> (grid[i][j] === <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[i][j])&#123;</span><br><span class="line">        res++</span><br><span class="line">        dfs(grid,i,j)</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">grid, x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. process logic</span></span><br><span class="line">    visited[x][y] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> newX = x + dx[i]</span><br><span class="line">      <span class="keyword">const</span> newY = y + dy[i]</span><br><span class="line">      <span class="comment">// 2. terminator and drill down</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        inArea(newX, newY) </span><br><span class="line">        &amp;&amp; !visited[newX][newY] </span><br><span class="line">        &amp;&amp; grid[newX][newY] === <span class="string">&#x27;1&#x27;</span></span><br><span class="line">      )</span><br><span class="line">        dfs(grid, newX, newY)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="1-树形问题"><a class="markdownIt-Anchor" href="#1-树形问题"></a> (1) 树形问题</h3><h4 id="22-括号生成"><a class="markdownIt-Anchor" href="#22-括号生成"></a> <a href="https://leetcode-cn.com/problems/generate-parentheses/">22. 括号生成</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">  _gengerate(n,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_gengerate</span>(<span class="params">n,left,right,s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left === n &amp;&amp; right === n)&#123;</span><br><span class="line">      res.push(s)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(left &lt; n) _gengerate(n,left+<span class="number">1</span>,right,s+<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(right &lt; left) _gengerate(n,left,right+<span class="number">1</span>,s+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="17-电话号码的字母组合"><a class="markdownIt-Anchor" href="#17-电话号码的字母组合"></a> <a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letterCombinations = <span class="function"><span class="keyword">function</span> (<span class="params">digits</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">const</span> letters = [<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>]</span><br><span class="line">  <span class="keyword">if</span> (digits.length === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  dfs(digits, <span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">digits, index, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (digits.length === index) &#123;</span><br><span class="line">      res.push(cur)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> c = digits[index]</span><br><span class="line">    <span class="keyword">const</span> curLetters = letters[c.charCodeAt() - <span class="string">&#x27;0&#x27;</span>.charCodeAt()]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; curLetters.length; i++) &#123;</span><br><span class="line">      dfs(digits, index + <span class="number">1</span>, cur + curLetters[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-排列问题"><a class="markdownIt-Anchor" href="#2-排列问题"></a> (2) 排列问题</h3><h4 id="46-全排列"><a class="markdownIt-Anchor" href="#46-全排列"></a> <a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">const</span> used = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  dfs(nums, <span class="number">0</span>, [])</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">nums, index, p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === index) &#123;</span><br><span class="line">      res.push(p.slice())</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">        p.push(nums[i])</span><br><span class="line">        used[i] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        dfs(nums, index + <span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">        p.pop()</span><br><span class="line">        used[i] = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="47-全排列-ii"><a class="markdownIt-Anchor" href="#47-全排列-ii"></a> <a href="https://leetcode-cn.com/problems/permutations-ii/">47. 全排列 II</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> permuteUnique = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> used = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(<span class="literal">false</span>)</span><br><span class="line">  nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b) <span class="comment">// 先排序</span></span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  dfs(nums,<span class="number">0</span>,[])</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">nums,index,p</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index === nums.length)&#123;</span><br><span class="line">      res.push(p.slice())</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">      used[i] = <span class="literal">true</span></span><br><span class="line">      p.push(nums[i])</span><br><span class="line"></span><br><span class="line">      dfs(nums,index+<span class="number">1</span>,p)</span><br><span class="line"></span><br><span class="line">      used[i] = <span class="literal">false</span></span><br><span class="line">      p.pop(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-组合问题"><a class="markdownIt-Anchor" href="#3-组合问题"></a> (3) 组合问题</h3><h4 id="77-组合"><a class="markdownIt-Anchor" href="#77-组合"></a> <a href="https://leetcode-cn.com/problems/combinations/">77. 组合</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> combine = <span class="function"><span class="keyword">function</span>(<span class="params">n, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || k &lt;= <span class="number">0</span> || k &gt; n)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  dfs(n, k, <span class="number">1</span>, [])</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">n, k, start, p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.length === k) &#123;</span><br><span class="line">      res.push(p.slice())</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for (let i = start; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= n - (k - p.length) + <span class="number">1</span>; i++) &#123; <span class="comment">// // 优化</span></span><br><span class="line">      p.push(i)</span><br><span class="line">      dfs(n, k, i + <span class="number">1</span>, p)</span><br><span class="line">      p.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-子集问题"><a class="markdownIt-Anchor" href="#4-子集问题"></a> (4) 子集问题</h3><h4 id="78-子集"><a class="markdownIt-Anchor" href="#78-子集"></a> <a href="https://leetcode-cn.com/problems/subsets/">78. 子集</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">  dfs(<span class="number">0</span>,[])</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">index,list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index === nums.length)&#123;</span><br><span class="line">      res.push(list.slice())</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(index+<span class="number">1</span>,list) <span class="comment">// no pick</span></span><br><span class="line">    list.push(nums[index])</span><br><span class="line">    dfs(index+<span class="number">1</span>,list) <span class="comment">// pick</span></span><br><span class="line">    list.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [[]]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums)&#123;</span><br><span class="line">    <span class="keyword">let</span> len = res.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">      <span class="keyword">const</span> temp = [...res[j]]</span><br><span class="line">      temp.push(num)</span><br><span class="line">      res.push(temp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-二维问题"><a class="markdownIt-Anchor" href="#5-二维问题"></a> (5) 二维问题</h3><h4 id="79-单词搜索"><a class="markdownIt-Anchor" href="#79-单词搜索"></a> <a href="https://leetcode-cn.com/problems/word-search/">79. 单词搜索</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exist = <span class="function"><span class="keyword">function</span> (<span class="params">board, word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] <span class="comment">// ↑→↓←</span></span><br><span class="line">  <span class="keyword">const</span> dy = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>] <span class="comment">// ↑→↓←</span></span><br><span class="line">  <span class="keyword">const</span> rows = board.length</span><br><span class="line">  <span class="keyword">const</span> cols = board[<span class="number">0</span>].length</span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Array</span>(rows)</span><br><span class="line">    .fill(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(cols).fill(<span class="literal">false</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inArea</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; cols</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">      <span class="keyword">if</span> (searchWord(board, word, <span class="number">0</span>, i, j))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchWord</span>(<span class="params">board, word, index, x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word.length - <span class="number">1</span> === index) &#123;</span><br><span class="line">      <span class="keyword">return</span> board[x][y] === word[index]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (board[x][y] !== word[index])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    visited[x][y] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> newX = x + dx[i]</span><br><span class="line">      <span class="keyword">const</span> newY = y + dy[i]</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        inArea(newX, newY)</span><br><span class="line">        &amp;&amp; !visited[newX][newY]</span><br><span class="line">        &amp;&amp; searchWord(board, word, index + <span class="number">1</span>, newX, newY)</span><br><span class="line">      )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    visited[x][y] = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="200-岛屿数量"><a class="markdownIt-Anchor" href="#200-岛屿数量"></a> <a href="https://leetcode-cn.com/problems/number-of-islands/">200. 岛屿数量</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> dy = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> rows = grid.length</span><br><span class="line">  <span class="keyword">const</span> cols = grid[<span class="number">0</span>].length</span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Array</span>(rows)</span><br><span class="line">    .fill(<span class="number">0</span>)</span><br><span class="line">    .map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(cols).fill(<span class="literal">false</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inArea</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; cols</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">      <span class="keyword">if</span> (grid[i][j] === <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[i][j])&#123;</span><br><span class="line">        res++</span><br><span class="line">        dfs(grid, i, j)</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">grid, x, y</span>) </span>&#123;</span><br><span class="line">    visited[x][y] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> newX = x + dx[i]</span><br><span class="line">      <span class="keyword">const</span> newY = y + dy[i]</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        inArea(newX, newY)</span><br><span class="line">        &amp;&amp; !visited[newX][newY]</span><br><span class="line">        &amp;&amp; grid[newX][newY] === <span class="string">&#x27;1&#x27;</span></span><br><span class="line">      )</span><br><span class="line">        dfs(grid,newX,newY)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="51-n-皇后"><a class="markdownIt-Anchor" href="#51-n-皇后"></a> <a href="https://leetcode-cn.com/problems/n-queens/">51. N 皇后</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> solveNQueens = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录第i列是否已放置</span></span><br><span class="line">  <span class="keyword">const</span> cols = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 记录 / 对角线是否已放置(共2*n-1个对角线)  row+col=0,1,2...</span></span><br><span class="line">  <span class="keyword">const</span> pie = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span> * n - <span class="number">1</span>).fill(<span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 记录 \ 对角线是否已放置(共2*n-1个对角线)  row-col+n-1</span></span><br><span class="line">  <span class="keyword">const</span> na = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span> * n - <span class="number">1</span>).fill(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  dfs(n, <span class="number">0</span>, [])</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在n皇后问题中，尝试在index行摆放皇后</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">n, row, cur_res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row === n) &#123;</span><br><span class="line">      res.push(generateBoard(n, cur_res))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历列，尝试摆放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!cols[col] &amp;&amp; !pie[row + col] &amp;&amp; !na[row - col + n - <span class="number">1</span>]) &#123;</span><br><span class="line"></span><br><span class="line">        cur_res.push(col)</span><br><span class="line">        cols[col] = <span class="literal">true</span></span><br><span class="line">        pie[row + col] = <span class="literal">true</span></span><br><span class="line">        na[row - col + n - <span class="number">1</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        dfs(n, row + <span class="number">1</span>, cur_res)</span><br><span class="line"></span><br><span class="line">        cols[col] = <span class="literal">false</span></span><br><span class="line">        pie[row + col] = <span class="literal">false</span></span><br><span class="line">        na[row - col + n - <span class="number">1</span>] = <span class="literal">false</span></span><br><span class="line">        cur_res.pop()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印n皇后的一个解</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generateBoard</span> (<span class="params">n, rows</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> board = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="string">&#x27;.&#x27;</span>.repeat(n))</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> arr = board[i].split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      arr[rows[i]] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">      board[i] = arr.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> board</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  function generateBoard (n, rows) &#123;</span></span><br><span class="line"><span class="comment">    return new Array(n)</span></span><br><span class="line"><span class="comment">      .fill(&quot;&quot;)</span></span><br><span class="line"><span class="comment">      .map((_, index) =&gt; &#x27;.&#x27;.repeat(rows[index]) + &#x27;Q&#x27; + &#x27;.&#x27;.repeat(n - rows[index] - 1))</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="52-n皇后-ii"><a class="markdownIt-Anchor" href="#52-n皇后-ii"></a> <a href="https://leetcode-cn.com/problems/n-queens-ii/">52. N皇后 II</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> totalNQueens = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 记录第i列是否已放置</span></span><br><span class="line">  <span class="keyword">const</span> col = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 记录 / 对角线是否已放置</span></span><br><span class="line">  <span class="keyword">const</span> dia1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span> * n - <span class="number">1</span>).fill(<span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 记录 \ 对角线是否已放置</span></span><br><span class="line">  <span class="keyword">const</span> dia2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span> * n - <span class="number">1</span>).fill(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在n皇后问题中，尝试在index行摆放皇后</span></span><br><span class="line">  <span class="keyword">const</span> putQueue = <span class="function">(<span class="params">n, index, row</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === n) &#123;</span><br><span class="line">      res++</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历列，尝试摆放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!col[i] &amp;&amp; !dia1[index + i] &amp;&amp; !dia2[index - i + n - <span class="number">1</span>]) &#123;</span><br><span class="line">        row.push(i)</span><br><span class="line">        col[i] = <span class="literal">true</span></span><br><span class="line">        dia1[index + i] = <span class="literal">true</span></span><br><span class="line">        dia2[index - i + n - <span class="number">1</span>] = <span class="literal">true</span></span><br><span class="line">        putQueue(n, index + <span class="number">1</span>, row)</span><br><span class="line">        col[i] = <span class="literal">false</span></span><br><span class="line">        dia1[index + i] = <span class="literal">false</span></span><br><span class="line">        dia2[index - i + n - <span class="number">1</span>] = <span class="literal">false</span></span><br><span class="line">        row.pop()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  putQueue(n, <span class="number">0</span>, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>// TODO:</p><ul><li>[ ] 93</li><li>[ ] 131</li><li>[ ] 39</li><li>[ ] 40</li><li>[ ] 216</li><li>[ ] 90</li><li>[ ] 401</li><li>[ ] 130</li><li>[ ] 417</li><li>[ ] 37</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-DP</title>
      <link href="2020/12/24/Algorithm/leetcode-DP/"/>
      <url>2020/12/24/Algorithm/leetcode-DP/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-dp"><a class="markdownIt-Anchor" href="#leetcode-dp"></a> leetcode-DP</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><ol><li><p>递归</p></li><li><p>递归 -&gt; 记忆化搜索 （自上而下）</p></li><li><p>记忆化搜索 -&gt; DP （自下而上）</p></li></ol><ul><li>网格问题：求路径, 注意 i , j 边界问题</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  dp[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">  dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">    dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="509-斐波那契数"><a class="markdownIt-Anchor" href="#509-斐波那契数"></a> <a href="https://leetcode-cn.com/problems/fibonacci-number/">509. 斐波那契数</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归  O(2^n) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化搜索 O(n) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (memo[n] === -<span class="number">1</span>)</span><br><span class="line">    memo[n] = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> memo[n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP —— O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line">  memo[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  memo[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    memo[i] = memo[i - <span class="number">1</span>] + memo[i - <span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯"><a class="markdownIt-Anchor" href="#70-爬楼梯"></a> <a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _climb(n)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_climb</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一步1,2,3阶</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  memo[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  memo[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  memo[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    memo[i] = memo[i - <span class="number">1</span>] + memo[i - <span class="number">2</span>] + memo[i - <span class="number">3</span>]</span><br><span class="line">  <span class="keyword">return</span> memo[n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化搜索 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> _climb(n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_climb</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] === -<span class="number">1</span>)</span><br><span class="line">      memo[n] = _climb(n - <span class="number">2</span>) + _climb(n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line">  memo[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  memo[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    memo[i] = memo[i-<span class="number">1</span>] + memo[i-<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">return</span> memo[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="120-三角形最小路径和"><a class="markdownIt-Anchor" href="#120-三角形最小路径和"></a> <a href="https://leetcode-cn.com/problems/triangle/">120. 三角形最小路径和</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minimumTotal = <span class="function"><span class="keyword">function</span>(<span class="params">triangle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _minimumTotal(triangle,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_minimumTotal</span>(<span class="params">triangle,depth,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth === triangle.length) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> triangle[depth][index] + <span class="built_in">Math</span>.min(_minimumTotal(triangle,depth+<span class="number">1</span>,index),_minimumTotal(triangle,depth+<span class="number">1</span>,index+<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minimumTotal = <span class="function"><span class="keyword">function</span>(<span class="params">triangle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(triangle.length)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;memo.length;i++)</span><br><span class="line">    memo[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(triangle[i].length).fill(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _minimumTotal(triangle,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_minimumTotal</span>(<span class="params">triangle,depth,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth === triangle.length) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(memo[depth][index] === <span class="number">0</span>)</span><br><span class="line">      memo[depth][index] = triangle[depth][index] + <span class="built_in">Math</span>.min(_minimumTotal(triangle,depth+<span class="number">1</span>,index),_minimumTotal(triangle,depth+<span class="number">1</span>,index+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memo[depth][index]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minimumTotal = <span class="function"><span class="keyword">function</span> (<span class="params">triangle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = triangle.length;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt; memo.length;i++)</span><br><span class="line">    memo[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      memo[i][j] = <span class="built_in">Math</span>.min(memo[i + <span class="number">1</span>][j], memo[i + <span class="number">1</span>][j + <span class="number">1</span>]) + triangle[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP - 空间优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minimumTotal = <span class="function"><span class="keyword">function</span> (<span class="params">triangle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = triangle.length;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      memo[j] = <span class="built_in">Math</span>.min(memo[j], memo[j + <span class="number">1</span>]) + triangle[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="64-最小路径和"><a class="markdownIt-Anchor" href="#64-最小路径和"></a> <a href="https://leetcode-cn.com/problems/minimum-path-sum/">64. 最小路径和</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minPathSum = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(grid, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">grid, depth, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === grid.length || index === grid[<span class="number">0</span>].length) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> min</span><br><span class="line">    <span class="keyword">if</span> (depth + <span class="number">1</span> &gt;= grid.length)</span><br><span class="line">      min = dfs(grid, depth, index + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index + <span class="number">1</span> &gt;= grid[<span class="number">0</span>].length)</span><br><span class="line">      min = dfs(grid, depth + <span class="number">1</span>, index)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      min = <span class="built_in">Math</span>.min(dfs(grid, depth, index + <span class="number">1</span>), dfs(grid, depth + <span class="number">1</span>, index))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> grid[depth][index] + min</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minPathSum = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = grid.length</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; memo.length; i++)</span><br><span class="line">    memo[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(grid[<span class="number">0</span>].length).fill(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dfs(grid, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">grid, depth, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === grid.length || index === grid[<span class="number">0</span>].length) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> min</span><br><span class="line">    <span class="keyword">if</span> (depth + <span class="number">1</span> &gt;= grid.length)</span><br><span class="line">      min = dfs(grid, depth, index + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index + <span class="number">1</span> &gt;= grid[<span class="number">0</span>].length)</span><br><span class="line">      min = dfs(grid, depth + <span class="number">1</span>, index)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      min = <span class="built_in">Math</span>.min(dfs(grid, depth, index + <span class="number">1</span>), dfs(grid, depth + <span class="number">1</span>, index))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[depth][index] === <span class="number">0</span>)</span><br><span class="line">      memo[depth][index] = grid[depth][index] + min</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memo[depth][index]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minPathSum = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> width = grid[<span class="number">0</span>].length,height = grid.length</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;width;i++)</span><br><span class="line">    grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;height;i++)</span><br><span class="line">    grid[i][<span class="number">0</span>] += grid[i-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;height;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;width;j++)</span><br><span class="line">      grid[i][j] += <span class="built_in">Math</span>.min(grid[i-<span class="number">1</span>][j],grid[i][j-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> grid[height-<span class="number">1</span>][width-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="343-整数拆分"><a class="markdownIt-Anchor" href="#343-整数拆分"></a> <a href="https://leetcode-cn.com/problems/integer-break/">343. 整数拆分</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=n-<span class="number">1</span>;i++)</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res,i*(n-i),i * dfs(n-i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> dfs(n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(memo[n] !== -<span class="number">1</span>) <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=n-<span class="number">1</span>;i++)</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res,i*(n-i),i * dfs(n-i))</span><br><span class="line">    memo[n] = res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line">  memo[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;=i-<span class="number">1</span>;j++)</span><br><span class="line">      memo[i] = <span class="built_in">Math</span>.max(memo[i], j * (i- j), j * memo[i-j])</span><br><span class="line">  <span class="keyword">return</span> memo[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="279-完全平方数"><a class="markdownIt-Anchor" href="#279-完全平方数"></a> <a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numSquares = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i*i &lt;= n;i++)</span><br><span class="line">       count = <span class="built_in">Math</span>.min(count,dfs(n-i*i)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numSquares = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> dfs(n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(memo[n] !== -<span class="number">1</span>) <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i*i &lt;= n;i++)</span><br><span class="line">       count = <span class="built_in">Math</span>.min(count,dfs(n-i*i)+<span class="number">1</span>)</span><br><span class="line">    memo[n] = count</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numSquares = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  memo[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    memo[i] = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; i - j * j &gt;= <span class="number">0</span>; j++)</span><br><span class="line">      memo[i] = <span class="built_in">Math</span>.min(memo[i], memo[i - j * j] + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="91-解码方法"><a class="markdownIt-Anchor" href="#91-解码方法"></a> <a href="https://leetcode-cn.com/problems/decode-ways/">91. 解码方法</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numDecodings = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(s)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] !== <span class="string">&#x27;0&#x27;</span>) count += dfs(s.slice(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> (s.length &gt;= <span class="number">2</span> &amp;&amp; s[<span class="number">0</span>] === <span class="string">&#x27;1&#x27;</span> || (s[<span class="number">0</span>] === <span class="string">&#x27;2&#x27;</span> &amp;&amp; s[<span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; s[<span class="number">1</span>] &lt;= <span class="number">6</span>)) &#123;</span><br><span class="line">      count += dfs(s.slice(<span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numDecodings = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> dfs(s)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[s]) <span class="keyword">return</span> memo[s]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] !== <span class="string">&#x27;0&#x27;</span>) count += dfs(s.slice(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> (s.length &gt;= <span class="number">2</span> &amp;&amp; s[<span class="number">0</span>] === <span class="string">&#x27;1&#x27;</span> || (s[<span class="number">0</span>] === <span class="string">&#x27;2&#x27;</span> &amp;&amp; s[<span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; s[<span class="number">1</span>] &lt;= <span class="number">6</span>)) &#123;</span><br><span class="line">      count += dfs(s.slice(<span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    memo[s] = count</span><br><span class="line">    <span class="keyword">return</span> memo[s]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化，按顺序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numDecodings = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i === s.length) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[i]) <span class="keyword">return</span> memo[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (s[i] !== <span class="string">&#x27;0&#x27;</span>) count += dfs(i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (i &lt; s.length-<span class="number">1</span> &amp;&amp; s[i] === <span class="string">&#x27;1&#x27;</span> || (s[i] === <span class="string">&#x27;2&#x27;</span> &amp;&amp; s[i+<span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>] &lt;= <span class="number">6</span>)) &#123;</span><br><span class="line">      count += dfs(i+<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    memo[i] = count</span><br><span class="line">    <span class="keyword">return</span> memo[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numDecodings = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(s.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length+<span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  memo[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  memo[<span class="number">1</span>] = s[<span class="number">0</span>] === <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>;i&lt;=s.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i-<span class="number">1</span>] !== <span class="string">&quot;0&quot;</span>) </span><br><span class="line">      memo[i] += memo[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span>(s[i-<span class="number">2</span>] === <span class="string">&#x27;1&#x27;</span> || (s[i-<span class="number">2</span>] === <span class="string">&quot;2&quot;</span> &amp;&amp; s[i-<span class="number">1</span>] &gt;=<span class="number">0</span> &amp;&amp; s[i-<span class="number">1</span>] &lt;=<span class="number">6</span>)) </span><br><span class="line">      memo[i] += memo[i-<span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo[s.length]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="62-不同路径"><a class="markdownIt-Anchor" href="#62-不同路径"></a> <a href="https://leetcode-cn.com/problems/unique-paths/">62. 不同路径</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>,m,n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">i,j,m,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; m-<span class="number">1</span> || j &gt; n-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(i === m-<span class="number">1</span> &amp;&amp; j === n-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> dfs(i+<span class="number">1</span>,j,m,n) + dfs(i,j+<span class="number">1</span>,m,n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(m).fill(<span class="number">0</span>).map(<span class="function">()=&gt;</span><span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>,m,n)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">i,j,m,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; m-<span class="number">1</span> || j &gt; n-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(i === m-<span class="number">1</span> &amp;&amp; j === n-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(memo[i][j] === <span class="number">0</span>)</span><br><span class="line">      memo[i][j] = dfs(i+<span class="number">1</span>,j,m,n) + dfs(i,j+<span class="number">1</span>,m,n)</span><br><span class="line">    <span class="keyword">return</span> memo[i][j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(m).fill(<span class="number">0</span>).map(<span class="function">()=&gt;</span><span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    dp[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">      dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="63-不同路径-ii"><a class="markdownIt-Anchor" href="#63-不同路径-ii"></a> <a href="https://leetcode-cn.com/problems/unique-paths-ii/">63. 不同路径 II</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="function"><span class="keyword">function</span> (<span class="params">obstacleGrid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> height = obstacleGrid.length,</span><br><span class="line">    width = obstacleGrid[<span class="number">0</span>].length</span><br><span class="line">  <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>, obstacleGrid)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dp</span> (<span class="params">i, j, obstacleGrid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; height - <span class="number">1</span> || j &gt; width - <span class="number">1</span> || obstacleGrid[i][j] === <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (i === height - <span class="number">1</span> &amp;&amp; j === width - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> dp(i + <span class="number">1</span>, j, obstacleGrid) + dp(i, j + <span class="number">1</span>, obstacleGrid)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="function"><span class="keyword">function</span> (<span class="params">obstacleGrid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> height = obstacleGrid.length,</span><br><span class="line">    width = obstacleGrid[<span class="number">0</span>].length</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(height).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(width).fill(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>, obstacleGrid)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dp</span>(<span class="params">i, j, obstacleGrid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; height - <span class="number">1</span> || j &gt; width - <span class="number">1</span> || obstacleGrid[i][j] === <span class="number">1</span>) </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (i === (height - <span class="number">1</span>) &amp;&amp; j === (width - <span class="number">1</span>)) </span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(memo[i][j]) </span><br><span class="line">      <span class="keyword">return</span> memo[i][j]</span><br><span class="line"></span><br><span class="line">    memo[i][j] = dp(i + <span class="number">1</span>, j, obstacleGrid) + dp(i, j + <span class="number">1</span>, obstacleGrid)</span><br><span class="line">    <span class="keyword">return</span> memo[i][j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="function"><span class="keyword">function</span> (<span class="params">obstacleGrid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> height = obstacleGrid.length,</span><br><span class="line">    width = obstacleGrid[<span class="number">0</span>].length</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(height).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(width).fill(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;height &amp;&amp; obstacleGrid[i][<span class="number">0</span>] === <span class="number">0</span>;i++)</span><br><span class="line">    memo[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;width &amp;&amp; obstacleGrid[<span class="number">0</span>][i] === <span class="number">0</span>;i++)</span><br><span class="line">    memo[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;height;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;width;j++)</span><br><span class="line">      <span class="keyword">if</span>(obstacleGrid[i][j] === <span class="number">0</span>)</span><br><span class="line">        memo[i][j] = memo[i-<span class="number">1</span>][j] + memo[i][j-<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">return</span> memo[height-<span class="number">1</span>][width-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1143-最长公共子序列"><a class="markdownIt-Anchor" href="#1143-最长公共子序列"></a> <a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143. 最长公共子序列</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longestCommonSubsequence = <span class="function"><span class="keyword">function</span> (<span class="params">text1, text2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(text1.length).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(text2.length).fill(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">return</span> dfs(text1.length - <span class="number">1</span>, text2.length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i === -<span class="number">1</span> || j === -<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(memo[i][j]) <span class="keyword">return</span> memo[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (text1[i] === text2[j])</span><br><span class="line">      memo[i][j] = <span class="number">1</span> + dfs(i - <span class="number">1</span>, j - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      memo[i][j] = <span class="built_in">Math</span>.max(</span><br><span class="line">        dfs(i - <span class="number">1</span>, j),</span><br><span class="line">        dfs(i, j - <span class="number">1</span>),</span><br><span class="line">        dfs(i - <span class="number">1</span>, j - <span class="number">1</span>)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memo[i][j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longestCommonSubsequence = <span class="function"><span class="keyword">function</span>(<span class="params">text1, text2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!text1.length || !text2.length) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> m = text1.length</span><br><span class="line">  <span class="keyword">let</span> n = text2.length</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(m+<span class="number">1</span>).fill(<span class="number">0</span>).map(<span class="function">()=&gt;</span><span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;m+<span class="number">1</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(text1[i-<span class="number">1</span>] === text2[j-<span class="number">1</span>])</span><br><span class="line">        dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        dp[i][j] = <span class="built_in">Math</span>.max(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> dp[m][n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="198-打家劫舍"><a class="markdownIt-Anchor" href="#198-打家劫舍"></a> <a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> tryRob(nums, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tryRob</span>(<span class="params">nums, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.length)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; nums.length; i++)</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res, nums[i] + tryRob(nums, i + <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化搜索</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> tryRob(nums, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tryRob</span>(<span class="params">nums, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.length)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[index] !== -<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> memo[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; nums.length; i++)</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res, nums[i] + tryRob(nums, i + <span class="number">2</span>))</span><br><span class="line">    memo[index] = res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = nums.length</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(-<span class="number">1</span>)</span><br><span class="line">  memo[n - <span class="number">1</span>] = nums[n - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; n; j++)</span><br><span class="line">      memo[i] = <span class="built_in">Math</span>.max(memo[i], nums[j] + (j + <span class="number">2</span> &lt; n ? memo[j + <span class="number">2</span>] : <span class="number">0</span>))</span><br><span class="line">  <span class="keyword">return</span> memo[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="01背包"><a class="markdownIt-Anchor" href="#01背包"></a> 01背包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> knapsack01 = <span class="function">(<span class="params">w, v, C</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(w.length).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(C + <span class="number">1</span>).fill(-<span class="number">1</span>))</span><br><span class="line">  <span class="keyword">return</span> bestValue(w, v, <span class="number">1</span>, C)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bestValue</span> (<span class="params">w, v, index, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= w.length || c &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo[index][c] !== -<span class="number">1</span>) <span class="keyword">return</span> memo[index][c]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = bestValue(w, v, index + <span class="number">1</span>, c) <span class="comment">// no pick</span></span><br><span class="line">    <span class="keyword">if</span> (c &gt;= w[index])</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res, v[index] + bestValue(w, v, index + <span class="number">1</span>, c - w[index]))</span><br><span class="line">    memo[index][c] = res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> knapsack01 = <span class="function">(<span class="params">w, v, C</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="keyword">new</span> <span class="built_in">Array</span>(w.length).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(C + <span class="number">1</span>).fill(-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; w.length; i++)</span><br><span class="line">    memo[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= C; i++)</span><br><span class="line">    memo[<span class="number">0</span>][i] = i &gt;= w[<span class="number">0</span>] ? v[<span class="number">0</span>] : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; w.length; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">      memo[i][j] = memo[i - <span class="number">1</span>][j]</span><br><span class="line">      <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">        memo[i][j] = <span class="built_in">Math</span>.max(memo[i][j], v[i] + memo[i - <span class="number">1</span>][j - w[i]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> memo[w.length - <span class="number">1</span>][C]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-LinkedList</title>
      <link href="2020/12/24/Algorithm/leetcode-LinkedList/"/>
      <url>2020/12/24/Algorithm/leetcode-LinkedList/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-linkedlist"><a class="markdownIt-Anchor" href="#leetcode-linkedlist"></a> leetcode-LinkedList</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归从后往前处理"><a class="markdownIt-Anchor" href="#1-递归从后往前处理"></a> 1. 递归（从后往前处理）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> rec(root,<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rec</span>(<span class="params">cur,prev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="comment">// 1. terminator</span></span><br><span class="line">      <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. drill down</span></span><br><span class="line">    <span class="keyword">let</span> ret = dfs(cur.next,cur)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. process cur</span></span><br><span class="line">    cur.prev = prev</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. reverse</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-非递归从前往后处理"><a class="markdownIt-Anchor" href="#2-非递归从前往后处理"></a> 2. 非递归（从前往后处理）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="literal">null</span>, cur = root</span><br><span class="line">  <span class="keyword">while</span>(cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> next = cur.next</span><br><span class="line">    cur.next = prev</span><br><span class="line">    prev = cur</span><br><span class="line">    cur = next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-是否有环"><a class="markdownIt-Anchor" href="#3-是否有环"></a> 3. 是否有环</h3><ul><li>哈希</li><li>快慢指针</li></ul><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="237-删除链表中的节点"><a class="markdownIt-Anchor" href="#237-删除链表中的节点"></a> <a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">237. 删除链表中的节点</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    node.val = node.next.val</span><br><span class="line">    node.next = node.next.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="206-反转链表"><a class="markdownIt-Anchor" href="#206-反转链表"></a> <a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a>/<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(head,<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">cur,prev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur === <span class="literal">null</span>) <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ret = dfs(cur.next, cur)</span><br><span class="line">    cur.next = prev</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cur = head, prev = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">while</span>(cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> next = cur.next</span><br><span class="line">    cur.next = prev</span><br><span class="line">    prev = cur</span><br><span class="line">    cur = next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="203-移除链表元素"><a class="markdownIt-Anchor" href="#203-移除链表元素"></a> <a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="function"><span class="keyword">function</span> (<span class="params">head, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  head.next = removeElements(head.next,val)</span><br><span class="line">  <span class="keyword">return</span> head.val === val ? head.next : head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不带虚拟头节点先序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="function"><span class="keyword">function</span> (<span class="params">head, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (head !== <span class="literal">null</span> &amp;&amp; head.val === val) &#123;</span><br><span class="line">    <span class="keyword">const</span> delNode = head</span><br><span class="line">    head = head.next</span><br><span class="line">    delNode.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prev = head</span><br><span class="line">  <span class="keyword">while</span> (prev.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prev.next.val === val) &#123;</span><br><span class="line">      <span class="keyword">const</span> delNode = prev.next</span><br><span class="line">      prev.next = delNode.next</span><br><span class="line">      delNode.next = <span class="literal">null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      prev = prev.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带虚拟头节点先序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="function"><span class="keyword">function</span> (<span class="params">head, val</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>)</span><br><span class="line">  dummyHead.next = head</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prev = dummyHead</span><br><span class="line">  <span class="keyword">while</span> (prev.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prev.next.val === val) &#123;</span><br><span class="line">      prev.next = prev.next.next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      prev = prev.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dummyHead.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="21-合并两个有序链表"><a class="markdownIt-Anchor" href="#21-合并两个有序链表"></a> <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 归并</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> ListNode()</span><br><span class="line">  <span class="keyword">let</span> prev = dummyHead</span><br><span class="line">  <span class="keyword">let</span> i = l1</span><br><span class="line">  <span class="keyword">let</span> j = l2</span><br><span class="line">  <span class="keyword">while</span> (i &amp;&amp; j) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i.val &lt;= j.val) &#123;</span><br><span class="line">      prev.next = i</span><br><span class="line">      i = i.next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      prev.next = j</span><br><span class="line">      j = j.next</span><br><span class="line">    &#125;</span><br><span class="line">    prev = prev.next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i) &#123; prev.next = i &#125;</span><br><span class="line">  <span class="keyword">if</span> (j) &#123; prev.next = j &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dummyHead.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="24-两两交换链表中的节点"><a class="markdownIt-Anchor" href="#24-两两交换链表中的节点"></a> <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>) </span><br><span class="line">      <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> nextNode = head.next</span><br><span class="line">    head.next = swapPairs(nextNode.next)</span><br><span class="line">    nextNode.next = head</span><br><span class="line">    <span class="keyword">return</span> nextNode</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dummyHead = <span class="keyword">new</span> ListNode()</span><br><span class="line">    dummyHead.next = head</span><br><span class="line">    <span class="keyword">let</span> prev = dummyHead</span><br><span class="line">    <span class="keyword">while</span>(prev.next !== <span class="literal">null</span> &amp;&amp; prev.next.next !== <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> start = prev.next</span><br><span class="line">      <span class="keyword">let</span> end = prev.next.next</span><br><span class="line">      prev.next = end</span><br><span class="line">      start.next = end.next</span><br><span class="line">      end.next = start</span><br><span class="line">      prev = start</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="141-环形链表"><a class="markdownIt-Anchor" href="#141-环形链表"></a> <a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快慢指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> slow = head</span><br><span class="line">  <span class="keyword">let</span> fast = head.next</span><br><span class="line">  <span class="keyword">while</span>(slow !== fast)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fast === <span class="literal">null</span> || fast.next === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    slow = slow.next</span><br><span class="line">    fast = fast.next.next</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哈希</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  <span class="keyword">while</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(set.has(head))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    set.add(head)</span><br><span class="line">    head = head.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第n个节点"><a class="markdownIt-Anchor" href="#19-删除链表的倒数第n个节点"></a> <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第N个节点</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">    dummyHead.next = head</span><br><span class="line">    <span class="keyword">let</span> p = dummyHead</span><br><span class="line">    <span class="keyword">let</span> q = dummyHead</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;=n;i++) </span><br><span class="line">      q = q.next</span><br><span class="line">    <span class="keyword">while</span>(q !== <span class="literal">null</span>)&#123;</span><br><span class="line">      q = q.next</span><br><span class="line">      p = p.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> delNode = p.next</span><br><span class="line">    p.next = delNode.next</span><br><span class="line">    delNode.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> dummyHead.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-两数相加"><a class="markdownIt-Anchor" href="#2-两数相加"></a> <a href="https://leetcode-cn.com/problems/add-two-numbers/">2. 两数相加</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> p1 = l1,</span><br><span class="line">        p2 = l2,</span><br><span class="line">        p3 = dummyHead,</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1 || p2)&#123;</span><br><span class="line">      <span class="keyword">const</span> val1 = p1 ? p1.val : <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> val2 = p2 ? p2.val : <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> val = val1 + val2 + carry</span><br><span class="line">      p3.next = <span class="keyword">new</span> ListNode(val % <span class="number">10</span>)</span><br><span class="line">      </span><br><span class="line">      carry = ~~(val / <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">if</span>(p1) p1 = p1.next</span><br><span class="line">      <span class="keyword">if</span>(p2) p2 = p2.next</span><br><span class="line">      p3 = p3.next</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(carry) p3.next = <span class="keyword">new</span> ListNode(carry)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummyHead.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="83-删除排序链表中的重复元素"><a class="markdownIt-Anchor" href="#83-删除排序链表中的重复元素"></a> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = head</span><br><span class="line">  <span class="keyword">while</span>(p &amp;&amp; p.next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.val === p.next.val)&#123;</span><br><span class="line">      p.next = p.next.next</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      p = p.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-Sort</title>
      <link href="2020/12/24/Algorithm/leetcode-Sort/"/>
      <url>2020/12/24/Algorithm/leetcode-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-sort"><a class="markdownIt-Anchor" href="#leetcode-sort"></a> leetcode-Sort</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-三路快排"><a class="markdownIt-Anchor" href="#1-三路快排"></a> 1. 三路快排</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pivot = arr[low]</span><br><span class="line"><span class="keyword">let</span> lt = low  <span class="comment">// [low+1...lt] &lt; pivot </span></span><br><span class="line"><span class="keyword">let</span> gt = high <span class="comment">// [gt ... high] &gt; pivot</span></span><br><span class="line"><span class="keyword">let</span> i = low + <span class="number">1</span> <span class="comment">// [lt+1 ... gt-1] = pivot</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; gt)&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i] === pivot)</span><br><span class="line">    i++</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &lt; pivot)&#123;</span><br><span class="line">    lt++</span><br><span class="line">    swap(arr,i,lt)</span><br><span class="line">    i++</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt; pivot)&#123;</span><br><span class="line">    gt--</span><br><span class="line">    swap(arr,i,gt)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-归并"><a class="markdownIt-Anchor" href="#2-归并"></a> 2. 归并</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nums1, m</span></span><br><span class="line"><span class="comment"> * nums2, n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>,j = <span class="number">0</span>, k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)</span><br><span class="line">  arr[k++] = nums1[i] &lt;= nums2[j] ? nums1[i++] : nums2[j++]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; m)</span><br><span class="line">  arr[k++] = nums1[i++]</span><br><span class="line"><span class="keyword">while</span>(j &lt; m)</span><br><span class="line">  arr[k++] = nums2[j++]</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="1-快排"><a class="markdownIt-Anchor" href="#1-快排"></a> (1) 快排</h3><h4 id="75-颜色分类"><a class="markdownIt-Anchor" href="#75-颜色分类"></a> <a href="https://leetcode-cn.com/problems/sort-colors/">75. 颜色分类</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortColors = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">    count[nums[i]]++</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count.length; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; count[i]; j++)</span><br><span class="line">      nums[index++] = i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortColors = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> zero = -<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> two = nums.length</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt; two)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] === <span class="number">1</span>)&#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] === <span class="number">2</span>)&#123;</span><br><span class="line">      two--</span><br><span class="line">      swap(nums,i,two)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] === <span class="number">0</span>)&#123;</span><br><span class="line">      zero++</span><br><span class="line">      swap(nums,i,zero)</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="215-数组中的第k个最大元素"><a class="markdownIt-Anchor" href="#215-数组中的第k个最大元素"></a> <a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快排 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="function"><span class="keyword">function</span> (<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">nums, low, high</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = _partition(nums, low, high)</span><br><span class="line">    <span class="keyword">if</span> (p === nums.length - k)</span><br><span class="line">      <span class="keyword">return</span> nums[p]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p &lt; nums.length - k)</span><br><span class="line">      <span class="keyword">return</span> quickSort(nums, p + <span class="number">1</span>, high)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> quickSort(nums, low, p - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_partition</span>(<span class="params">nums,low,high</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = nums[low]</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">      <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] &gt;= pivot) high--</span><br><span class="line">      nums[low] = nums[high]</span><br><span class="line">      <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] &lt; pivot) low++</span><br><span class="line">      nums[high] = nums[low]</span><br><span class="line">    &#125;</span><br><span class="line">    nums[low] = pivot</span><br><span class="line">    <span class="keyword">return</span> low</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-归并-2"><a class="markdownIt-Anchor" href="#2-归并-2"></a> (2) 归并</h3><h4 id="88-合并两个有序数组"><a class="markdownIt-Anchor" href="#88-合并两个有序数组"></a> <a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nums1_copy = [].concat(nums1)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>,j = <span class="number">0</span>,k = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;m &amp;&amp; j &lt; n)</span><br><span class="line">    nums1[k++] = nums1_copy[i] &lt; nums2[j] ? nums1_copy[i++]:nums2[j++]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i&lt;m)</span><br><span class="line">    nums1[k++] = nums1_copy[i++]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(j&lt;n)</span><br><span class="line">    nums1[k++] = nums2[j++]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-Array</title>
      <link href="2020/12/24/Algorithm/leetcode-Array/"/>
      <url>2020/12/24/Algorithm/leetcode-Array/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-array"><a class="markdownIt-Anchor" href="#leetcode-array"></a> leetcode-Array</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-移动删除双指针"><a class="markdownIt-Anchor" href="#1-移动删除双指针"></a> 1. 移动/删除(双指针)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意 len，i 的取值</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> len = <span class="number">0</span> <span class="comment">// 指向下一个需要被覆盖的位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.length;i++)</span><br><span class="line">  <span class="keyword">if</span>(nums[i] !== <span class="number">0</span>)</span><br><span class="line">    nums[len++] = nums[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> len = <span class="number">0</span> <span class="comment">// 指向下一个需要被覆盖的位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.length;i++)</span><br><span class="line">  <span class="keyword">if</span>(nums[i] !== <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(i !== len)&#123;</span><br><span class="line">      swap(nums,i,len)</span><br><span class="line">len++</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">      len++</span><br></pre></td></tr></table></figure><h3 id="2-搜索对撞指针二分"><a class="markdownIt-Anchor" href="#2-搜索对撞指针二分"></a> 2. 搜索（对撞指针/二分）</h3><ul><li>二分查找</li><li>对撞指针</li></ul><h3 id="3-反转回文串对撞指针"><a class="markdownIt-Anchor" href="#3-反转回文串对撞指针"></a> 3. 反转/回文串（对撞指针）</h3><ul><li>对撞指针</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> l = <span class="number">0</span>, r = nums.length-<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(l &lt; r)&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="4-子数组子串滑动窗口"><a class="markdownIt-Anchor" href="#4-子数组子串滑动窗口"></a> 4. 子数组/子串（滑动窗口）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复的字符，用freq = [] 记录频数</span></span><br><span class="line"><span class="comment">// [l ... r]窗口</span></span><br><span class="line"> <span class="keyword">let</span> l = <span class="number">0</span>, r = -<span class="number">1</span></span><br><span class="line"> <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> (l &lt; nums.length) &#123;</span><br><span class="line">   <span class="keyword">if</span> ( r + <span class="number">1</span> &lt; nums.length &amp;&amp; sum &lt; s) &#123;</span><br><span class="line">     ++ r</span><br><span class="line">     sum += nums[r]</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     sum -= nums[l]</span><br><span class="line">     l++</span><br><span class="line">   &#125; </span><br><span class="line"> <span class="comment">// 获得一个窗口后，处理 [l ... r] 窗口</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="1-移动删除双指针-2"><a class="markdownIt-Anchor" href="#1-移动删除双指针-2"></a> (1) 移动/删除(双指针)</h3><h4 id="283-移动零"><a class="markdownIt-Anchor" href="#283-移动零"></a> <a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] !== <span class="number">0</span>)</span><br><span class="line">      arr.push(nums[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length;i++)</span><br><span class="line">    nums[i] = arr[i]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = arr.length;i &lt; nums.length;i++)</span><br><span class="line">    nums[i] = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] !== <span class="number">0</span>)</span><br><span class="line">      nums[k++] = nums[i]</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = k;i &lt; nums.length;i++)</span><br><span class="line">    nums[i] = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">    <span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (len !== i) &#123;</span><br><span class="line">        swap(nums, i, len)</span><br><span class="line">        len++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        len++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="27-移除元素"><a class="markdownIt-Anchor" href="#27-移除元素"></a> <a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums)</span><br><span class="line">    <span class="keyword">if</span>(num !== val)</span><br><span class="line">      nums[len++] = num</span><br><span class="line">  <span class="keyword">return</span> len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="26-删除排序数组中的重复项"><a class="markdownIt-Anchor" href="#26-删除排序数组中的重复项"></a> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. 删除排序数组中的重复项</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums)</span><br><span class="line">    <span class="keyword">if</span>(num !== nums[len])</span><br><span class="line">      nums[++len] = num</span><br><span class="line">  <span class="keyword">return</span> len + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="80-删除排序数组中的重复项-ii"><a class="markdownIt-Anchor" href="#80-删除排序数组中的重复项-ii"></a> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/">80. 删除排序数组中的重复项 II</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(nums.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> nums.length</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">2</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++)</span><br><span class="line">    <span class="keyword">if</span> (nums[i] != nums[len - <span class="number">2</span>])</span><br><span class="line">      nums[len++] = nums[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> len</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-双指针对撞指针"><a class="markdownIt-Anchor" href="#2-双指针对撞指针"></a> (2) 双指针(对撞指针)</h3><h4 id="167-两数之和-ii-输入有序数组"><a class="markdownIt-Anchor" href="#167-两数之和-ii-输入有序数组"></a> <a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;numbers.length-<span class="number">1</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>;j&lt;numbers.length;j++)</span><br><span class="line">      <span class="keyword">if</span>(numbers[i] + numbers[j] === target)</span><br><span class="line">        <span class="keyword">return</span> [i+<span class="number">1</span>,j+<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分 O(nlogn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; numbers.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> t = target - numbers[i]</span><br><span class="line">    <span class="keyword">let</span> l = i+<span class="number">1</span>, r = numbers.length-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">      <span class="keyword">let</span> mid = l + ((r-l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span>(numbers[mid] === t)</span><br><span class="line">        <span class="keyword">return</span> [i + <span class="number">1</span>, mid + <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &lt; t)</span><br><span class="line">        l = mid+<span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        r = mid-<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对撞指针 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>,r = numbers.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers[l] + numbers[r] === target)</span><br><span class="line">      <span class="keyword">return</span> [l+<span class="number">1</span>,r+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(numbers[l] + numbers[r] &lt; target)</span><br><span class="line">      l++</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      r--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="15-三数之和"><a class="markdownIt-Anchor" href="#15-三数之和"></a> <a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序+对撞指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> l = i + <span class="number">1</span>, r = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = nums[l] + nums[r] + nums[i]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (result === <span class="number">0</span>) &#123;</span><br><span class="line">        res.push([nums[i], nums[l], nums[r]])</span><br><span class="line">        l++</span><br><span class="line">        r--</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[l] === nums[l-<span class="number">1</span>]) l++</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[r] === nums[r+<span class="number">1</span>]) r--</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line">        l++</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        r--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="125-验证回文串"><a class="markdownIt-Anchor" href="#125-验证回文串"></a> <a href="https://leetcode-cn.com/problems/valid-palindrome/">125. 验证回文串</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对撞指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/[\W|_]/g</span>, <span class="string">&quot;&quot;</span>).toLowerCase()</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>, r = s.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s[l] !== s[r]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    l++</span><br><span class="line">    r--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对撞指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>, r = s.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\W|_/</span>.test(s[l]) &amp;&amp; ++l) <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\W|_/</span>.test(s[r]) &amp;&amp; r--) <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> (s[l].toLowerCase() !== s[r].toLowerCase()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    l++</span><br><span class="line">    r--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="344-反转字符串"><a class="markdownIt-Anchor" href="#344-反转字符串"></a> <a href="https://leetcode-cn.com/problems/reverse-string/">344. 反转字符串</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>,r = s.length-<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">    <span class="keyword">const</span> temp = s[l]</span><br><span class="line">    s[l] = s[r]</span><br><span class="line">    s[r] = temp </span><br><span class="line">    l++</span><br><span class="line">    r--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="345-反转字符串中的元音字母"><a class="markdownIt-Anchor" href="#345-反转字符串中的元音字母"></a> <a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/">345. 反转字符串中的元音字母</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseVowels = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> w = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>]</span><br><span class="line">  <span class="keyword">let</span> arr = s.split(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = arr.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!w.includes(arr[i].toLowerCase()) &amp;&amp; ++i) <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> (!w.includes(arr[j].toLowerCase()) &amp;&amp; j--) <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== arr[j]) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">      arr[i] = arr[j]</span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">    j--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="11-盛最多水的容器"><a class="markdownIt-Anchor" href="#11-盛最多水的容器"></a> <a href="https://leetcode-cn.com/problems/container-with-most-water/">11. 盛最多水的容器</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = height.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    max = height[i] &lt; height[j] </span><br><span class="line">    ? <span class="built_in">Math</span>.max(max,(j-i)*height[i++])</span><br><span class="line">    : <span class="built_in">Math</span>.max(max,(j-i)*height[j--])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-子数组子串滑动窗口"><a class="markdownIt-Anchor" href="#3-子数组子串滑动窗口"></a> (3) 子数组/子串（滑动窗口）</h3><h4 id="209-长度最小的子数组"><a class="markdownIt-Anchor" href="#209-长度最小的子数组"></a> <a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="function"><span class="keyword">function</span> (<span class="params">s, nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>, r = -<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> res = nums.length + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (l &lt; nums.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( r+<span class="number">1</span> &lt; nums.length &amp;&amp; sum &lt; s) &#123;</span><br><span class="line">      ++ r</span><br><span class="line">      sum += nums[r]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sum -= nums[l]</span><br><span class="line">      l++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sum &gt;= s)</span><br><span class="line">      res = <span class="built_in">Math</span>.min(res,r-l+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(res === nums.length+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="function"><span class="keyword">function</span> (<span class="params">s, nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> r = <span class="number">0</span>;r &lt; nums.length;r++)&#123;</span><br><span class="line">    sum += nums[r]</span><br><span class="line">    <span class="keyword">while</span>(sum &gt;= s)&#123;</span><br><span class="line">      len = len === <span class="number">0</span> ? r-l+<span class="number">1</span> : <span class="built_in">Math</span>.min(len,r-l+<span class="number">1</span>)</span><br><span class="line">      sum-=nums[l++]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-无重复字符的最长子串"><a class="markdownIt-Anchor" href="#3-无重复字符的最长子串"></a> <a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> s.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> freq = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">256</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>,r=-<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(l &lt; s.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>( r+<span class="number">1</span> &lt; s.length &amp;&amp; freq[s[r+<span class="number">1</span>].charCodeAt()]===<span class="number">0</span>)&#123;</span><br><span class="line">      r++</span><br><span class="line">      freq[s[r].charCodeAt()]++</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      freq[s[l].charCodeAt()]--</span><br><span class="line">      l++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">Math</span>.max(res,r-l+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>,</span><br><span class="line">    res = <span class="number">0</span>,</span><br><span class="line">    map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; s.length; r++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(s[r]) &amp;&amp; map.get(s[r]) &gt;= l) &#123;</span><br><span class="line">      l = map.get(s[r]) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res = <span class="built_in">Math</span>.max(res, r - l + <span class="number">1</span>)</span><br><span class="line">    map.set(s[r], r)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="438-找到字符串中所有字母异位词"><a class="markdownIt-Anchor" href="#438-找到字符串中所有字母异位词"></a> <a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findAnagrams = <span class="function"><span class="keyword">function</span> (<span class="params">s, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.length &lt; p.length) <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">let</span> freq_s = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> freq_p = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>, r = -<span class="number">1</span>, res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">    freq_p[p[i].charCodeAt() - <span class="number">97</span>]++;</span><br><span class="line">    freq_s[s[++r].charCodeAt() - <span class="number">97</span>]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isAnagrams(freq_s, freq_p))</span><br><span class="line">    res.push(l);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (r &lt; s.length - <span class="number">1</span>) &#123;</span><br><span class="line">    freq_s[s[++r].charCodeAt() - <span class="number">97</span>]++;</span><br><span class="line">    freq_s[s[l++].charCodeAt() - <span class="number">97</span>]--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isAnagrams(freq_s, freq_p))</span><br><span class="line">      res.push(l);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isAnagrams</span>(<span class="params">arr_s, arr_p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr_p.length; i++)</span><br><span class="line">      <span class="keyword">if</span> (arr_s[i] !== arr_p[i]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-层序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-层序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-层序遍历"></a> leetcode-二叉树-层序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用层序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 层序遍历1 一个一个处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> queue = [[root, <span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123; <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="comment">// 2. process logic in current shift node 处理当前出队元素的逻辑 </span></span><br><span class="line">    <span class="keyword">const</span> [cur, depth] = queue.shift()</span><br><span class="line">    <span class="keyword">if</span> (!res[depth]) res[depth] = []</span><br><span class="line">    <span class="keyword">else</span> res[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. push</span></span><br><span class="line">    <span class="keyword">if</span> (node.left) queue.push(node.left)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. push</span></span><br><span class="line">    <span class="keyword">if</span> (node.right) queue.push(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current status if needed</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 层序遍历2 一层一层处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> queue = [[root, <span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123; <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">let</span> len = queue.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// 2. process logic in current shift node 处理当前出队元素的逻辑 </span></span><br><span class="line">      <span class="keyword">const</span> [cur, depth] = queue.shift()</span><br><span class="line">      <span class="keyword">if</span> (!res[depth]) res[depth] = []</span><br><span class="line">      <span class="keyword">else</span> res[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. push</span></span><br><span class="line">      <span class="keyword">if</span> (node.left) queue.push(node.left)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. push</span></span><br><span class="line">      <span class="keyword">if</span> (node.right) queue.push(node.right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current status if needed</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="102-二叉树的层序遍历"><a class="markdownIt-Anchor" href="#102-二叉树的层序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> q = [[root,<span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span>(q.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> [cur,depth] = q.shift()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!ret[depth])  ret[depth] = [cur.val]</span><br><span class="line">    <span class="keyword">else</span>  ret[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cur.left)  q.push([cur.left,depth+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span>(cur.right)  q.push([cur.right,depth+<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs2 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> q = [root]</span><br><span class="line">  <span class="keyword">while</span> (q.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = q.length</span><br><span class="line">    ret.push([])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> cur = q.shift()</span><br><span class="line">      ret[ret.length-<span class="number">1</span>].push(cur.val)</span><br><span class="line">      <span class="keyword">if</span> (cur.left) q.push(cur.left)</span><br><span class="line">      <span class="keyword">if</span> (cur.right) q.push(cur.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dfs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  dfs(root,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root,depth</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret[depth])</span><br><span class="line">      ret[depth].push(root.val)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ret[depth] = [root.val]</span><br><span class="line">    dfs(root.left,depth+<span class="number">1</span>)</span><br><span class="line">    dfs(root.right,depth+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="429-n-叉树的层序遍历"><a class="markdownIt-Anchor" href="#429-n-叉树的层序遍历"></a> <a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429. N 叉树的层序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> queue = [[root, <span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> [cur, depth] = queue.shift()</span><br><span class="line">    <span class="keyword">if</span> (!ret[depth]) ret[depth] = [cur.val]</span><br><span class="line">    <span class="keyword">else</span> ret[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cur.children.length; i++)</span><br><span class="line">      queue.push([cur.children[i], depth + <span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> queue = [root]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = queue.length</span><br><span class="line">    ret.push([])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> cur = queue.shift()</span><br><span class="line">      ret[ret.length-<span class="number">1</span>].push(cur.val)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;cur.children.length;i++)</span><br><span class="line">        queue.push(cur.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树层序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-后序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-后序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-后序遍历"></a> leetcode-二叉树-后序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用后序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  dfs(root)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">node, param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// process result</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. drill down 进入下一层</span></span><br><span class="line">    dfs(node.left, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. drill down 进入下一层</span></span><br><span class="line">    dfs(node.right, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. process logic in current level 处理当前层逻辑</span></span><br><span class="line">    res.push(node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="145-二叉树的后序遍历"><a class="markdownIt-Anchor" href="#145-二叉树的后序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  postOrder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postOrder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span></span><br><span class="line">    postOrder(node.left)</span><br><span class="line">    postOrder(node.right)</span><br><span class="line">    ret.push(node.val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——2个栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> s1 = [root]</span><br><span class="line">  <span class="keyword">const</span> s2 = []</span><br><span class="line">  <span class="keyword">while</span>(s1.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = s1.pop()</span><br><span class="line">    s2.push(cur)</span><br><span class="line">    <span class="keyword">if</span>(cur.left) s1.push(cur.left)</span><br><span class="line">    <span class="keyword">if</span>(cur.right) s1.push(cur.right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(s2.length)</span><br><span class="line">    ret.push(s2.pop().val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——1个栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> s1 = [root]</span><br><span class="line">  <span class="keyword">let</span> h = root,</span><br><span class="line">      cur</span><br><span class="line">  <span class="keyword">while</span>(s1.length)&#123;</span><br><span class="line">    cur = s1[s1.length-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span>(cur.left &amp;&amp; h !== cur.left &amp;&amp; h !== cur.right)</span><br><span class="line">      s1.push(cur.left)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( cur.right &amp;&amp; h !== cur.right)</span><br><span class="line">      s1.push(cur.right)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      ret.push(s1.pop().val)</span><br><span class="line">      h = cur</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——模拟系统栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">s, node</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = s</span><br><span class="line">    <span class="built_in">this</span>.node = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,root))</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> command = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(command.s === <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">      res.push(command.node.val)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;print&quot;</span>,command.node))</span><br><span class="line">      <span class="keyword">if</span>(command.node.right)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.right))</span><br><span class="line">      <span class="keyword">if</span>(command.node.left)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.left))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="590-n叉树的后序遍历"><a class="markdownIt-Anchor" href="#590-n叉树的后序遍历"></a> <a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590. N叉树的后序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  _postorder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_postorder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">      _postorder(node.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    ret.push(node.val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">let</span> stack1 = [root]</span><br><span class="line">  <span class="keyword">let</span> stack2 = []</span><br><span class="line">  <span class="keyword">while</span>(stack1.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = stack1.pop()</span><br><span class="line">    stack2.push(cur)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cur.children.length; i++) &#123;</span><br><span class="line">      stack1.push(cur.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(stack2.length)</span><br><span class="line">    ret.push(stack2.pop().val)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="104-二叉树的最大深度"><a class="markdownIt-Anchor" href="#104-二叉树的最大深度"></a> <a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftMaxDepth = maxDepth(root.left)</span><br><span class="line">  <span class="keyword">let</span> rightMaxDepth = maxDepth(root.right)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftMaxDepth, rightMaxDepth) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="111-二叉树的最小深度"><a class="markdownIt-Anchor" href="#111-二叉树的最小深度"></a> <a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line">  <span class="keyword">if</span> (root.left) res = <span class="built_in">Math</span>.min(minDepth(root.left), res)</span><br><span class="line">  <span class="keyword">if</span> (root.right) res = <span class="built_in">Math</span>.min(minDepth(root.right), res)</span><br><span class="line">  <span class="keyword">return</span> res + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="559-n-叉树的最大深度"><a class="markdownIt-Anchor" href="#559-n-叉树的最大深度"></a> <a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(root.children.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;root.children.length;i++)</span><br><span class="line">      max = <span class="built_in">Math</span>.max(max,maxDepth(root.children[i]))</span><br><span class="line">    <span class="keyword">return</span> max+<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="226-翻转二叉树"><a class="markdownIt-Anchor" href="#226-翻转二叉树"></a> <a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> left = invertTree(root.left)</span><br><span class="line">  <span class="keyword">let</span> right = invertTree(root.right)</span><br><span class="line">  root.left = right</span><br><span class="line">  root.right = left</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="100-相同的树"><a class="markdownIt-Anchor" href="#100-相同的树"></a> <a href="https://leetcode-cn.com/problems/same-tree/">100. 相同的树</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p === <span class="literal">null</span> || q === <span class="literal">null</span> || p.val !== q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span>(p === <span class="literal">null</span> || q === <span class="literal">null</span> || p.val !== q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> q1=  [p]</span><br><span class="line">    <span class="keyword">const</span> q2 = [q]</span><br><span class="line">    <span class="keyword">while</span>(q1.length &amp;&amp; q2.length)&#123;</span><br><span class="line">      <span class="keyword">const</span> cur1 = q1.shift()</span><br><span class="line">      <span class="keyword">const</span> cur2 = q2.shift()</span><br><span class="line">      <span class="keyword">if</span>(cur1.val !== cur2.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cur1.left === <span class="literal">null</span> &amp;&amp; cur2.left === <span class="literal">null</span>)&#123;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!cur1.left || !cur2.left) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        q1.push(cur1.left)</span><br><span class="line">        q2.push(cur2.left)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cur1.right === <span class="literal">null</span> &amp;&amp; cur2.right === <span class="literal">null</span>)&#123;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!cur1.right || !cur2.right) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        q1.push(cur1.right)</span><br><span class="line">        q2.push(cur2.right)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树后序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-中序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-中序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-中序遍历"></a> leetcode-二叉树-中序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用中序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  dfs(root)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">node, param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// process result</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. drill down 进入下一层</span></span><br><span class="line">    dfs(node.left, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. process logic in current level 处理当前层逻辑</span></span><br><span class="line">    res.push(node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. drill down 进入下一层</span></span><br><span class="line">    dfs(node.right, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="94-二叉树的中序遍历"><a class="markdownIt-Anchor" href="#94-二叉树的中序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  inOrder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    inOrder(node.left)</span><br><span class="line">    ret.push(node.val)</span><br><span class="line">    inOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> cur = root</span><br><span class="line">  <span class="keyword">while</span>(stack.length || cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur !== <span class="literal">null</span> )&#123;</span><br><span class="line">      stack.push(cur)</span><br><span class="line">      cur = cur.left</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cur = stack.pop()</span><br><span class="line">      ret.push(cur.val)</span><br><span class="line">      cur = cur.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——模拟系统栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">s, node</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = s</span><br><span class="line">    <span class="built_in">this</span>.node = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> stack = [<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,root)]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> command = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(command.s === <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">      res.push(command.node.val)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(command.node.right)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.right))</span><br><span class="line">      stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;print&quot;</span>,command.node))</span><br><span class="line">      <span class="keyword">if</span>(command.node.left)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.left))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="98-验证二叉搜索树"><a class="markdownIt-Anchor" href="#98-验证二叉搜索树"></a> <a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _isValidBST(root,-<span class="literal">Infinity</span>,<span class="literal">Infinity</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isValidBST</span>(<span class="params">root,lower,upper</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.val &lt;= lower || root.val &gt;= upper) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _isValidBST(root.left,lower,root.val) &amp;&amp; _isValidBST(root.right,root.val,upper)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = -<span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">return</span> _isValidBST(root)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isValidBST</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!_isValidBST(root.left))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(root.val &lt;= prev)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    prev = root.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _isValidBST(root.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> prev = -<span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">let</span> cur = root</span><br><span class="line">  <span class="keyword">while</span>(stack.length || cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur!== <span class="literal">null</span>)&#123;</span><br><span class="line">      stack.push(cur)</span><br><span class="line">      cur = cur.left</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cur = stack.pop()</span><br><span class="line">      <span class="keyword">if</span>(cur.val &lt;= prev)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      prev = cur.val</span><br><span class="line">      cur = cur.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树中序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-前序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-前序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-前序遍历"></a> leetcode-二叉树-前序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用前序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  dfs(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">node, param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// process result</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. process logic in current level 处理当前层逻辑</span></span><br><span class="line">    ret.push(node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. drill down 进入下一层</span></span><br><span class="line">    dfs(node.left, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. drill down 进入下一层</span></span><br><span class="line">    dfs(node.right, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="144-二叉树的前序遍历"><a class="markdownIt-Anchor" href="#144-二叉树的前序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  preorder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">preorder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    ret.push(node.val)</span><br><span class="line">    preorder(node.left)</span><br><span class="line">    preorder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = [root]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(cur)&#123;</span><br><span class="line">      ret.push(cur.val)</span><br><span class="line">      stack.push(cur.right)</span><br><span class="line">      stack.push(cur.left)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——模拟系统栈方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">s,node</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.s = s</span><br><span class="line">    <span class="built_in">this</span>.node = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = [<span class="keyword">new</span> Command(<span class="string">&#x27;go&#x27;</span>,root)]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> command = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(command.s === <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">      ret.push(command.node.val)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(command.node.right)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&#x27;go&#x27;</span>,command.node.right))</span><br><span class="line">      <span class="keyword">if</span>(command.node.left)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&#x27;go&#x27;</span>,command.node.left))</span><br><span class="line">      stack.push(<span class="keyword">new</span> Command(<span class="string">&#x27;print&#x27;</span>,command.node))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="589-n叉树的前序遍历"><a class="markdownIt-Anchor" href="#589-n叉树的前序遍历"></a> <a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589. N叉树的前序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  _preorder(root)     </span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_preorder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> </span><br><span class="line">    ret.push(node.val)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; node.children.length;i++)&#123;</span><br><span class="line">      _preorder(node.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = [root]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = stack.pop()</span><br><span class="line">    ret.push(cur.val)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = cur.children.length - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">      stack.push(cur.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="112-路径总和"><a class="markdownIt-Anchor" href="#112-路径总和"></a> <a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span> (<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">return</span> root.val === sum</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> hasPathSum(root.left,sum-root.val) || hasPathSum(root.right, sum-root.val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="257-二叉树的所有路径"><a class="markdownIt-Anchor" href="#257-二叉树的所有路径"></a> <a href="https://leetcode-cn.com/problems/binary-tree-paths/">257. 二叉树的所有路径</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  buildPaths(root,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">buildPaths</span>(<span class="params">root,s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>)&#123;</span><br><span class="line">      s+=root.val</span><br><span class="line">      res.push(s)</span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPaths(root.left,s+root.val+<span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">    buildPaths(root.right,s+root.val+<span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前函数递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">    res.push(root.val + <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftS = binaryTreePaths(root.left)</span><br><span class="line">  <span class="keyword">let</span> rightS = binaryTreePaths(root.right)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; leftS.length; i++) </span><br><span class="line">    res.push(root.val + <span class="string">&quot;-&gt;&quot;</span> + leftS[i])</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rightS.length; i++) </span><br><span class="line">    res.push(root.val + <span class="string">&quot;-&gt;&quot;</span> + rightS[i])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="437-路径总和-iii"><a class="markdownIt-Anchor" href="#437-路径总和-iii"></a> <a href="https://leetcode-cn.com/problems/path-sum-iii/">437. 路径总和 III</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span> (<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  res = findPath(root, sum)</span><br><span class="line">  res += pathSum(root.left, sum)</span><br><span class="line">  res += pathSum(root.right, sum)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findPath</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (root.val === sum)</span><br><span class="line">      res += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res += findPath(root.left, sum - root.val)</span><br><span class="line">    res += findPath(root.right, sum - root.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树前序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络字体</title>
      <link href="2020/07/18/docs/%E7%BD%91%E7%BB%9C%E5%AD%97%E4%BD%93/"/>
      <url>2020/07/18/docs/%E7%BD%91%E7%BB%9C%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="网络字体"><a class="markdownIt-Anchor" href="#网络字体"></a> 网络字体</h1><p>西方国家字母体系分为两类：<code>Serif</code>和<code>Sans-Serif</code>。</p><ul><li><p>serif：有衬线字体，每个字的开始和结束的地方都有额外的修饰，笔画的粗细也不同。</p></li><li><p>sans-serif：无衬线字体，每个字的笔画的粗细都差不多。</p></li><li><p>Monospace：等宽字体，最早出现于西方的印刷体。早期的显示器、打字机，由于技术的限制，无法调整字母的宽度，因此将字母的宽度都制成了一样的宽度，从而形成了等宽字体。</p></li></ul><p><code>serif</code>对于阅读文章来说一种很好的字体，因为该字体很容易辨认。但<code>sans-serif</code>就不同了，每个字的笔画的粗细都差不多，容易造成辨认的困扰，以及错读的情况。</p><p>因此，对于文章的正文来说使用易读性高，且以word为单位来阅读的serif会更加友好且不易疲劳。而标题采用较醒目的sans-serif，它需要醒目，不需要长时间盯着来阅读。</p><p>Example:</p><p>serif：‘宋体’, ‘Times New Roman’, Times, serif</p><p>sans-serif：‘黑体’，‘Microsoft YaHei UI’, ‘Comic Sans MS’, Arial, Helvetica, Verdana, sans-serif</p><p>Monospace：Consolas，Courier New，Monaco，monospace</p>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack常用配置</title>
      <link href="2020/07/14/Build%20Tools/webpack%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>2020/07/14/Build%20Tools/webpack%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack常用配置"><a class="markdownIt-Anchor" href="#webpack常用配置"></a> webpack常用配置</h1><h2 id="一-安装与运行"><a class="markdownIt-Anchor" href="#一-安装与运行"></a> 一、安装与运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>配置文件：<strong><code>webpack.config.js</code></strong></p><p>运行命令：配置**<code>package.json</code>**文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h2 id="二-基础配置"><a class="markdownIt-Anchor" href="#二-基础配置"></a> 二、基础配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 环境</span></span><br><span class="line">  entry: resolve(__dirname, <span class="string">&#x27;src/index.js&#x27;</span>), <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123; <span class="comment">// 输出文件</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;js/bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123; <span class="attr">rules</span>: [] &#125;, <span class="comment">// loader </span></span><br><span class="line">  plugins: []<span class="comment">// 插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-开发配置"><a class="markdownIt-Anchor" href="#三-开发配置"></a> 三、开发配置</h2><h3 id="1-处理csslesssass"><a class="markdownIt-Anchor" href="#1-处理csslesssass"></a> 1. 处理CSS/Less/Sass</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader css-loader -D <span class="comment"># CSS</span></span><br><span class="line"></span><br><span class="line">npm i style-loader css-loader less less-loader -D<span class="comment"># Less</span></span><br><span class="line"></span><br><span class="line">npm i style-loader css-loader sass-loader sass node-sass -D <span class="comment"># Sass</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-处理html"><a class="markdownIt-Anchor" href="#2-处理html"></a> 2. 处理HTML</h3><p>html-webpack-plugin：指定默认处理的html文件，自动引入打包后的CSS，JS，同时可以压缩打包后的html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// html模板文件位置</span></span><br><span class="line">      template: resolve(__dirname,<span class="string">&quot;public/index.html&quot;</span>),  </span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-图片字体处理"><a class="markdownIt-Anchor" href="#3-图片字体处理"></a> 3. 图片/字体处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i file-loader url-loader html-loader -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|svg|jpe?g|gif)$/i</span>,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">4096</span>, <span class="comment">// 超过4096,转为base64</span></span><br><span class="line">          name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;html-loader&#x27;</span> <span class="comment">// 解决html中src路径问题</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(eot|ttf|woff2?)$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">&#x27;fonts/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自动编译构建"><a class="markdownIt-Anchor" href="#4-自动编译构建"></a> 4. 自动编译构建</h3><h4 id="41-watch"><a class="markdownIt-Anchor" href="#41-watch"></a> 4.1 watch</h4><p>自动监听并构建，需要手动刷新浏览器。</p><p>原理：轮询判断文件的最后编辑时间是否发生变化，某个文件发生变化，先缓存起来，等aggregateTimeout之后再构建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  watch: <span class="literal">true</span>,</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    poll: <span class="number">1000</span>,</span><br><span class="line">    aggregateTimeout: <span class="number">500</span>,</span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="42-devserver"><a class="markdownIt-Anchor" href="#42-devserver"></a> 4.2 devServer</h4><p>开发服务器。自动编译(只在内存中编译打包，不会有任何文件输出)、自动打开浏览器、自动刷新浏览器等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D </span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config webpack.config.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),<span class="comment">// 指定静态资源目录</span></span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port: <span class="number">3000</span>,  </span><br><span class="line">    open: <span class="literal">true</span>,  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    compress: <span class="literal">true</span>,  <span class="comment">// 开启gzip压缩</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-生产配置"><a class="markdownIt-Anchor" href="#四-生产配置"></a> 四、生产配置</h2><h3 id="1-css"><a class="markdownIt-Anchor" href="#1-css"></a> 1. CSS</h3><h4 id="11-提取css到单独文件中"><a class="markdownIt-Anchor" href="#11-提取css到单独文件中"></a> 1.1 提取CSS到单独文件中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              publicPath: <span class="string">&#x27;../&#x27;</span> <span class="comment">// 解决background: url()的路径问题</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class="line">      chunkFilename: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-css兼容性处理"><a class="markdownIt-Anchor" href="#12-css兼容性处理"></a> 1.2 CSS兼容性处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webpack.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              publicPath: <span class="string">&#x27;../&#x27;</span> <span class="comment">// 解决background: url()的路径问题</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [ <span class="string">&quot;postcss-preset-env&quot;</span> ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;development&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;last 1 chrome version&quot;</span>,</span><br><span class="line">      <span class="string">&quot;last 1 firefox version&quot;</span>,</span><br><span class="line">      <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&gt;0.2%&quot;</span>,</span><br><span class="line">      <span class="string">&quot;not dead&quot;</span>,</span><br><span class="line">      <span class="string">&quot;not op_mini all&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-css压缩"><a class="markdownIt-Anchor" href="#13-css压缩"></a> 1.3 CSS压缩</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-js兼容性处理"><a class="markdownIt-Anchor" href="#2-js兼容性处理"></a> 2. JS兼容性处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><h4 id="21-兼容基础语法"><a class="markdownIt-Anchor" href="#21-兼容基础语法"></a> 2.1 兼容基础语法</h4><p>两种配置方式写法相同。</p><h5 id="1-配置到babelconfigjs单独文件"><a class="markdownIt-Anchor" href="#1-配置到babelconfigjs单独文件"></a> (1) 配置到babel.config.js单独文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * babel.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>, <span class="comment">// 只能处理基础语法，如es6模块化,箭头函数等</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webpack.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-配置到webpackconfigjs中"><a class="markdownIt-Anchor" href="#2-配置到webpackconfigjs中"></a> (2) 配置到webpack.config.js中</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="comment">// 只能处理基础语法，如es6模块化,箭头函数等</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-兼容es6es7等"><a class="markdownIt-Anchor" href="#22-兼容es6es7等"></a> 2.2 兼容ES6,ES7等</h4><h5 id="1-全局兼容处理polyfill"><a class="markdownIt-Anchor" href="#1-全局兼容处理polyfill"></a> (1) 全局兼容处理(polyfill)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/polyfill -D</span><br></pre></td></tr></table></figure><p>相当于把所有不兼容的JS方法等都重新定义(打包后，体积大)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@babel/polyfill&quot;</span></span><br></pre></td></tr></table></figure><h5 id="2-按需加载core-js"><a class="markdownIt-Anchor" href="#2-按需加载core-js"></a> (2) 按需加载(core-js)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i core-js -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * babel.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,  <span class="comment">// 只能处理基础语法，如es6模块化,箭头函数等</span></span><br><span class="line">      &#123; <span class="comment">// 处理ES6,ES7...</span></span><br><span class="line">        useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">        corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">        targets: &#123;</span><br><span class="line">          chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">          firefox: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">          ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">          safari: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">          edge: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-js压缩"><a class="markdownIt-Anchor" href="#3-js压缩"></a> 3. JS压缩</h3><p>production模式下，自动压缩</p><h3 id="4-html压缩"><a class="markdownIt-Anchor" href="#4-html压缩"></a> 4. HTML压缩</h3><p>使用html-webpack-plugin提供的压缩功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: resolve(__dirname, <span class="string">&#x27;public/index.html&#x27;</span>),</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-辅助插件清空构建目录"><a class="markdownIt-Anchor" href="#5-辅助插件清空构建目录"></a> 5. 辅助插件清空构建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-性能优化"><a class="markdownIt-Anchor" href="#五-性能优化"></a> 五、性能优化</h2><h3 id="1-开发优化"><a class="markdownIt-Anchor" href="#1-开发优化"></a> 1. 开发优化</h3><h4 id="11-hmr"><a class="markdownIt-Anchor" href="#11-hmr"></a> 1.1 HMR</h4><p>HMR：一个模块发生了变化，只会重新构建这个模块，而不是所有模块，<strong>提高构建速度</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// 开启HMR</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>样式文件：可以通过 style-loader 使用HMR</p></li><li><p>js文件：默认不能使用HMR, 可以通过module.hot 监听JS文件HMR</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx.js中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">&#x27;./js/common.js&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    test()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>html文件：默认不能使用HMR，html文件只有一个，所以不需要使用HMR</p></li></ul><h4 id="12-source-map"><a class="markdownIt-Anchor" href="#12-source-map"></a> 1.2 source-map</h4><p>一个信息文件，存储着位置信息，可以定位到源代码，用于代码调试。</p><p><code>[inline- | hidden- | eval-][nosources-][cheap- [module-]]source-map</code></p><ul><li>inline：内联，保存在打包后的js文件中，只生成一个最终的source-map信息，构建速度快。能定位到源代码的行列。</li><li>hidden：外部map文件。不能定位到源代码。</li><li>eval：内联，保存在打包后的js文件中，每个模块对应一个eval包裹的source-map信息。能定位到源代码的行列。</li><li>nosources：外部map文件。不能定位到源代码。</li><li>cheap：外部map文件。只能定位到源代码的行。</li><li>module：外部map文件，包含loader。只能定位到源代码的行。</li><li>source-map：外部map文件。能定位到源代码的行列。</li></ul><p>开发环境：eval-source-map（速度快，调试友好）</p><p>生产环境：source-map / nosources-source-map(全部隐藏) / hidden-source-map(只隐藏源代码)</p><h3 id="2-生产优化"><a class="markdownIt-Anchor" href="#2-生产优化"></a> 2. 生产优化</h3><h4 id="21-oneof"><a class="markdownIt-Anchor" href="#21-oneof"></a> 2.1 oneOf</h4><p>只会匹配一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-缓存"><a class="markdownIt-Anchor" href="#22-缓存"></a> 2.2 缓存</h4><h5 id="1-babel-loader缓存"><a class="markdownIt-Anchor" href="#1-babel-loader缓存"></a> (1) babel-loader缓存</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 缓存转换过的JS语法,让第二次构建速度更快</span></span><br><span class="line">          cacheDirectory: <span class="literal">true</span> </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;      </span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-文件资源缓存文件指纹"><a class="markdownIt-Anchor" href="#2-文件资源缓存文件指纹"></a> (2) 文件资源缓存（文件指纹）</h5><ul><li>hash：和整个项目的构建有关,只要项目文件有改动,整个项目构建的hash就会变</li><li>chunkhash：和webpack打包的chunk有关,不同的entry会生成不同的chunkhash</li><li>contenthash：根据文件内容定义hash,内容不变,则ContentHash不变</li></ul><p>JS设置文件指纹：<code>[name].[chunkhash:8].js</code></p><p>CSS设置文件指纹：<code>[name].[contenthash:8].css</code></p><p>图片/字体设置文件指纹：<code>[name]. [hash:8].[ext]</code></p><h4 id="23-tree-shaking"><a class="markdownIt-Anchor" href="#23-tree-shaking"></a> 2.3 tree shaking</h4><p>去除无用代码。</p><p>开启条件：</p><ol><li>使用ES6模块化</li><li>mode: production</li></ol><p>在package.json中添加<code>sideEffects: false</code>，表示所有代码都是没有副作用的(即都可以tree shaking)，此时import css文件可能会导致tree shaking。</p><p>可以指定哪些文件有副作用，如<code>sideEffects: ['*.css']</code></p><h4 id="24-多进程打包"><a class="markdownIt-Anchor" href="#24-多进程打包"></a> 2.4 多进程打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i thread-loader -D</span><br></pre></td></tr></table></figure><p>多进程打包：进程启动大概消耗600ms，进程通信也有开销，只有工作时间较长，才需要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25-code-split"><a class="markdownIt-Anchor" href="#25-code-split"></a> 2.5 code split</h4><p>代码分割。</p><h5 id="1-多入口文件分割"><a class="markdownIt-Anchor" href="#1-多入口文件分割"></a> (1) 多入口文件分割</h5><p>打包后自动分割，一个entry对应一个代码文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&#x27;src/index.js&#x27;</span>,</span><br><span class="line">    test: <span class="string">&#x27;src/test.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-分割node_modules中公共依赖"><a class="markdownIt-Anchor" href="#2-分割node_modules中公共依赖"></a> (2) 分割node_modules中公共依赖</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span> <span class="comment">// 所有引入的库进行分离</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-分割指定文件"><a class="markdownIt-Anchor" href="#3-分割指定文件"></a> (3) 分割指定文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx.js中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">  <span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span> </span><br><span class="line">  <span class="string">&#x27;x.js&#x27;</span></span><br><span class="line">).then() <span class="comment">// 单独打包x.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webpack.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123; </span><br><span class="line">      <span class="comment">// 解决修改a文件导致b文件的contenthash变化的问题</span></span><br><span class="line">      name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="26-js懒加载和预加载"><a class="markdownIt-Anchor" href="#26-js懒加载和预加载"></a> 2.6 JS懒加载和预加载</h4><p>正常加载：并行加载</p><p>懒加载：使用时才加载</p><p>预加载：等其他资源加载完，浏览器利用空闲时间加载资源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(</span><br><span class="line">    <span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span></span><br><span class="line">    <span class="string">&#x27;x.js&#x27;</span></span><br><span class="line">  ).then() <span class="comment">// 懒加载</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(</span><br><span class="line">    <span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span></span><br><span class="line">    <span class="comment">/* webpackPrefetch: true */</span> </span><br><span class="line">    <span class="string">&#x27;x.js&#x27;</span></span><br><span class="line">  ).then() <span class="comment">// 预加载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="27-pwa"><a class="markdownIt-Anchor" href="#27-pwa"></a> 2.7 PWA</h4><p>PWA：渐进式网络应用程序，即离线可访问。主要技术是service worker + cache。</p><p><strong>service worker 必须运行在服务器上</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i workbox-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 1. 帮助 service worker 快速启动</span></span><br><span class="line">    <span class="comment">// 2. 删除旧的 service worker</span></span><br><span class="line">    <span class="comment">// 3. 生成一个service workder配置文件</span></span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">      skipWaiting: <span class="literal">true</span>,</span><br><span class="line">      clientsClaim: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx.js中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">&#x27;service-worker.js&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sw注册成功&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sw注册失败&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28-externals"><a class="markdownIt-Anchor" href="#28-externals"></a> 2.8 externals</h4><p>当某些资源不要打包并且需要通过CDN引入时，可通过externals排除某些包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  externals: &#123;</span><br><span class="line">    jquery: <span class="string">&#x27;jQuery&#x27;</span> <span class="comment">// 库名: npm包名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="29-dll动态链接库"><a class="markdownIt-Anchor" href="#29-dll动态链接库"></a> 2.9 DLL(动态链接库)</h4><p>单独打包库文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webpack.dll.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    jquery: [<span class="string">&#x27;jquery&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    library: <span class="string">&#x27;[name]_[hash]&#x27;</span> <span class="comment">// 向外暴露的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">&#x27;[name]_[hash]&#x27;</span>, <span class="comment">// 映射库暴露的名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>) <span class="comment">// 映射文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dll&quot;</span>: <span class="string">&quot;webpack --config webpack.dll.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i add-asset-html-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webpack.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: resolve(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">      filepath: resolve(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>),</span><br><span class="line">      outputPath: <span class="string">&#x27;libs&#x27;</span>,</span><br><span class="line">      publicPath: <span class="string">&#x27;./libs&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-其他配置"><a class="markdownIt-Anchor" href="#六-其他配置"></a> 六、其他配置</h2><h3 id="1-entry"><a class="markdownIt-Anchor" href="#1-entry"></a> 1. entry</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1: string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;index.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2: array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 将index2.js和index.js打包到一个文件中，默认使用index.js的名称</span></span><br><span class="line">  entry: [<span class="string">&#x27;index.js&#x27;</span>, <span class="string">&#x27;index2.js&#x27;</span>] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3: object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">    index2: [<span class="string">&#x27;index2.js&#x27;</span>, <span class="string">&#x27;index3.js&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-output"><a class="markdownIt-Anchor" href="#2-output"></a> 2. output</h3><ul><li>publicPath：所有资源引入的公共路径前缀</li><li>chunkFilename：非入口chunk的名称（code split 分割出来的文件命名）</li><li>library：整个文件向外暴露的变量名</li><li>libraryTarget：变量名添加到那个对象上，‘window’ | ‘global’ | ‘commonjs’…</li></ul><h3 id="3-module"><a class="markdownIt-Anchor" href="#3-module"></a> 3. module</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\./</span>,</span><br><span class="line">        use: [], <span class="comment">// 多个loader</span></span><br><span class="line">        loader: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 单个loader</span></span><br><span class="line">        options: &#123;&#125;, <span class="comment">// loader配置选项</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除文件</span></span><br><span class="line">        include: <span class="string">&#x27;src&#x27;</span>, <span class="comment">// 只检查哪些文件</span></span><br><span class="line">        enforce: <span class="string">&#x27;pre&#x27;</span> | <span class="string">&#x27;post&#x27;</span>, <span class="comment">// 优先执行 | 延后执行,</span></span><br><span class="line">        oneOf: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-resolve"><a class="markdownIt-Anchor" href="#4-resolve"></a> 4. resolve</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123; <span class="comment">// 解析模块的规则</span></span><br><span class="line">    alias: &#123; <span class="comment">// 配置解析模块路径别名</span></span><br><span class="line">      @: <span class="string">&#x27;src&#x27;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>], <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">    modules: [<span class="string">&#x27;node_modules&#x27;</span>] <span class="comment">// 告诉webpack解析模块去哪找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-resolveloader"><a class="markdownIt-Anchor" href="#5-resolveloader"></a> 5. resolveLoader</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123; <span class="comment">// loader解析路径规则</span></span><br><span class="line">  modules: [<span class="string">&#x27;node_modules&#x27;</span>] </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-devserver"><a class="markdownIt-Anchor" href="#6-devserver"></a> 6. devServer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;  <span class="comment">// 代理</span></span><br><span class="line">      <span class="function"><span class="title">before</span>(<span class="params">app</span>)</span> &#123;<span class="comment">// 用于mock数据</span></span><br><span class="line">        app.get(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/admin&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123; <span class="comment">// devServer服务器接收到/api/xxx的请求,就会把请求转发到target</span></span><br><span class="line">        target: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">        pathRewrite: &#123; </span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 发送请求时,将/api/xxx -&gt; /xxx</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watchContentBase: <span class="literal">true</span>, <span class="comment">// 监视contentBase目录下的文件，一变化就reload</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      ignored: <span class="regexp">/node_modules/</span> <span class="comment">// 忽略文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clientLogLevel: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 日志信息</span></span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// 除了基本信息，其他都不要显示</span></span><br><span class="line">    overlay: <span class="literal">false</span>, <span class="comment">// 如果出错,不要全屏提示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-optimization"><a class="markdownIt-Anchor" href="#7-optimization"></a> 7. optimization</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      minSize: <span class="number">30</span> * <span class="number">1024</span>, <span class="comment">// 分割的chunk最小为30kb</span></span><br><span class="line">      maxSize: <span class="number">0</span>, <span class="comment">// 没有最大限制</span></span><br><span class="line">      minChunks: <span class="number">1</span>, <span class="comment">// 要提取的chunk最少被引用1次</span></span><br><span class="line">      cacheGroups: &#123; <span class="comment">// 分割chunk组</span></span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">&#x27;chunk-vendors&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: -<span class="number">10</span>,</span><br><span class="line">          chunks: <span class="string">&#x27;initial&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        common: &#123;</span><br><span class="line">          name: <span class="string">&#x27;chunk-common&#x27;</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: -<span class="number">20</span>,</span><br><span class="line">          chunks: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span> <span class="comment">// 解决重复打包问题</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [ <span class="comment">// 配置生产环境的js和css压缩方案</span></span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        paraller: <span class="literal">true</span>,</span><br><span class="line">        sourceMa: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Build Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时钟指针的夹角</title>
      <link href="2020/07/07/Algorithm/%E6%97%B6%E9%92%9F%E6%8C%87%E9%92%88%E7%9A%84%E5%A4%B9%E8%A7%92/"/>
      <url>2020/07/07/Algorithm/%E6%97%B6%E9%92%9F%E6%8C%87%E9%92%88%E7%9A%84%E5%A4%B9%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="时钟指针的夹角"><a class="markdownIt-Anchor" href="#时钟指针的夹角"></a> 时钟指针的夹角</h1><p>要想计算出时钟指针在钟盘上的正确位置，其思想是分别计算<code>时针</code>、<code>分针</code>、<code>秒针</code>与<code>0点垂线</code>的夹角。</p><p>首先，需要明确这三个指针分别在钟盘上转一圈（360°）时，每秒/每分/每小时指针转的角度。</p><ol><li><p>秒针：转一圈（360°）是 60s，那么秒针的转动速率 V<sub>s</sub></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>s</mi></msub><mo>=</mo><mfrac><mrow><mn>360</mn><mi mathvariant="normal">°</mi></mrow><mrow><mn>60</mn><mi>s</mi></mrow></mfrac><mo>=</mo><mn>6</mn><mtext>度</mtext><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">V_s = \frac{360°}{60 s} = 6 \text{度}/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord text"><span class="mord cjk_fallback">度</span></span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span></span></span></p></li><li><p>分针：转一圈（360°）是 60min，那么分针的转动速率 V<sub>m</sub></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>m</mi></msub><mo>=</mo><mfrac><mrow><mn>360</mn><mi mathvariant="normal">°</mi></mrow><mrow><mn>60</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow></mfrac><mo>=</mo><mn>6</mn><mtext>度</mtext><mi mathvariant="normal">/</mi><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">V_m = \frac{360°}{60 min} = 6 \text{度}/min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord text"><span class="mord cjk_fallback">度</span></span><span class="mord">/</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span></span></p></li><li><p>时针：转一圈（360°）是 12h，那么时针的转动速率 V<sub>h</sub></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>h</mi></msub><mo>=</mo><mfrac><mrow><mn>360</mn><mi mathvariant="normal">°</mi></mrow><mrow><mn>12</mn><mi>h</mi></mrow></mfrac><mo>=</mo><mn>30</mn><mtext>度</mtext><mi mathvariant="normal">/</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">V_h = \frac{360°}{12h} = 30 \text{度}/h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">2</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">度</span></span><span class="mord">/</span><span class="mord mathdefault">h</span></span></span></span></span></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/clock.png" alt="" /></p><p>例如：20 时 30 分 30 秒，那么</p><p>秒针的位置 P<sub>s</sub>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>s</mi></msub><mo>=</mo><mn>20</mn><mi>s</mi><mo>×</mo><msub><mi>V</mi><mi>s</mi></msub><mo>=</mo><mn>20</mn><mo>×</mo><mn>6</mn><mo>=</mo><mn>120</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">P_s = 20s × V_s = 20 × 6 = 120 °</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mord">°</span></span></span></span></span></p><p>分针的位置 P<sub>m</sub>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn><mi>s</mi><mo>=</mo><mfrac><mrow><mn>30</mn><mi>s</mi></mrow><mrow><mn>60</mn><mi>s</mi></mrow></mfrac><mo>=</mo><mn>0.5</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">30s = \frac{30s}{60s} = 0.5 min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>m</mi></msub><mo>=</mo><mn>20</mn><mi>m</mi><mi>i</mi><mi>n</mi><mo>×</mo><msub><mi>V</mi><mi>m</mi></msub><mo>+</mo><mn>0.5</mn><mi>m</mi><mi>i</mi><mi>n</mi><mo>×</mo><msub><mi>V</mi><mi>m</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>20</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>×</mo><mn>6</mn><mo>=</mo><mn>123</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">P_m = 20min × V_m + 0.5min ×V_m = (20 + 0.5)× 6 = 123°</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">°</span></span></span></span></span></p><p>时针的位置 P<sub>h</sub>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>20</mn><mn>12</mn></mfrac><mo>=</mo><mn>1</mn><mo>…</mo><mo>…</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">\frac{20}{12} = 1 ……8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn><mi>m</mi><mi>i</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mn>30</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow><mrow><mn>60</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow></mfrac><mo>=</mo><mn>0.5</mn><mi>h</mi></mrow><annotation encoding="application/x-tex">30min = \frac{30min}{60min} = 0.5h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">h</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>h</mi></msub><mo>=</mo><mn>8</mn><mi>h</mi><mo>×</mo><msub><mi>V</mi><mi>h</mi></msub><mo>+</mo><mn>0.5</mn><mi>h</mi><mo>×</mo><msub><mi>V</mi><mi>h</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>8</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>×</mo><mn>30</mn><mo>=</mo><mn>255</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">P_h = 8h × V_h + 0.5h × V_h = (8 + 0.5) × 30 = 255°</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span><span class="mord">°</span></span></span></span></span></p><p>在计算<code>分针</code>和<code>时针</code>的位置时，需要分别注意<code>秒针</code>和<code>分针</code>已经转了多少角度。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钟表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode常用快捷键</title>
      <link href="2020/04/09/Editors/VSCode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/04/09/Editors/VSCode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode常用快捷键"><a class="markdownIt-Anchor" href="#vscode常用快捷键"></a> VSCode常用快捷键</h1><h2 id="聚焦"><a class="markdownIt-Anchor" href="#聚焦"></a> 聚焦</h2><table><thead><tr><th>名称</th><th>快捷键</th></tr></thead><tbody><tr><td>创建/打开并聚焦到终端</td><td>alt+ T</td></tr><tr><td>切换聚焦的终端</td><td>alt + ↑↓←→</td></tr><tr><td>聚焦到侧边栏</td><td>ctrl+ 0</td></tr><tr><td>聚焦到编辑器</td><td>ctrl+ number / ctrl+ K，ctrl+ ↑↓←→</td></tr></tbody></table><h2 id="光标移动"><a class="markdownIt-Anchor" href="#光标移动"></a> 光标移动</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>多光标</td><td>ctrl+ alt + ↑↓←→</td></tr><tr><td>选中附近单词与重复内容</td><td>(ctrl+ D )  * number</td></tr><tr><td>选中多行内容并在末尾添加光标</td><td>alt + shift + i</td></tr></tbody></table><h2 id="文件间移动"><a class="markdownIt-Anchor" href="#文件间移动"></a> 文件间移动</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>展示最近打开的文件列表</td><td>ctrl+ P</td></tr><tr><td>在新的编辑器中打开</td><td>ctrl+ P，ctrl+ enter</td></tr><tr><td>跳转到指定行</td><td>ctrl+ G</td></tr><tr><td>跳转到指定功能</td><td>ctrl+ shift + O</td></tr><tr><td>typescript 跳转到定义处</td><td>F12</td></tr><tr><td>跳转到函数实现处</td><td>ctrl+ F12</td></tr></tbody></table><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>折叠/展开</td><td>ctrl+ shift + [ / ]</td></tr><tr><td>全部折叠/展开</td><td>ctrl+ K，ctrl+ 0</td></tr></tbody></table><h2 id="搜索"><a class="markdownIt-Anchor" href="#搜索"></a> 搜索</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>文件内搜索内容,并跳转</td><td>ctrl+ F，shift + enter</td></tr><tr><td>大小写敏感</td><td>alt + C</td></tr><tr><td>单词全匹配</td><td>alt + W</td></tr><tr><td>正则</td><td>alt + R</td></tr><tr><td>替换</td><td>ctrl+ H</td></tr><tr><td>全部替换</td><td>ctrl+ alt + enter</td></tr><tr><td>多文件搜索</td><td>ctrl+ shift + F</td></tr></tbody></table><h2 id="终端"><a class="markdownIt-Anchor" href="#终端"></a> 终端</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>显示/隐藏终端</td><td>ctrl+ `   /   ctrl+ J</td></tr><tr><td>新建终端</td><td>ctrl+ shift + `</td></tr><tr><td>拆分终端</td><td>ctrl+ shift + 5</td></tr></tbody></table><h2 id="编辑器"><a class="markdownIt-Anchor" href="#编辑器"></a> 编辑器</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>拆分编辑器</td><td>ctrl+ \</td></tr><tr><td>调整文件所在的编辑器</td><td>ctrl+ alt + ↑↓←→</td></tr></tbody></table><h2 id="工作区"><a class="markdownIt-Anchor" href="#工作区"></a> 工作区</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>放大/缩小</td><td>ctrl+ +/-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Editors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http-proxy-middleware</title>
      <link href="2020/02/27/Error%20Collection/http-proxy-middleware/"/>
      <url>2020/02/27/Error%20Collection/http-proxy-middleware/</url>
      
        <content type="html"><![CDATA[<h1 id="reacthttp-proxy-middleware"><a class="markdownIt-Anchor" href="#reacthttp-proxy-middleware"></a> react——http-proxy-middleware</h1><h2 id="1-报错信息"><a class="markdownIt-Anchor" href="#1-报错信息"></a> 1. 报错信息</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200227163903.png" alt="" /></p><h2 id="2-原因"><a class="markdownIt-Anchor" href="#2-原因"></a> 2. 原因</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/image-20200227165413097.png" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/image-20200227165205342.png" alt="" /></p><p>可以发现<code>proxy</code>是一个<code>对象</code>，<code>函数</code>在对象里面。</p><p>所以官网文档写的早 ，导出的还是函数，但是现在导出的是一个对象了，只是文档还没改。</p><h2 id="3-解决方法"><a class="markdownIt-Anchor" href="#3-解决方法"></a> 3. 解决方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">    proxy.createProxyMiddleware(&#123;</span><br><span class="line">      target: <span class="string">&quot;http://tingapi.ting.baidu.com&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;http://tingapi.ting.baidu.com&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Error Collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10系统时间显示到秒</title>
      <link href="2020/02/18/docs/win10%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%E5%88%B0%E7%A7%92/"/>
      <url>2020/02/18/docs/win10%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%E5%88%B0%E7%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="win10系统时间显示到秒"><a class="markdownIt-Anchor" href="#win10系统时间显示到秒"></a> win10系统时间显示到秒</h1><p><code>windows+R</code>输入<code>regedit</code>打开注册表,找到 <code>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code></p><p>右键点击新建 <code>DWORD（32位）值</code>，并命名为<code>ShowSecondsInSystemClock</code>，将数值数据改为<code>1</code> 即可(可以重启电脑或者在资源管理器里重新启动<code>Windows资源管理器</code>).</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/N1NH56Z0M.png" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200218234635.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页截图&amp;设计模式</title>
      <link href="2020/02/18/docs/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE/"/>
      <url>2020/02/18/docs/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-网页截图"><a class="markdownIt-Anchor" href="#一-网页截图"></a> 一、网页截图</h2><h3 id="1-pc端"><a class="markdownIt-Anchor" href="#1-pc端"></a> 1. PC端</h3><p>打开要截图的网页,<code>F12(Fn+F12)</code>打开控制台,选择<code>Elements</code>,<code>ctrl+shift+p</code>,输入<code>shot</code>即可选择截图方式</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200214140951.png"  /><h3 id="2-手机端"><a class="markdownIt-Anchor" href="#2-手机端"></a> 2. 手机端</h3><p>打开要截图的网页,<code>F12(Fn+F12)</code>打开控制台</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/7@E1EQEGUGVSEIJ3{}MVQSR_WPS图片.png" style="zoom: 80%;" /><h2 id="二-网页设计模式"><a class="markdownIt-Anchor" href="#二-网页设计模式"></a> 二、网页设计模式</h2><p>在控制台输入<code>document.designMode = 'on'</code>,即可修改页面(可以复制文字等…)</p>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签模板</title>
      <link href="2020/02/17/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/02/17/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="有趣的标签模板"><a class="markdownIt-Anchor" href="#有趣的标签模板"></a> 有趣的标签模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*a: variable</span></span><br><span class="line"><span class="comment">*A: string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">strs,...vars</span>)</span>&#123;<span class="built_in">console</span>.log(strs)&#125;</span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">//a[&quot;&quot;]</span></span><br><span class="line">tag<span class="string">`A`</span><span class="comment">//A[&quot;A&quot;]</span></span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>A`</span><span class="comment">// aA[&quot;&quot;, &quot;A&quot;]</span></span><br><span class="line">tag<span class="string">`A<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// Aa[&quot;A&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`AA`</span><span class="comment">// AA[&quot;AA&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// aa[&quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>A`</span><span class="comment">// aaA[&quot;&quot;, &quot;&quot;, &quot;A&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>A<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// aAa[&quot;&quot;, &quot;A&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`A<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// Aaa[&quot;A&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>AA`</span><span class="comment">// aAA[&quot;&quot;, &quot;AA&quot;]</span></span><br><span class="line">tag<span class="string">`A<span class="subst">$&#123;a&#125;</span>A`</span><span class="comment">// AaA[&quot;A&quot;, &quot;A&quot;]</span></span><br><span class="line">tag<span class="string">`AA<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// AAa[&quot;AA&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>`</span><span class="comment">//aaa[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`AAA`</span><span class="comment">// AAA[&quot;AAA&quot;] </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XAMPP - Error:Mysql/Apache shutdown unexpectedly</title>
      <link href="2020/01/04/Error%20Collection/XAMPP---ErrorMysqlApache-shutdown-unexpectedly/"/>
      <url>2020/01/04/Error%20Collection/XAMPP---ErrorMysqlApache-shutdown-unexpectedly/</url>
      
        <content type="html"><![CDATA[<h1 id="xampp-errormysqlapache-shutdown-unexpectedly"><a class="markdownIt-Anchor" href="#xampp-errormysqlapache-shutdown-unexpectedly"></a> XAMPP - Error:Mysql/Apache shutdown unexpectedly</h1><h3 id="xampp启动apache或mysql时显示错误"><a class="markdownIt-Anchor" href="#xampp启动apache或mysql时显示错误"></a> XAMPP启动Apache或Mysql时显示错误：</h3><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200104181119.png" alt="" /></p><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法：</h3><h4 id="apache"><a class="markdownIt-Anchor" href="#apache"></a> Apache</h4><p>一般报该错误都是端口被占用导致的。例如：如果装了VM虚拟机那会和443端口产生冲突。</p><p>可以在<code>cmd</code>中输入<code>netstat -ano</code>来查看端口是否被占用。</p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200104182210.png" alt="" /></p><p>修改<code>httpd.conf</code>中的<code>Listen 80</code>端口号为其他没被占用的端口号 。同理，修改<code>httpd-ssl.conf</code>中的<code>Listen 443</code>端口号。</p><p>重启即可。</p><h4 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> Mysql</h4><p>第一种：将<code>/xampp/mysql/backup</code>里的所有文件都复制粘贴到<code>/xampp/mysql/data</code>中，重启即可。</p><p>第二种：将<code>/xampp/mysql/data</code>下的<code>ibdata1</code>文件删掉，重启（可能会失败）。</p><p>第三种：在<code>/xampp/mysql/bin/my.ini</code> 文件中添加</p><p><strong>[mysqld]<br />innodb_force_recovery = 4</strong></p><p>重启（可能会失败）。</p><p>第四种：利用管理员进入cmd，进入到<code>/xampp/mysql/bin</code>目录下，输入<code>mysqld --install</code>，再输入<code>net start mysql</code>。如果能正常启动，则成功（可能会失败）。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>数据库知识很重要！！！</p>]]></content>
      
      
      <categories>
          
          <category> Error Collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XAMPP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github搭建图床</title>
      <link href="2019/12/22/docs/%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>2019/12/22/docs/%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="利用github搭建图床"><a class="markdownIt-Anchor" href="#利用github搭建图床"></a> 利用github搭建图床</h1><h2 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h2><p>图床就是自动把<code>本地图片</code>转换成各种格式的<code>链接</code>的一种。</p><p>在写markdown时可以方便的插入图片，即使将markdwon分享给别人，别人也能够查看到图片。</p><a id="more"></a><h2 id="二-搭建步骤"><a class="markdownIt-Anchor" href="#二-搭建步骤"></a> 二、搭建步骤</h2><h3 id="1-下载picgo"><a class="markdownIt-Anchor" href="#1-下载picgo"></a> 1. 下载PicGo</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>windows用户直接下载.exe可执行文件；mac用户下载dmg。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222174633.png" style="zoom: 80%;" /><h3 id="2-配置github仓库"><a class="markdownIt-Anchor" href="#2-配置github仓库"></a> 2. 配置github仓库</h3><p>1）在自己的github中新建一个仓库（仓库名可自定义，尽量简单不要出现空格）。</p><p>2）进入个人中心的<code>settings/Developer settings/Personal access tokens</code></p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222175705.png" style="zoom:80%;" /><p>3）点击<code>Generate new token</code>。生成token这样方便我们通过PicGo来快捷的上传图片到github仓库。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222175806.png" style="zoom:80%;" /><p>4）勾选上<code>repo</code>！！！（一定不要忘了勾上），填写<code>Note注释</code>，点击<code>Generate</code>。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180023.png" style="zoom:80%;" /><p>5）将<code>token</code>复制到其他地方保存起来，这个token只显示一次。<img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180544.png" style="zoom:80%;" /></p><h3 id="3-配置picgo"><a class="markdownIt-Anchor" href="#3-配置picgo"></a> 3. 配置PicGo</h3><p>进入<code>图床设置</code>下的<code>GitHub图床</code></p><ul><li><p>设定仓库名：github用户名/新建的仓库名</p></li><li><p>设定分支名：master</p></li><li><p>设定Token：刚刚保存的Token</p></li><li><p>设定存储路径：可以不用设置</p></li><li><p>设定自定义域名：<code>https://cdn.jsdelivr.net/gh/github用户名/新建的仓库名</code></p><p>上传至github会比较慢，可以通过免费的开源CDN，这样上传的会比较快。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180918.png" style="zoom:80%;" /><h2 id="三-测试"><a class="markdownIt-Anchor" href="#三-测试"></a> 三、测试</h2><h3 id="1-上传方式"><a class="markdownIt-Anchor" href="#1-上传方式"></a> 1. 上传方式</h3><p>1）通过快捷键上传</p><p>在<code>PicGo设置</code>中修改<code>上传快捷键</code>。每次截完图之后，可以通过快捷键上传图片。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222182950.png" style="zoom:80%;" /><p>2）通过上传区上传</p><p>直接将图片拖到框中即可上传。</p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222183250.png" alt="" /></p><h3 id="2-选择各种格式链接"><a class="markdownIt-Anchor" href="#2-选择各种格式链接"></a> 2. 选择各种格式链接</h3><p>在<code>相册</code>中可以选择各种格式的链接。</p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222183805.png" alt="" /></p><h2 id="四-总结"><a class="markdownIt-Anchor" href="#四-总结"></a> 四、总结</h2><p>图床工具其实就是将本地图片上传至远程仓库上（也可以说是服务器），帮助我们生成各种链接。这样我们就可以</p><p>通过各种链接来查看图片。所以，不仅仅是可以通过github来搭建图床，也可以通过微博、腾讯云COS、阿里云OSS、七牛等来搭建图床。</p>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCSS</title>
      <link href="2019/10/01/CSS/Sass/"/>
      <url>2019/10/01/CSS/Sass/</url>
      
        <content type="html"><![CDATA[<h1 id="scss"><a class="markdownIt-Anchor" href="#scss"></a> SCSS</h1><h2 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/Scss.png" alt="" /></p><a id="more"></a><h2 id="一-注释"><a class="markdownIt-Anchor" href="#一-注释"></a> 一、 注释</h2><ul><li><code>/* */</code>: 编译后保留,压缩不保留</li><li><code>//</code>: 编译后不保留</li><li><code>/*!*/</code>: 编译后,压缩后都保留</li></ul><h2 id="二-嵌套"><a class="markdownIt-Anchor" href="#二-嵌套"></a> 二、嵌套</h2><blockquote><ul><li><p>父选择器(<code>&amp;</code>)</p></li><li><p>属性嵌套</p></li></ul></blockquote><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: green;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp; &amp;-text &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*嵌套属性*/</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  text: &#123;</span><br><span class="line">    align: center;</span><br><span class="line">    decoration: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.nav-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*嵌套属性*/</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-变量"><a class="markdownIt-Anchor" href="#三-变量"></a> 三、变量</h2><ul><li><code>$</code>定义变量</li><li>插值语法<code>#&#123;$var&#125;</code></li><li>变量支持块级作用域</li></ul><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$success</span>: <span class="number">#000</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    &amp; &amp;-#&#123;success&#125;&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.button .button-success &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="四-rules"><a class="markdownIt-Anchor" href="#四-rules"></a> 四、@rules</h2><h3 id="1-混合指令-mixininclude"><a class="markdownIt-Anchor" href="#1-混合指令-mixininclude"></a> 1. 混合指令: @mixin&amp;@include</h3><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">@mixin</span> btn(<span class="variable">$color</span>, <span class="variable">$bgColor</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bgColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="selector-class">.btn-warning</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> btn(<span class="number">#fff</span>, <span class="number">#f00</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> btn(<span class="variable">$bgColor</span>: green, <span class="variable">$color</span>: <span class="number">#000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-warning</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-warning</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-success</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-继承-extend"><a class="markdownIt-Anchor" href="#2-继承-extend"></a> 2. 继承: @extend</h3><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .btn;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span>, </span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-导入-import"><a class="markdownIt-Anchor" href="#3-导入-import"></a> 3. 导入: @import</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;filename&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>创建文件时使用<code>_</code>开头命名</p></li><li><p>导入时省略<code>_</code></p></li><li><p><code>_</code>作用：当有<code>scss文件</code>不想编译时单独转成<code>css文件</code>，可以使用<code>Partials</code>方式命名文件，使得其不会被单独转成css文件。</p></li></ul></blockquote><h3 id="4-自定义函数-function"><a class="markdownIt-Anchor" href="#4-自定义函数-function"></a> 4. 自定义函数: @function</h3><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">&quot;light&quot;</span>: <span class="number">#eee</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">@function</span> getColor(<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> map-get(<span class="variable">$colors</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: getColor(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: <span class="number">#eee</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="五-数据类型"><a class="markdownIt-Anchor" href="#五-数据类型"></a> 五、数据类型</h2><blockquote><p>检测方法: <code>type-of()</code></p></blockquote><h3 id="1-number"><a class="markdownIt-Anchor" href="#1-number"></a> 1. number</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">5</span>;</span><br><span class="line"><span class="variable">$width</span>: <span class="number">50px</span>;</span><br></pre></td></tr></table></figure><p>内置函数：</p><ul><li><p>percentage()</p></li><li><p>round()</p></li><li><p>ceil()</p></li><li><p>floor()</p></li><li><p>abs()</p></li><li><p>min()</p></li><li><p>max()</p></li><li><p>random()</p></li></ul><h3 id="2-bool"><a class="markdownIt-Anchor" href="#2-bool"></a> 2. bool</h3><p><code>true，false</code></p><h3 id="3-string"><a class="markdownIt-Anchor" href="#3-string"></a> 3. string</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>: <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 有引号</span></span><br><span class="line"><span class="variable">$str</span>: hello;   <span class="comment">// 无引号</span></span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>to-upper-case()</li><li>to-lower-case()</li><li>str-length()</li></ul><h3 id="4-color"><a class="markdownIt-Anchor" href="#4-color"></a> 4. color</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"><span class="variable">$color</span>: <span class="number">#000</span>;</span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>lighten()</li><li>darken()</li></ul><h3 id="5-list"><a class="markdownIt-Anchor" href="#5-list"></a> 5. list</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list</span>: (<span class="number">10px</span>, <span class="string">&#x27;string&#x27;</span>, red);</span><br><span class="line"><span class="variable">$list</span>: (<span class="number">10px</span> <span class="string">&#x27;string&#x27;</span> red);</span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>length()</li><li>nth()</li><li>append()</li><li>index()</li><li>join()</li></ul><h3 id="6-map"><a class="markdownIt-Anchor" href="#6-map"></a> 6. map</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span>: (top: <span class="number">1px</span>, bottom: <span class="number">2px</span>, left: <span class="number">3px</span>, right: <span class="number">4px</span>);</span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>map-get()：查找键值</li><li>map-keys()：</li><li>map-values()</li><li>map-has-key()</li><li>map-merge()：合并map</li><li>map-remove()</li></ul><h2 id="六-运算符"><a class="markdownIt-Anchor" href="#六-运算符"></a> 六、运算符</h2><ul><li>算术: <code>+</code> <code>-</code> <code>*</code> <code>/</code></li><li>逻辑: <code>and</code> <code>or</code> <code>not</code></li><li>关系: <code>&gt;</code> <code>&lt;</code> <code>==</code> <code>&gt;=</code> <code>&lt;=</code></li></ul><h2 id="七-流程控制"><a class="markdownIt-Anchor" href="#七-流程控制"></a> 七、流程控制</h2><h3 id="1-条件"><a class="markdownIt-Anchor" href="#1-条件"></a> 1. 条件:</h3><h4 id="if"><a class="markdownIt-Anchor" href="#if"></a> @if</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@if</span> 条件&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">@else</span> if 条件&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">@else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环-foreachwhile"><a class="markdownIt-Anchor" href="#2-循环-foreachwhile"></a> 2. 循环: @for&amp;@each&amp;@while</h3><h4 id="1for"><a class="markdownIt-Anchor" href="#1for"></a> 1）@for</h4><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.button-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button-1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2each"><a class="markdownIt-Anchor" href="#2each"></a> 2）@each</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$value</span> in <span class="variable">$list</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>,<span class="variable">$value</span> in <span class="variable">$map</span></span><br></pre></td></tr></table></figure><h4 id="3while"><a class="markdownIt-Anchor" href="#3while"></a> 3）@while</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@while</span> <span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八-异常"><a class="markdownIt-Anchor" href="#八-异常"></a> 八、异常</h2><ul><li>@warn</li><li>@error</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的for和break</title>
      <link href="2019/08/08/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84break/"/>
      <url>2019/08/08/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84break/</url>
      
        <content type="html"><![CDATA[<h1 id="有趣的for和break"><a class="markdownIt-Anchor" href="#有趣的for和break"></a> 有趣的for和break</h1><p>提起<code>for循环</code>和<code>break</code>想必大家都不陌生了，但你可能并不知道for循环还能命名，break还能终止指定名字的for循环。<a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i,j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>从运行结果来看，这和我们平常写的for循环没什么两样，只不过在for前面加了个<code>自定义的名字</code>。</p><p>当满足某个条件时，我们想要终止<code>内层循环</code>时，可以这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="built_in">console</span>.log(i,j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果要终止<code>外层循环</code>呢？这时候我们自定义的名字就起作用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">break</span> outLoop</span><br><span class="line">      <span class="built_in">console</span>.log(i,j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>当然我们也可以用<code>boolean</code>和<code>break</code>的组合来代替命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; !flag; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：当只写一个break时，默认是终止最靠近的for循环；当在break后追加一个名字时，就会终止指定名字的for循环。其实为for循环命名也叫添加标号label（标签），其他语言里面也有类似的设计，比如C可以用goto，Java的break（虽然Java保留了goto关键字，但不允许使用）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令总结</title>
      <link href="2019/05/04/Version%20Manager%20Tools/Git/"/>
      <url>2019/05/04/Version%20Manager%20Tools/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用命令总结"><a class="markdownIt-Anchor" href="#git常用命令总结"></a> Git常用命令总结</h1><h2 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20210109153906.png" alt="" /></p><a id="more"></a><h2 id="一-配置"><a class="markdownIt-Anchor" href="#一-配置"></a> 一、 配置</h2><h3 id="1-config"><a class="markdownIt-Anchor" href="#1-config"></a> 1. config</h3><h4 id="1-配置作用域"><a class="markdownIt-Anchor" href="#1-配置作用域"></a> (1) 配置作用域</h4><ul><li>–system：对系统所有登录的用户有效</li><li>–global：对当前用户所有仓库有效</li><li>–local：只对某个仓库有效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;your_name&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;your_email@domain.com&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置查看"><a class="markdownIt-Anchor" href="#2-配置查看"></a> (2) 配置查看</h4><ul><li>–list [–global | --local | --system]</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br><span class="line">git config --list --global</span><br></pre></td></tr></table></figure><h4 id="3-配置命令别名"><a class="markdownIt-Anchor" href="#3-配置命令别名"></a> (3) 配置命令别名</h4><ul><li>alias</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.s status </span><br></pre></td></tr></table></figure><h3 id="2-gitignore文件"><a class="markdownIt-Anchor" href="#2-gitignore文件"></a> 2. .gitignore文件</h3><p>添加到暂存区时忽略此文件中所包含的文件。</p><ul><li>*：任意</li><li>!：取反</li><li>**：多级</li><li>/：根目录</li></ul><h3 id="3-gitkeeper文件"><a class="markdownIt-Anchor" href="#3-gitkeeper文件"></a> 3. .gitkeeper文件</h3><p>一个空文件，用来防止空文件夹被忽略</p><h3 id="4-git文件夹"><a class="markdownIt-Anchor" href="#4-git文件夹"></a> 4 .git文件夹</h3><h4 id="1-文件"><a class="markdownIt-Anchor" href="#1-文件"></a> (1) 文件</h4><ul><li>HEAD：存储当前分支的引用</li><li>config：存储local config</li></ul><h4 id="2-文件夹"><a class="markdownIt-Anchor" href="#2-文件夹"></a> (2) 文件夹</h4><ul><li>refs<ul><li>head：存储所有分支（commit）的引用</li><li>tags：存储所有的tag引用</li></ul></li><li>objects：所有分支文件树(tree,blob,commit)</li><li>hooks：各种钩子函数，如pre-commit等钩子函数，需要手动安装，可以使用集成的<code>husky</code>包。配合eslint使用可以达到commit等命令的时候，检查代码。</li></ul><h4 id="3-cat-file"><a class="markdownIt-Anchor" href="#3-cat-file"></a> (3) cat-file</h4><ul><li>查看文件类型（commit | tag | tree | blob）：<code>git cat-file -t &lt;hashID&gt;</code></li><li>查看文件内容：<code>git cat-file -p &lt;hashID&gt;</code></li></ul><h3 id="5-ssh"><a class="markdownIt-Anchor" href="#5-ssh"></a> 5. SSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@domain.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="二-创建git仓库"><a class="markdownIt-Anchor" href="#二-创建git仓库"></a> 二、 创建Git仓库</h2><ol><li>初始化：<code>git init [project_name]</code></li><li>克隆：<code>git clone &lt;url&gt;</code></li></ol><h2 id="三-工作区"><a class="markdownIt-Anchor" href="#三-工作区"></a> 三、 工作区</h2><h3 id="1-工作区-暂存区"><a class="markdownIt-Anchor" href="#1-工作区-暂存区"></a> 1. 工作区 -&gt; 暂存区</h3><ul><li>添加文件：<ul><li><code>git add &lt;file&gt;</code>：添加工作区文件 —&gt; 暂存区</li><li><code>git add -u</code>：更新已在暂存区中的文件</li></ul></li><li>更新暂存区文件名：<code>git mv &lt;old_file&gt; &lt;new_file&gt;</code></li><li>删除文件：<code>git rm [--cached] &lt;file&gt;</code></li></ul><h3 id="2-stash"><a class="markdownIt-Anchor" href="#2-stash"></a> 2. stash</h3><ul><li>存储当前工作区：<code>git stash</code></li><li>显示存储区记录列表：<code>git stash list</code></li><li>恢复存储区最新的一条记录：<code>git stash apply</code></li><li>删除存储区记录：<code>git stash drop &lt;stash@&#123;&#125;&gt;</code></li><li>恢复并删除存储区最新的一条记录：<code>git stash pop</code></li></ul><h3 id="3-撤销工作区的修改"><a class="markdownIt-Anchor" href="#3-撤销工作区的修改"></a> 3. 撤销工作区的修改</h3><ul><li><code>git checkout -- &lt;file&gt;</code></li><li><code>git restore &lt;file&gt;</code></li></ul><p>两种方式都可以，推荐使用restore。</p><h2 id="四-暂存区"><a class="markdownIt-Anchor" href="#四-暂存区"></a> 四、暂存区</h2><h3 id="1-暂存区-本地仓库"><a class="markdownIt-Anchor" href="#1-暂存区-本地仓库"></a> 1. 暂存区 -&gt; 本地仓库</h3><ul><li><code>git commit -m &quot;description&quot;</code></li></ul><h3 id="2-撤销暂存区文件至工作区"><a class="markdownIt-Anchor" href="#2-撤销暂存区文件至工作区"></a> 2. 撤销暂存区文件至工作区</h3><ul><li><code>git reset HEAD &lt;file&gt;</code>：相当于<code>git reset --mixed HEAD &lt;file&gt;</code></li><li><code>git restore --staged &lt;file&gt;</code></li></ul><p>两种都可以，推荐使用restore</p><h2 id="五-本地仓库"><a class="markdownIt-Anchor" href="#五-本地仓库"></a> 五、本地仓库</h2><h3 id="1-修改最新一次commit的description"><a class="markdownIt-Anchor" href="#1-修改最新一次commit的description"></a> 1. 修改最新一次commit的description</h3><ul><li><code>git commit --amend</code>：相当于<code>git reset --soft HEAD^ + git commit</code></li></ul><h3 id="2-修改合并commit"><a class="markdownIt-Anchor" href="#2-修改合并commit"></a> 2. 修改/合并commit</h3><p>(1) <code>git rebase -i &lt;hashI&gt;</code>：hashID为要修改的commit的父hashID</p><ul><li><p>r 修改历史commit的description</p></li><li><p>s 合并多个连续/非连续的commit</p></li><li><p><code>git rebase --abort</code>：放弃rebase操作</p></li></ul><p>(2) <code>git rebase -i --root</code>：修改第一次commit的description</p><p>(3) <code>git rebase &lt;branch_name&gt;</code>：将分支的分叉点移到最新的commit位置</p><p>如防止主分支log时分叉：</p><ul><li>dev：git rebase master</li><li>master：git merge dev</li></ul><h3 id="3-撤销commit"><a class="markdownIt-Anchor" href="#3-撤销commit"></a> 3. 撤销commit</h3><ul><li><code>git reset --soft &lt;hashID | HEAD^&gt;</code>：回到已经添加到暂存区的状态</li><li><code>git reset --mixed &lt;hashID | HEAD^&gt;</code>：回到修改后的工作区的状态(如果不加 --mixed，则默认就是 --mixed)</li><li><code>git reset --hard &lt;hashID | HEAD^&gt;</code>：回到未修改时工作区的状态</li></ul><p>撤销reset操作：</p><ul><li><code>git reflog</code>查看</li><li><code>git reset &lt;HEAD@&#123;&#125;&gt;</code></li></ul><h3 id="4-给commit设置标签"><a class="markdownIt-Anchor" href="#4-给commit设置标签"></a> 4. 给commit设置标签</h3><ul><li>查看标签：<code>git tag</code></li><li>添加标签：<code>git tag &lt;tag_version&gt; [hashID]</code></li><li>删除标签：<code>git tag -d &lt;tag_version&gt;</code></li><li>显示指定标签的commit信息：<code>git show &lt;tag_version&gt;</code></li></ul><h2 id="六-工作区-暂存区和本地仓库的观察者"><a class="markdownIt-Anchor" href="#六-工作区-暂存区和本地仓库的观察者"></a> 六、工作区、暂存区和本地仓库的“观察者”</h2><h3 id="1-status"><a class="markdownIt-Anchor" href="#1-status"></a> 1. status</h3><p>查看工作区和暂存区的状态：<code>git status</code></p><h3 id="2-log"><a class="markdownIt-Anchor" href="#2-log"></a> 2. log</h3><p>查看commit日志：<code>git log</code></p><ul><li>git log --oneline：每条日志显示一行</li><li>git log -n2：显示最近2次的日志</li><li>git log -all：查看所有分支日志</li><li>git log --graph：图形化显示日志</li></ul><blockquote><p>美化log：<code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit&quot;</code></p></blockquote><h3 id="3-reflog"><a class="markdownIt-Anchor" href="#3-reflog"></a> 3. reflog</h3><p>查看commit日志，包括删除的和reset的：<code>git reflog</code></p><h3 id="4-diff"><a class="markdownIt-Anchor" href="#4-diff"></a> 4. diff</h3><h4 id="1-工作区-vs-暂存区"><a class="markdownIt-Anchor" href="#1-工作区-vs-暂存区"></a> (1) 工作区 VS 暂存区</h4><ul><li><p><code>git diff</code>：比较工作区和暂存区之间的区别</p></li><li><p><code>git diff -- &lt;file1&gt; &lt;file2&gt;</code>：比较工作区和暂存区之间某文件的区别</p></li></ul><h4 id="2-暂存区-vs-commit"><a class="markdownIt-Anchor" href="#2-暂存区-vs-commit"></a> (2) 暂存区 VS commit</h4><p><code>git diff --cached</code> ：比较暂存区和HEAD之间的区别</p><h4 id="3-commit-vs-commit"><a class="markdownIt-Anchor" href="#3-commit-vs-commit"></a> (3) commit VS commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较commit之间的区别</span></span><br><span class="line">git diff &lt;hashID1&gt; &lt;hashID2&gt;</span><br><span class="line">git diff HEAD HEAD^</span><br><span class="line">git diff HEAD HEAD^^</span><br><span class="line">git diff HEAD HEAD~2</span><br></pre></td></tr></table></figure><h4 id="4-branch-vs-branch"><a class="markdownIt-Anchor" href="#4-branch-vs-branch"></a> (4) branch VS branch</h4><p><code>git diff &lt;branch_name1&gt;&lt;branch_name2&gt; -- &lt;file1&gt; &lt;file2&gt;</code> ：比较不同分支之间某个文件的区别</p><h2 id="七-分支"><a class="markdownIt-Anchor" href="#七-分支"></a> 七、分支</h2><h3 id="1-branch"><a class="markdownIt-Anchor" href="#1-branch"></a> 1. branch</h3><ul><li>创建分支：<code>git branch &lt;branch_name&gt;</code></li><li>删除分支：<ul><li><code>git branch -d &lt;branch_name&gt;</code>：普通删除分支</li><li><code>git branch -D &lt;branch_name&gt;</code>  ：强制删除分支</li></ul></li><li>查看分支：<ul><li><code>git branch</code>：查看本地分支</li><li><code>git branch -v</code>：查看本地分支及版本信息</li><li><code>git branch -a</code>：查看本地+远程分支</li><li><code>git branch --merged</code>：查看已合并到当前分支的分支</li><li><code>git branch --no-merged</code>：查看未合并到当前分支的分支</li></ul></li></ul><h3 id="2-checkout"><a class="markdownIt-Anchor" href="#2-checkout"></a> 2. checkout</h3><ul><li>切换分支：<code>git checkout &lt;branch_name&gt;</code></li><li>创建并切换分支：<code>git checkout -b &lt;branch_name | tag&gt;</code></li></ul><h3 id="3-merge"><a class="markdownIt-Anchor" href="#3-merge"></a> 3. merge</h3><p>合并分支：<code>git merge &lt;branch_name&gt;</code></p><h2 id="八-远程仓库"><a class="markdownIt-Anchor" href="#八-远程仓库"></a> 八、远程仓库</h2><h3 id="1-remote"><a class="markdownIt-Anchor" href="#1-remote"></a> 1. remote</h3><ul><li>查看添加的远程仓库：<code>git remote -v</code></li><li>添加远程仓库：<code>git remote add &lt;origin&gt; &lt;url&gt;</code></li><li>列出远程已经被删除但本地存在的分支：<code>git remote prune origin --dry-run</code></li><li>删除远程已经被删除但本地存在的分支：<code>git remote prune origin</code></li></ul><h3 id="2-push"><a class="markdownIt-Anchor" href="#2-push"></a> 2. push</h3><ul><li>首次推送并关联远程分支：<code>git push -u &lt;origin&gt; &lt;本地分支名&gt;[:&lt;远程分支名&gt;]</code>。 (-u 相当于 --set-upstream：关联本地的仓库分支和本地的远程仓库分支)</li><li>推送并删除远程分支：<code>git push &lt;origin&gt; --delete &lt;branch_name&gt;</code></li></ul><h3 id="3-fetch"><a class="markdownIt-Anchor" href="#3-fetch"></a> 3. fetch</h3><p>拉取远程仓库到本地的远程仓库：<code>git fetch &lt;origin&gt;/[branch]</code></p><h3 id="4-pull"><a class="markdownIt-Anchor" href="#4-pull"></a> 4. pull</h3><p>拉取远程仓库分支并合并到本地分支(相当于 fetch + merge)：<code>git pull &lt;origin&gt; &lt;远程分支名&gt;[:&lt;本地分支名&gt;]</code></p><h2 id="九-可视化管理工具"><a class="markdownIt-Anchor" href="#九-可视化管理工具"></a> 九、可视化管理工具</h2><p>安装完git之后，会提供一个自带的可视化管理工具，只需输入<code>gitk -all</code>命令即可打开。当然也有许多其他可视化工具，如sourcetree、tortoise等。</p>]]></content>
      
      
      <categories>
          
          <category> 版本管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用手册</title>
      <link href="2019/04/30/docs/Typora%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>2019/04/30/docs/Typora%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一级标题-标题"><a class="markdownIt-Anchor" href="#一级标题-标题"></a> 一级标题 <code># 标题</code></h1><h2 id="二级标题-标题"><a class="markdownIt-Anchor" href="#二级标题-标题"></a> 二级标题 <code>## 标题</code></h2><h3 id="三级标题-标题"><a class="markdownIt-Anchor" href="#三级标题-标题"></a> 三级标题 <code>### 标题</code></h3><h4 id="四级标题-标题"><a class="markdownIt-Anchor" href="#四级标题-标题"></a> 四级标题 <code>#### 标题</code></h4><h5 id="五级标题-标题"><a class="markdownIt-Anchor" href="#五级标题-标题"></a> 五级标题 <code>##### 标题</code></h5><a id="more"></a><h6 id="六级标题-标题"><a class="markdownIt-Anchor" href="#六级标题-标题"></a> 六级标题 <code>###### 标题</code></h6><h3 id="分割线-"><a class="markdownIt-Anchor" href="#分割线-"></a> 分割线 <code>---</code></h3><hr /><h3 id="阅读更多-more-"><a class="markdownIt-Anchor" href="#阅读更多-more-"></a> 阅读更多<code>&lt;!--more--&gt;</code></h3><h3 id="注释引用"><a class="markdownIt-Anchor" href="#注释引用"></a> 注释/引用 <code>&gt;</code></h3><blockquote></blockquote><h3 id="无序列表-或-"><a class="markdownIt-Anchor" href="#无序列表-或-"></a> 无序列表 <code>*</code>或<code>-</code></h3><ul><li></li></ul><h3 id="有序列表-1"><a class="markdownIt-Anchor" href="#有序列表-1"></a> 有序列表 <code>1.</code></h3><ol><li></li></ol><h3 id="插入图片-名字图片地址或-ctrlshifti-或img-src-alt-width"><a class="markdownIt-Anchor" href="#插入图片-名字图片地址或-ctrlshifti-或img-src-alt-width"></a> 插入图片 <code>![名字](图片地址)</code>或 Ctrl+shift+i 或<code>&lt;img src='' alt='' width=''&gt;</code></h3><p><img src="http://pic1.nipic.com/2008-12-30/200812308231244_2.jpg" alt="风景" /></p><h3 id="代码块-javascript"><a class="markdownIt-Anchor" href="#代码块-javascript"></a> 代码块 ```javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="粗体-文字"><a class="markdownIt-Anchor" href="#粗体-文字"></a> 粗体 <code>**文字**</code></h3><p><strong>粗体</strong></p><h3 id="斜体-文字"><a class="markdownIt-Anchor" href="#斜体-文字"></a> 斜体 <code>*文字*</code></h3><p><em>斜体</em></p><h3 id="粗体并斜体-文字"><a class="markdownIt-Anchor" href="#粗体并斜体-文字"></a> 粗体并斜体 <code>***文字***</code></h3><p><strong><em>粗体并斜体</em></strong></p><h3 id="删除线-~~文字~~"><a class="markdownIt-Anchor" href="#删除线-~~文字~~"></a> 删除线 <code>~~文字~~</code></h3><p><s>文字</s></p><h3 id="表格-ctrl-t"><a class="markdownIt-Anchor" href="#表格-ctrl-t"></a> 表格 Ctrl + T</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="插入链接-或-ctrlk"><a class="markdownIt-Anchor" href="#插入链接-或-ctrlk"></a> 插入链接 <code>[]()</code>或 Ctrl+k</h3><p><a href="www.baidu.com">Baidu</a></p><h3 id="todo-list-不勾选"><a class="markdownIt-Anchor" href="#todo-list-不勾选"></a> todo list <code>- [ ]不勾选</code></h3><ul><li>[ ] 勾选</li></ul><h3 id="complete-list-x勾选"><a class="markdownIt-Anchor" href="#complete-list-x勾选"></a> complete list <code>- [ x]勾选</code></h3><ul><li>[x] 不勾选</li></ul><h3 id="注释3"><a class="markdownIt-Anchor" href="#注释3"></a> 注释<code>[^3]</code></h3><p>注释注释<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h3 id="emojismile"><a class="markdownIt-Anchor" href="#emojismile"></a> emoji<code>:smile</code></h3><p>😄</p><h3 id="目录toc"><a class="markdownIt-Anchor" href="#目录toc"></a> 目录<code>[toc]</code></h3><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>test <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet使用手册</title>
      <link href="2019/04/30/docs/Emmet%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>2019/04/30/docs/Emmet%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="后代"><a class="markdownIt-Anchor" href="#后代"></a> 后代：&gt;</h3><p><strong>缩写</strong>：nav&gt;ul&gt;li</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟"><a class="markdownIt-Anchor" href="#兄弟"></a> 兄弟：+</h3><p><strong>缩写</strong>：div+p+bq</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="上级"><a class="markdownIt-Anchor" href="#上级"></a> 上级：^</h3><p><strong>缩写</strong>：div+div&gt;p&gt;span+em^bq</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分组"><a class="markdownIt-Anchor" href="#分组"></a> 分组：()</h3><p><strong>缩写</strong>：div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法：*</h3><p><strong>缩写</strong>：ul&gt;li*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自增符号"><a class="markdownIt-Anchor" href="#自增符号"></a> 自增符号：$</h3><p><strong>缩写</strong>：ul&gt;li.item$*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：h<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>t</mi><mi>i</mi><mi>t</mi><mi>l</mi><mi>e</mi><mo>=</mo><mi>i</mi><mi>t</mi><mi>e</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">[title=item</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span></span></span></span>]{Header $}*3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">title</span>=<span class="string">&quot;item3&quot;</span>&gt;</span>Header 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$$$*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$$$*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$@-*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$@3*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id-和类属性"><a class="markdownIt-Anchor" href="#id-和类属性"></a> ID 和类属性</h3><p><strong>缩写</strong>：#header</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：.title</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：form#search.wide</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：p.class1.class2.class3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2 class3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义属性"><a class="markdownIt-Anchor" href="#自定义属性"></a> 自定义属性</h3><p><strong>缩写</strong>：p[title=“Hello world”]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;Hello world&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">ht</span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：td[rowspan=2 colspan=3 title]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：[a=‘value1’ b=“value2”]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;value1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;value2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本"><a class="markdownIt-Anchor" href="#文本"></a> 文本：{}</h3><p><strong>缩写</strong>：a{Click me}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：p&gt;{Click }+a{here}+{ to continue}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to continue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="隐式标签"><a class="markdownIt-Anchor" href="#隐式标签"></a> 隐式标签</h3><p><strong>缩写</strong>：.class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：em&gt;.class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;.class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：table&gt;.row&gt;.col</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
