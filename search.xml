<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>3个O(nlogn)排序</title>
      <link href="2020/12/24/Algorithm/3%E4%B8%AAO(nlogn)%E6%8E%92%E5%BA%8F/"/>
      <url>2020/12/24/Algorithm/3%E4%B8%AAO(nlogn)%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="3个onlogn排序"><a class="markdownIt-Anchor" href="#3个onlogn排序"></a> 3个O(nlogn)排序</h1><h2 id="一-helperjs"><a class="markdownIt-Anchor" href="#一-helperjs"></a> 一、helper.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    testTimes: <span class="number">50000</span>,</span><br><span class="line">    maxSize: <span class="number">100</span>,</span><br><span class="line">    maxValue: <span class="number">100</span>,</span><br><span class="line">    spendTime: <span class="number">0</span>,</span><br><span class="line">    isSuccess: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; options.testTimes; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.isSuccess) &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = generateRandomArray(options.maxSize, options.maxValue)</span><br><span class="line">      <span class="keyword">const</span> copiedArray = copyArray(arr)</span><br><span class="line">      builtInSort(arr)</span><br><span class="line">      testSortAndRecordTime(fn, copiedArray, options)</span><br><span class="line">      <span class="keyword">const</span> isSuccess = isSorted(arr, copiedArray)</span><br><span class="line">      <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">        options.isSuccess = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (options.isSuccess) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nice!!!&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fn.name&#125;</span>: testTimes: <span class="subst">$&#123;options.testTimes&#125;</span>次, averageSpendTime: <span class="subst">$&#123;options.spendTime / options.testTimes&#125;</span>ms`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">    options.maxSize = <span class="number">5</span></span><br><span class="line">    options.maxValue = <span class="number">10</span></span><br><span class="line">    debugFn(fn, options.maxSize, options.maxValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机数组</span></span><br><span class="line"><span class="comment"> * 容量为[0,maxSize]</span></span><br><span class="line"><span class="comment"> * 取值范围在[-maxValue,+maxValue],</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span> (<span class="params">maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(~~(<span class="built_in">Math</span>.random() * (maxSize + <span class="number">1</span>)))</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (~~(<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>))) - (~~(<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyArray</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.slice(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内置排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">builtInSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试待排序的数组并记录执行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testSortAndRecordTime</span> (<span class="params">fn, data, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  fn(data)</span><br><span class="line">  <span class="keyword">const</span> end = <span class="built_in">Date</span>.now()</span><br><span class="line">  options.spendTime += (end - start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较两个排序,看是否已经有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSorted</span> (<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr1.length &amp;&amp; !arr2.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (!arr1.length || !arr2.length || arr1.length !== arr2.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.length; i++)</span><br><span class="line">    <span class="keyword">if</span> (arr1[i] !== arr2[i])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调试排序函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugFn</span> (<span class="params">fn, maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = generateRandomArray(maxSize, maxValue)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>, arr)</span><br><span class="line">  fn(arr)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中的两个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有当 i !== j 时才可以</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">  <span class="comment">// arr[j] ^= arr[i]</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成一个[start,end]的n个元素的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const generateRandomArray = (n, start, end) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  const arr = []</span></span><br><span class="line"><span class="comment">  for (let i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="comment">    arr.push(~~(Math.random() * (end - start + 1) + start))</span></span><br><span class="line"><span class="comment">  return arr</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; test, swap &#125;</span><br></pre></td></tr></table></figure><h2 id="二-快速排序"><a class="markdownIt-Anchor" href="#二-快速排序"></a> 二、快速排序</h2><p>快速排序——每次选取一个基准值,将数组分为小于基准值和大于基准值的两部分,再重复之前的递归操作</p><ul><li>不稳定</li><li>O(nlogn)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  _quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对arr[low...high]进行快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = _partition(arr, low, high)</span><br><span class="line">  _quickSort(arr, low, p - <span class="number">1</span>)</span><br><span class="line">  _quickSort(arr, p + <span class="number">1</span>, high)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_partition</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">  <span class="comment">// arr[low+1...j] &lt; pivot ; arr[j+1...i) &gt; pivot</span></span><br><span class="line">  <span class="keyword">let</span> j = low</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = low + <span class="number">1</span>; i &lt;= high; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      swap(arr, i, j + <span class="number">1</span>)</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, low, j)</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化+双路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (high - low &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">    insertSort(arr, low, high)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = _partition(arr, low, high)</span><br><span class="line">  _quickSort(arr, low, p - <span class="number">1</span>)</span><br><span class="line">  _quickSort(arr, p + <span class="number">1</span>, high)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt; l &amp;&amp; arr[j - <span class="number">1</span>] &gt; e; j--)</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">    arr[j] = e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_partition</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 选取随机的位置作为pivot,防止存在近乎有序的数组</span></span><br><span class="line">  swap(arr, low, ~~(<span class="built_in">Math</span>.random() * (high - low + <span class="number">1</span>) + low))</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) high--</span><br><span class="line">    arr[low] = arr[high]</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt; pivot) low++</span><br><span class="line">    arr[high] = arr[low]</span><br><span class="line">  &#125;</span><br><span class="line">  arr[low] = pivot</span><br><span class="line">  <span class="keyword">return</span> low</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化_partition</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_partition</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line">  swap(arr, low, ~~(<span class="built_in">Math</span>.random() * (high - low + <span class="number">1</span>) + low)) <span class="comment">// 选取随机的位置作为pivot,防止存在近乎有序的数组</span></span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line">  <span class="comment">// arr[low+1...i] &lt;= pivot ; arr(j...high] &gt;= pivot</span></span><br><span class="line">  <span class="keyword">let</span> i = low + <span class="number">1</span>, j = high</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= high &amp;&amp; arr[i] &lt; pivot) i++</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= low + <span class="number">1</span> &amp;&amp; arr[j] &gt; pivot) j--</span><br><span class="line">    <span class="keyword">if</span> (i &gt; j) <span class="keyword">break</span></span><br><span class="line">    swap(arr, i, j)</span><br><span class="line">    i++</span><br><span class="line">    j--</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, low, j)</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三路快排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort3Ways</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  _quickSort3Ways(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort3Ways</span> (<span class="params">arr, low, high</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (high - low &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">    insertSort(arr, low, high)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// partition</span></span><br><span class="line">  swap(arr, low, ~~(<span class="built_in">Math</span>.random() * (high - low + <span class="number">1</span>) + low))</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lt = low, <span class="comment">// arr[low+1...lt] &lt; pivot  </span></span><br><span class="line">    gt = high + <span class="number">1</span>, <span class="comment">// arr[gt...high] &gt; pivot</span></span><br><span class="line">    i = low + <span class="number">1</span> <span class="comment">// arr[lt+1...i-1] = pivot  </span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      swap(arr, i, lt + <span class="number">1</span>)</span><br><span class="line">      lt++</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">      swap(arr, i, gt - <span class="number">1</span>)</span><br><span class="line">      gt--</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, low, lt)</span><br><span class="line"></span><br><span class="line">  _quickSort(arr, low, lt - <span class="number">1</span>)</span><br><span class="line">  _quickSort(arr, gt, high)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-归并排序"><a class="markdownIt-Anchor" href="#三-归并排序"></a> 三、归并排序</h2><p>归并排序：将原数组分割成一个一个子数组,分别排序子数组,再合并</p><ul><li>稳定</li><li>O(nlogn)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  _mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归调用归并排序，对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_mergeSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">  _mergeSort(arr, l, mid)</span><br><span class="line">  _mergeSort(arr, mid + <span class="number">1</span>, r)</span><br><span class="line">  _merge(arr, l, mid, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将arr[l...mid]和arr[mid+1...r]两部分合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_merge</span> (<span class="params">arr, l, mid, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aux = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l; i &lt;= r; i++)</span><br><span class="line">    aux[i] = arr[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = l, j = mid + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">      arr[k] = aux[j]</span><br><span class="line">      j++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">      arr[k] = aux[i]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i] &lt;= aux[j]) &#123;</span><br><span class="line">      arr[k] = aux[i]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[k] = aux[j]</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_mergeSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (r - l &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">    insertSort(arr, l, r)  <span class="comment">// 1.当数据量小时,转而使用插入会更快</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">  _mergeSort(arr, l, mid)</span><br><span class="line">  _mergeSort(arr, mid + <span class="number">1</span>, r)</span><br><span class="line">  <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) <span class="comment">// 2.如果已经有序,则不合并,否则,合并</span></span><br><span class="line">    _merge(arr, l, mid, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt; l &amp;&amp; arr[j - <span class="number">1</span>] &gt; e; j--)</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">    arr[j] = e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_merge</span> (<span class="params">arr, l, mid, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aux = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = l; i &lt;= r; i++)</span><br><span class="line">    aux[i - l] = arr[i]       <span class="comment">// 3.减少数组空间开销</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = l, j = mid + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">      arr[k] = aux[j - l]</span><br><span class="line">      j++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">      arr[k] = aux[i - l]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &lt;= aux[j - l]) &#123;</span><br><span class="line">      arr[k] = aux[i - l]</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[k] = aux[j - l]</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortNR</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> sz = <span class="number">1</span>; sz &lt;= arr.length; sz *= <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i + sz &lt; arr.length; i += sz * <span class="number">2</span>)</span><br><span class="line">      <span class="comment">//对arr[i...i+sz-1] 和 arr[i+sz ... i+sz+sz -1] 进行归并</span></span><br><span class="line">      _merge(arr, i, i + sz - <span class="number">1</span>, <span class="built_in">Math</span>.min(i + sz * <span class="number">2</span> - <span class="number">1</span>, arr.length - <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-堆排序"><a class="markdownIt-Anchor" href="#四-堆排序"></a> 四、堆排序</h2><p>堆排序：将数组调整成大根堆,每次将第一个元素与最后一个未排好序的元素交换</p><ul><li>不稳定</li><li>O(nlogn)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = ~~((arr.length - <span class="number">1</span>) / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    _shiftDown(arr, i, arr.length)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">    swap(arr, <span class="number">0</span>, j)</span><br><span class="line">    _shiftDown(arr, <span class="number">0</span>, j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_shiftDown</span> (<span class="params">arr, i, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">2</span> * i + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; arr[j + <span class="number">1</span>] &gt; arr[j])</span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[j]) <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    swap(arr, i, j)</span><br><span class="line">    i = j</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3个O(n²)排序</title>
      <link href="2020/12/24/Algorithm/3%E4%B8%AAO(n%C2%B2)%E6%8E%92%E5%BA%8F/"/>
      <url>2020/12/24/Algorithm/3%E4%B8%AAO(n%C2%B2)%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="3个on2排序"><a class="markdownIt-Anchor" href="#3个on2排序"></a> 3个O(n²)排序</h1><h2 id="一-helperjs"><a class="markdownIt-Anchor" href="#一-helperjs"></a> 一、helper.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    testTimes: <span class="number">50000</span>,</span><br><span class="line">    maxSize: <span class="number">100</span>,</span><br><span class="line">    maxValue: <span class="number">100</span>,</span><br><span class="line">    spendTime: <span class="number">0</span>,</span><br><span class="line">    isSuccess: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; options.testTimes; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.isSuccess) &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = generateRandomArray(options.maxSize, options.maxValue)</span><br><span class="line">      <span class="keyword">const</span> copiedArray = copyArray(arr)</span><br><span class="line">      builtInSort(arr)</span><br><span class="line">      testSortAndRecordTime(fn, copiedArray, options)</span><br><span class="line">      <span class="keyword">const</span> isSuccess = isSorted(arr, copiedArray)</span><br><span class="line">      <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">        options.isSuccess = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (options.isSuccess) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nice!!!&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fn.name&#125;</span>: testTimes: <span class="subst">$&#123;options.testTimes&#125;</span>次, averageSpendTime: <span class="subst">$&#123;options.spendTime / options.testTimes&#125;</span>ms`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">    options.maxSize = <span class="number">5</span></span><br><span class="line">    options.maxValue = <span class="number">10</span></span><br><span class="line">    debugFn(fn, options.maxSize, options.maxValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机数组</span></span><br><span class="line"><span class="comment"> * 容量为[0,maxSize]</span></span><br><span class="line"><span class="comment"> * 取值范围在[-maxValue,+maxValue],</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span> (<span class="params">maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(~~(<span class="built_in">Math</span>.random() * (maxSize + <span class="number">1</span>)))</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (~~(<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>))) - (~~(<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyArray</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.slice(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内置排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">builtInSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试待排序的数组并记录执行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testSortAndRecordTime</span> (<span class="params">fn, data, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  fn(data)</span><br><span class="line">  <span class="keyword">const</span> end = <span class="built_in">Date</span>.now()</span><br><span class="line">  options.spendTime += (end - start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较两个排序,看是否已经有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSorted</span> (<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr1.length &amp;&amp; !arr2.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (!arr1.length || !arr2.length || arr1.length !== arr2.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.length; i++)</span><br><span class="line">    <span class="keyword">if</span> (arr1[i] !== arr2[i])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调试排序函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugFn</span> (<span class="params">fn, maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = generateRandomArray(maxSize, maxValue)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>, arr)</span><br><span class="line">  fn(arr)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中的两个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有当 i !== j 时才可以</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">  <span class="comment">// arr[j] ^= arr[i]</span></span><br><span class="line">  <span class="comment">// arr[i] ^= arr[j]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成一个[start,end]的n个元素的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const generateRandomArray = (n, start, end) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  const arr = []</span></span><br><span class="line"><span class="comment">  for (let i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="comment">    arr.push(~~(Math.random() * (end - start + 1) + start))</span></span><br><span class="line"><span class="comment">  return arr</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; test, swap &#125;</span><br></pre></td></tr></table></figure><h2 id="二-选择排序"><a class="markdownIt-Anchor" href="#二-选择排序"></a> 二、选择排序</h2><p>简单选择排序——每次从待排序的序列中选择最小的元素放到前面</p><ul><li>不稳定</li><li>O(n²)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[min]) min = j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i !== min) swap(arr, i, min)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-冒泡排序"><a class="markdownIt-Anchor" href="#三-冒泡排序"></a> 三、冒泡排序</h2><p>冒泡排序——从头到尾/从尾到头,按顺序两两比较,每一趟将最小/最大值交换到最左/最右边</p><ul><li>稳定</li><li>O(n²)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">let</span> swapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>)</span><br><span class="line">        swapped = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (swapped === <span class="literal">false</span>) <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> swapped,</span><br><span class="line">    n = arr.length</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    swapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">      <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i]) &#123;</span><br><span class="line">        swap(arr, i - <span class="number">1</span>, i)</span><br><span class="line">        swapped = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (swapped === <span class="literal">false</span>) <span class="keyword">break</span></span><br><span class="line">    n--</span><br><span class="line">  &#125; <span class="keyword">while</span> (swapped)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-插入排序"><a class="markdownIt-Anchor" href="#四-插入排序"></a> 四、插入排序</h2><p>插入排序—按顺序从待排序序列中取出一个并插入前面已经排序好的序列中</p><ul><li>稳定</li><li>O(n²)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">      <span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j])</span><br><span class="line">        swap(arr, j - <span class="number">1</span>, j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; arr[j]; j--)</span><br><span class="line">      swap(arr, j - <span class="number">1</span>, j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; e; j--)</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    arr[j] = e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-层序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-层序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-层序遍历"></a> leetcode-二叉树-层序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用层序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 层序遍历1 一个一个处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> queue = [[root, <span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123; <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="comment">// 2. process logic in current shift node 处理当前出队元素的逻辑 </span></span><br><span class="line">    <span class="keyword">const</span> [cur, depth] = queue.shift()</span><br><span class="line">    <span class="keyword">if</span> (!res[depth]) res[depth] = []</span><br><span class="line">    <span class="keyword">else</span> res[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. push</span></span><br><span class="line">    <span class="keyword">if</span> (node.left) queue.push(node.left)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. push</span></span><br><span class="line">    <span class="keyword">if</span> (node.right) queue.push(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current status if needed</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 层序遍历2 一层一层处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> queue = [[root, <span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123; <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">let</span> len = queue.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// 2. process logic in current shift node 处理当前出队元素的逻辑 </span></span><br><span class="line">      <span class="keyword">const</span> [cur, depth] = queue.shift()</span><br><span class="line">      <span class="keyword">if</span> (!res[depth]) res[depth] = []</span><br><span class="line">      <span class="keyword">else</span> res[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. push</span></span><br><span class="line">      <span class="keyword">if</span> (node.left) queue.push(node.left)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. push</span></span><br><span class="line">      <span class="keyword">if</span> (node.right) queue.push(node.right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current status if needed</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="102-二叉树的层序遍历"><a class="markdownIt-Anchor" href="#102-二叉树的层序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> q = [[root,<span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span>(q.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> [cur,depth] = q.shift()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!ret[depth])  ret[depth] = [cur.val]</span><br><span class="line">    <span class="keyword">else</span>  ret[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cur.left)  q.push([cur.left,depth+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span>(cur.right)  q.push([cur.right,depth+<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs2 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> q = [root]</span><br><span class="line">  <span class="keyword">while</span> (q.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = q.length</span><br><span class="line">    ret.push([])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> cur = q.shift()</span><br><span class="line">      ret[ret.length-<span class="number">1</span>].push(cur.val)</span><br><span class="line">      <span class="keyword">if</span> (cur.left) q.push(cur.left)</span><br><span class="line">      <span class="keyword">if</span> (cur.right) q.push(cur.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dfs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  dfs(root,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root,depth</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret[depth])</span><br><span class="line">      ret[depth].push(root.val)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ret[depth] = [root.val]</span><br><span class="line">    dfs(root.left,depth+<span class="number">1</span>)</span><br><span class="line">    dfs(root.right,depth+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="429-n-叉树的层序遍历"><a class="markdownIt-Anchor" href="#429-n-叉树的层序遍历"></a> <a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429. N 叉树的层序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> queue = [[root, <span class="number">0</span>]]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> [cur, depth] = queue.shift()</span><br><span class="line">    <span class="keyword">if</span> (!ret[depth]) ret[depth] = [cur.val]</span><br><span class="line">    <span class="keyword">else</span> ret[depth].push(cur.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cur.children.length; i++)</span><br><span class="line">      queue.push([cur.children[i], depth + <span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bfs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> queue = [root]</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = queue.length</span><br><span class="line">    ret.push([])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> cur = queue.shift()</span><br><span class="line">      ret[ret.length-<span class="number">1</span>].push(cur.val)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;cur.children.length;i++)</span><br><span class="line">        queue.push(cur.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树层序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-后序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-后序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-后序遍历"></a> leetcode-二叉树-后序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用后序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  dfs(root)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">node, param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// process result</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. drill down 进入下一层</span></span><br><span class="line">    dfs(node.left, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. drill down 进入下一层</span></span><br><span class="line">    dfs(node.right, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. process logic in current level 处理当前层逻辑</span></span><br><span class="line">    res.push(node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="145-二叉树的后序遍历"><a class="markdownIt-Anchor" href="#145-二叉树的后序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  postOrder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postOrder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span></span><br><span class="line">    postOrder(node.left)</span><br><span class="line">    postOrder(node.right)</span><br><span class="line">    ret.push(node.val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——2个栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> s1 = [root]</span><br><span class="line">  <span class="keyword">const</span> s2 = []</span><br><span class="line">  <span class="keyword">while</span>(s1.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = s1.pop()</span><br><span class="line">    s2.push(cur)</span><br><span class="line">    <span class="keyword">if</span>(cur.left) s1.push(cur.left)</span><br><span class="line">    <span class="keyword">if</span>(cur.right) s1.push(cur.right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(s2.length)</span><br><span class="line">    ret.push(s2.pop().val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——1个栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> s1 = [root]</span><br><span class="line">  <span class="keyword">let</span> h = root,</span><br><span class="line">      cur</span><br><span class="line">  <span class="keyword">while</span>(s1.length)&#123;</span><br><span class="line">    cur = s1[s1.length-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span>(cur.left &amp;&amp; h !== cur.left &amp;&amp; h !== cur.right)</span><br><span class="line">      s1.push(cur.left)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( cur.right &amp;&amp; h !== cur.right)</span><br><span class="line">      s1.push(cur.right)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      ret.push(s1.pop().val)</span><br><span class="line">      h = cur</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——模拟系统栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">s, node</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = s</span><br><span class="line">    <span class="built_in">this</span>.node = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,root))</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> command = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(command.s === <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">      res.push(command.node.val)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;print&quot;</span>,command.node))</span><br><span class="line">      <span class="keyword">if</span>(command.node.right)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.right))</span><br><span class="line">      <span class="keyword">if</span>(command.node.left)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.left))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="590-n叉树的后序遍历"><a class="markdownIt-Anchor" href="#590-n叉树的后序遍历"></a> <a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590. N叉树的后序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  _postorder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_postorder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">      _postorder(node.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    ret.push(node.val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">let</span> stack1 = [root]</span><br><span class="line">  <span class="keyword">let</span> stack2 = []</span><br><span class="line">  <span class="keyword">while</span>(stack1.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = stack1.pop()</span><br><span class="line">    stack2.push(cur)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cur.children.length; i++) &#123;</span><br><span class="line">      stack1.push(cur.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(stack2.length)</span><br><span class="line">    ret.push(stack2.pop().val)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="104-二叉树的最大深度"><a class="markdownIt-Anchor" href="#104-二叉树的最大深度"></a> <a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftMaxDepth = maxDepth(root.left)</span><br><span class="line">  <span class="keyword">let</span> rightMaxDepth = maxDepth(root.right)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftMaxDepth, rightMaxDepth) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="111-二叉树的最小深度"><a class="markdownIt-Anchor" href="#111-二叉树的最小深度"></a> <a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line">  <span class="keyword">if</span> (root.left) res = <span class="built_in">Math</span>.min(minDepth(root.left), res)</span><br><span class="line">  <span class="keyword">if</span> (root.right) res = <span class="built_in">Math</span>.min(minDepth(root.right), res)</span><br><span class="line">  <span class="keyword">return</span> res + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="559-n-叉树的最大深度"><a class="markdownIt-Anchor" href="#559-n-叉树的最大深度"></a> <a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(root.children.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;root.children.length;i++)</span><br><span class="line">      max = <span class="built_in">Math</span>.max(max,maxDepth(root.children[i]))</span><br><span class="line">    <span class="keyword">return</span> max+<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="226-翻转二叉树"><a class="markdownIt-Anchor" href="#226-翻转二叉树"></a> <a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> left = invertTree(root.left)</span><br><span class="line">  <span class="keyword">let</span> right = invertTree(root.right)</span><br><span class="line">  root.left = right</span><br><span class="line">  root.right = left</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="100-相同的树"><a class="markdownIt-Anchor" href="#100-相同的树"></a> <a href="https://leetcode-cn.com/problems/same-tree/">100. 相同的树</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p === <span class="literal">null</span> || q === <span class="literal">null</span> || p.val !== q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span>(p === <span class="literal">null</span> || q === <span class="literal">null</span> || p.val !== q.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> q1=  [p]</span><br><span class="line">    <span class="keyword">const</span> q2 = [q]</span><br><span class="line">    <span class="keyword">while</span>(q1.length &amp;&amp; q2.length)&#123;</span><br><span class="line">      <span class="keyword">const</span> cur1 = q1.shift()</span><br><span class="line">      <span class="keyword">const</span> cur2 = q2.shift()</span><br><span class="line">      <span class="keyword">if</span>(cur1.val !== cur2.val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cur1.left === <span class="literal">null</span> &amp;&amp; cur2.left === <span class="literal">null</span>)&#123;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!cur1.left || !cur2.left) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        q1.push(cur1.left)</span><br><span class="line">        q2.push(cur2.left)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cur1.right === <span class="literal">null</span> &amp;&amp; cur2.right === <span class="literal">null</span>)&#123;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!cur1.right || !cur2.right) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        q1.push(cur1.right)</span><br><span class="line">        q2.push(cur2.right)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树后序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-中序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-中序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-中序遍历"></a> leetcode-二叉树-中序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用中序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  dfs(root)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">node, param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// process result</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. drill down 进入下一层</span></span><br><span class="line">    dfs(node.left, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. process logic in current level 处理当前层逻辑</span></span><br><span class="line">    res.push(node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. drill down 进入下一层</span></span><br><span class="line">    dfs(node.right, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="94-二叉树的中序遍历"><a class="markdownIt-Anchor" href="#94-二叉树的中序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  inOrder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    inOrder(node.left)</span><br><span class="line">    ret.push(node.val)</span><br><span class="line">    inOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> cur = root</span><br><span class="line">  <span class="keyword">while</span>(stack.length || cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur !== <span class="literal">null</span> )&#123;</span><br><span class="line">      stack.push(cur)</span><br><span class="line">      cur = cur.left</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cur = stack.pop()</span><br><span class="line">      ret.push(cur.val)</span><br><span class="line">      cur = cur.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——模拟系统栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">s, node</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = s</span><br><span class="line">    <span class="built_in">this</span>.node = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">const</span> stack = [<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,root)]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> command = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(command.s === <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">      res.push(command.node.val)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(command.node.right)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.right))</span><br><span class="line">      stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;print&quot;</span>,command.node))</span><br><span class="line">      <span class="keyword">if</span>(command.node.left)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&quot;go&quot;</span>,command.node.left))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="98-验证二叉搜索树"><a class="markdownIt-Anchor" href="#98-验证二叉搜索树"></a> <a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _isValidBST(root,-<span class="literal">Infinity</span>,<span class="literal">Infinity</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isValidBST</span>(<span class="params">root,lower,upper</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.val &lt;= lower || root.val &gt;= upper) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _isValidBST(root.left,lower,root.val) &amp;&amp; _isValidBST(root.right,root.val,upper)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = -<span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">return</span> _isValidBST(root)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isValidBST</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!_isValidBST(root.left))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(root.val &lt;= prev)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    prev = root.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _isValidBST(root.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> prev = -<span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">let</span> cur = root</span><br><span class="line">  <span class="keyword">while</span>(stack.length || cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur!== <span class="literal">null</span>)&#123;</span><br><span class="line">      stack.push(cur)</span><br><span class="line">      cur = cur.left</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cur = stack.pop()</span><br><span class="line">      <span class="keyword">if</span>(cur.val &lt;= prev)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      prev = cur.val</span><br><span class="line">      cur = cur.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 二叉树中序遍历 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-二叉树-前序遍历</title>
      <link href="2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/12/24/Algorithm/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode-二叉树-前序遍历"><a class="markdownIt-Anchor" href="#leetcode-二叉树-前序遍历"></a> leetcode-二叉树-前序遍历</h1><h2 id="一-模板"><a class="markdownIt-Anchor" href="#一-模板"></a> 一、模板</h2><h3 id="1-递归"><a class="markdownIt-Anchor" href="#1-递归"></a> 1. 递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归-通用前序遍历模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> problem = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0. prepare</span></span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  dfs(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span> (<span class="params">node, param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. terminator 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// process result</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. process logic in current level 处理当前层逻辑</span></span><br><span class="line">    ret.push(node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. drill down 进入下一层</span></span><br><span class="line">    dfs(node.left, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. drill down 进入下一层</span></span><br><span class="line">    dfs(node.right, param1, param2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. reverse the current level status if needed 清理当前层状态</span></span><br><span class="line">    <span class="comment">// return ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-题目"><a class="markdownIt-Anchor" href="#二-题目"></a> 二、题目</h2><h3 id="144-二叉树的前序遍历"><a class="markdownIt-Anchor" href="#144-二叉树的前序遍历"></a> <a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  preorder(root)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">preorder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    ret.push(node.val)</span><br><span class="line">    preorder(node.left)</span><br><span class="line">    preorder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = [root]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(cur)&#123;</span><br><span class="line">      ret.push(cur.val)</span><br><span class="line">      stack.push(cur.right)</span><br><span class="line">      stack.push(cur.left)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归——模拟系统栈方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">s,node</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.s = s</span><br><span class="line">    <span class="built_in">this</span>.node = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = [<span class="keyword">new</span> Command(<span class="string">&#x27;go&#x27;</span>,root)]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> command = stack.pop()</span><br><span class="line">    <span class="keyword">if</span>(command.s === <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">      ret.push(command.node.val)</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(command.node.right)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&#x27;go&#x27;</span>,command.node.right))</span><br><span class="line">      <span class="keyword">if</span>(command.node.left)</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">&#x27;go&#x27;</span>,command.node.left))</span><br><span class="line">      stack.push(<span class="keyword">new</span> Command(<span class="string">&#x27;print&#x27;</span>,command.node))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="589-n叉树的前序遍历"><a class="markdownIt-Anchor" href="#589-n叉树的前序遍历"></a> <a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589. N叉树的前序遍历</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  _preorder(root)     </span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_preorder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> </span><br><span class="line">    ret.push(node.val)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; node.children.length;i++)&#123;</span><br><span class="line">      _preorder(node.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = []</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">const</span> stack = [root]</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> cur = stack.pop()</span><br><span class="line">    ret.push(cur.val)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = cur.children.length - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">      stack.push(cur.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="112-路径总和"><a class="markdownIt-Anchor" href="#112-路径总和"></a> <a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span> (<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">return</span> root.val === sum</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> hasPathSum(root.left,sum-root.val) || hasPathSum(root.right, sum-root.val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="257-二叉树的所有路径"><a class="markdownIt-Anchor" href="#257-二叉树的所有路径"></a> <a href="https://leetcode-cn.com/problems/binary-tree-paths/">257. 二叉树的所有路径</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  buildPaths(root,<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">buildPaths</span>(<span class="params">root,s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>)&#123;</span><br><span class="line">      s+=root.val</span><br><span class="line">      res.push(s)</span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPaths(root.left,s+root.val+<span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">    buildPaths(root.right,s+root.val+<span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前函数递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">    res.push(root.val + <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftS = binaryTreePaths(root.left)</span><br><span class="line">  <span class="keyword">let</span> rightS = binaryTreePaths(root.right)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; leftS.length; i++) </span><br><span class="line">    res.push(root.val + <span class="string">&quot;-&gt;&quot;</span> + leftS[i])</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rightS.length; i++) </span><br><span class="line">    res.push(root.val + <span class="string">&quot;-&gt;&quot;</span> + rightS[i])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="437-路径总和-iii"><a class="markdownIt-Anchor" href="#437-路径总和-iii"></a> <a href="https://leetcode-cn.com/problems/path-sum-iii/">437. 路径总和 III</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span> (<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">  res = findPath(root, sum)</span><br><span class="line">  res += pathSum(root.left, sum)</span><br><span class="line">  res += pathSum(root.right, sum)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findPath</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (root.val === sum)</span><br><span class="line">      res += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res += findPath(root.left, sum - root.val)</span><br><span class="line">    res += findPath(root.right, sum - root.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树前序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络字体</title>
      <link href="2020/07/18/docs/%E7%BD%91%E7%BB%9C%E5%AD%97%E4%BD%93/"/>
      <url>2020/07/18/docs/%E7%BD%91%E7%BB%9C%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="网络字体"><a class="markdownIt-Anchor" href="#网络字体"></a> 网络字体</h1><p>西方国家字母体系分为两类：<code>Serif</code>和<code>Sans-Serif</code>。</p><ul><li><p>serif：有衬线字体，每个字的开始和结束的地方都有额外的修饰，笔画的粗细也不同。</p></li><li><p>sans-serif：无衬线字体，每个字的笔画的粗细都差不多。</p></li><li><p>Monospace：等宽字体，最早出现于西方的印刷体。早期的显示器、打字机，由于技术的限制，无法调整字母的宽度，因此将字母的宽度都制成了一样的宽度，从而形成了等宽字体。</p></li></ul><p><code>serif</code>对于阅读文章来说一种很好的字体，因为该字体很容易辨认。但<code>sans-serif</code>就不同了，每个字的笔画的粗细都差不多，容易造成辨认的困扰，以及错读的情况。</p><p>因此，对于文章的正文来说使用易读性高，且以word为单位来阅读的serif会更加友好且不易疲劳。而标题采用较醒目的sans-serif，它需要醒目，不需要长时间盯着来阅读。</p><p>Example:</p><p>serif：‘宋体’, ‘Times New Roman’, Times, serif</p><p>sans-serif：‘黑体’，‘Microsoft YaHei UI’, ‘Comic Sans MS’, Arial, Helvetica, Verdana, sans-serif</p><p>Monospace：Consolas，Courier New，Monaco，monospace</p>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时钟指针的夹角</title>
      <link href="2020/07/07/Algorithm/%E6%97%B6%E9%92%9F%E6%8C%87%E9%92%88%E7%9A%84%E5%A4%B9%E8%A7%92/"/>
      <url>2020/07/07/Algorithm/%E6%97%B6%E9%92%9F%E6%8C%87%E9%92%88%E7%9A%84%E5%A4%B9%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="时钟指针的夹角"><a class="markdownIt-Anchor" href="#时钟指针的夹角"></a> 时钟指针的夹角</h1><p>要想计算出时钟指针在钟盘上的正确位置，其思想是分别计算<code>时针</code>、<code>分针</code>、<code>秒针</code>与<code>0点垂线</code>的夹角。</p><p>首先，需要明确这三个指针分别在钟盘上转一圈（360°）时，每秒/每分/每小时指针转的角度。</p><ol><li><p>秒针：转一圈（360°）是 60s，那么秒针的转动速率 V<sub>s</sub></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>s</mi></msub><mo>=</mo><mfrac><mrow><mn>360</mn><mi mathvariant="normal">°</mi></mrow><mrow><mn>60</mn><mi>s</mi></mrow></mfrac><mo>=</mo><mn>6</mn><mtext>度</mtext><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">V_s = \frac{360°}{60 s} = 6 \text{度}/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord text"><span class="mord cjk_fallback">度</span></span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span></span></span></p></li><li><p>分针：转一圈（360°）是 60min，那么分针的转动速率 V<sub>m</sub></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>m</mi></msub><mo>=</mo><mfrac><mrow><mn>360</mn><mi mathvariant="normal">°</mi></mrow><mrow><mn>60</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow></mfrac><mo>=</mo><mn>6</mn><mtext>度</mtext><mi mathvariant="normal">/</mi><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">V_m = \frac{360°}{60 min} = 6 \text{度}/min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord text"><span class="mord cjk_fallback">度</span></span><span class="mord">/</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span></span></p></li><li><p>时针：转一圈（360°）是 12h，那么时针的转动速率 V<sub>h</sub></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>h</mi></msub><mo>=</mo><mfrac><mrow><mn>360</mn><mi mathvariant="normal">°</mi></mrow><mrow><mn>12</mn><mi>h</mi></mrow></mfrac><mo>=</mo><mn>30</mn><mtext>度</mtext><mi mathvariant="normal">/</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">V_h = \frac{360°}{12h} = 30 \text{度}/h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">2</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">度</span></span><span class="mord">/</span><span class="mord mathdefault">h</span></span></span></span></span></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/clock.png" alt="" /></p><p>例如：20 时 30 分 30 秒，那么</p><p>秒针的位置 P<sub>s</sub>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>s</mi></msub><mo>=</mo><mn>20</mn><mi>s</mi><mo>×</mo><msub><mi>V</mi><mi>s</mi></msub><mo>=</mo><mn>20</mn><mo>×</mo><mn>6</mn><mo>=</mo><mn>120</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">P_s = 20s × V_s = 20 × 6 = 120 °</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mord">°</span></span></span></span></span></p><p>分针的位置 P<sub>m</sub>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn><mi>s</mi><mo>=</mo><mfrac><mrow><mn>30</mn><mi>s</mi></mrow><mrow><mn>60</mn><mi>s</mi></mrow></mfrac><mo>=</mo><mn>0.5</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">30s = \frac{30s}{60s} = 0.5 min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>m</mi></msub><mo>=</mo><mn>20</mn><mi>m</mi><mi>i</mi><mi>n</mi><mo>×</mo><msub><mi>V</mi><mi>m</mi></msub><mo>+</mo><mn>0.5</mn><mi>m</mi><mi>i</mi><mi>n</mi><mo>×</mo><msub><mi>V</mi><mi>m</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>20</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>×</mo><mn>6</mn><mo>=</mo><mn>123</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">P_m = 20min × V_m + 0.5min ×V_m = (20 + 0.5)× 6 = 123°</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">°</span></span></span></span></span></p><p>时针的位置 P<sub>h</sub>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>20</mn><mn>12</mn></mfrac><mo>=</mo><mn>1</mn><mo>…</mo><mo>…</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">\frac{20}{12} = 1 ……8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn><mi>m</mi><mi>i</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mn>30</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow><mrow><mn>60</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow></mfrac><mo>=</mo><mn>0.5</mn><mi>h</mi></mrow><annotation encoding="application/x-tex">30min = \frac{30min}{60min} = 0.5h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">0</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">h</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>h</mi></msub><mo>=</mo><mn>8</mn><mi>h</mi><mo>×</mo><msub><mi>V</mi><mi>h</mi></msub><mo>+</mo><mn>0.5</mn><mi>h</mi><mo>×</mo><msub><mi>V</mi><mi>h</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>8</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>×</mo><mn>30</mn><mo>=</mo><mn>255</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">P_h = 8h × V_h + 0.5h × V_h = (8 + 0.5) × 30 = 255°</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span><span class="mord">°</span></span></span></span></span></p><p>在计算<code>分针</code>和<code>时针</code>的位置时，需要分别注意<code>秒针</code>和<code>分针</code>已经转了多少角度。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钟表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode常用快捷键</title>
      <link href="2020/04/09/Editors/VSCode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/04/09/Editors/VSCode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode常用快捷键"><a class="markdownIt-Anchor" href="#vscode常用快捷键"></a> VSCode常用快捷键</h1><h2 id="1-光标移动"><a class="markdownIt-Anchor" href="#1-光标移动"></a> 1. 光标移动</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>多光标</td><td>Ctrl + Alt + Arrow</td></tr><tr><td>选中附近单词与重复内容</td><td>(Ctrl + D )  * number</td></tr><tr><td>选中多行内容并在末尾添加光标</td><td>Alt + Shift + i</td></tr></tbody></table><h2 id="2-文件间移动"><a class="markdownIt-Anchor" href="#2-文件间移动"></a> 2. 文件间移动</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>展示最近打开的文件列表</td><td>Ctrl + P</td></tr><tr><td>在新的编辑器中打开</td><td>Ctrl + P，Ctrl + Enter</td></tr><tr><td>跳转到指定行</td><td>Ctrl + G</td></tr><tr><td>跳转到指定功能</td><td>Ctrl + Shift + O</td></tr><tr><td>typescript 跳转到定义处</td><td>F12</td></tr><tr><td>跳转到函数实现处</td><td>Ctrl + F12</td></tr></tbody></table><h2 id="3-代码"><a class="markdownIt-Anchor" href="#3-代码"></a> 3. 代码</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>折叠/展开</td><td>Ctrl + Shift + [ / ]</td></tr><tr><td>全部折叠</td><td>Ctrl + K，Ctrl + 0</td></tr></tbody></table><h2 id="4-搜索"><a class="markdownIt-Anchor" href="#4-搜索"></a> 4. 搜索</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>文件内搜索内容,并跳转</td><td>Ctrl + F，Shift + Enter</td></tr><tr><td>大小写敏感</td><td>Alt + C</td></tr><tr><td>单词全匹配</td><td>Alt + W</td></tr><tr><td>正则</td><td>Alt + R</td></tr><tr><td>替换</td><td>Ctrl + H</td></tr><tr><td>全部替换</td><td>Ctrl + Alt + Enter</td></tr><tr><td>多文件搜索</td><td>Ctrl + Shift + F</td></tr></tbody></table><h2 id="5-终端"><a class="markdownIt-Anchor" href="#5-终端"></a> 5. 终端</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>显示/隐藏终端</td><td>Ctrl + `   /   Ctrl + J</td></tr><tr><td>新建终端</td><td>Ctrl + Shift + `</td></tr><tr><td>拆分终端</td><td>Ctrl + Shift + 5</td></tr><tr><td>终端间的切换</td><td>Alt + Arrow</td></tr></tbody></table><h2 id="6-编辑器"><a class="markdownIt-Anchor" href="#6-编辑器"></a> 6. 编辑器</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>拆分编辑器</td><td>Ctrl + \</td></tr><tr><td>切换编辑器</td><td>Ctrl + number</td></tr><tr><td>调整文件所在的编辑器</td><td>Ctrl + Alt + Arrow</td></tr></tbody></table><h2 id="7-工作区"><a class="markdownIt-Anchor" href="#7-工作区"></a> 7. 工作区</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td>放大/缩小</td><td>Ctrl + +/-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Editors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http-proxy-middleware</title>
      <link href="2020/02/27/Error%20Collection/http-proxy-middleware/"/>
      <url>2020/02/27/Error%20Collection/http-proxy-middleware/</url>
      
        <content type="html"><![CDATA[<h1 id="reacthttp-proxy-middleware"><a class="markdownIt-Anchor" href="#reacthttp-proxy-middleware"></a> react——http-proxy-middleware</h1><h2 id="1-报错信息"><a class="markdownIt-Anchor" href="#1-报错信息"></a> 1. 报错信息</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200227163903.png" alt="" /></p><h2 id="2-原因"><a class="markdownIt-Anchor" href="#2-原因"></a> 2. 原因</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/image-20200227165413097.png" alt="" /></p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/image-20200227165205342.png" alt="" /></p><p>可以发现<code>proxy</code>是一个<code>对象</code>，<code>函数</code>在对象里面。</p><p>所以官网文档写的早 ，导出的还是函数，但是现在导出的是一个对象了，只是文档还没改。</p><h2 id="3-解决方法"><a class="markdownIt-Anchor" href="#3-解决方法"></a> 3. 解决方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">    proxy.createProxyMiddleware(&#123;</span><br><span class="line">      target: <span class="string">&quot;http://tingapi.ting.baidu.com&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;http://tingapi.ting.baidu.com&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Error Collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10系统时间显示到秒</title>
      <link href="2020/02/18/docs/win10%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%E5%88%B0%E7%A7%92/"/>
      <url>2020/02/18/docs/win10%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%E5%88%B0%E7%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="win10系统时间显示到秒"><a class="markdownIt-Anchor" href="#win10系统时间显示到秒"></a> win10系统时间显示到秒</h1><p><code>windows+R</code>输入<code>regedit</code>打开注册表,找到 <code>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code></p><p>右键点击新建 <code>DWORD（32位）值</code>，并命名为<code>ShowSecondsInSystemClock</code>，将数值数据改为<code>1</code> 即可(可以重启电脑或者在资源管理器里重新启动<code>Windows资源管理器</code>).</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/N1NH56Z0M.png" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200218234635.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页截图&amp;设计模式</title>
      <link href="2020/02/18/docs/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE/"/>
      <url>2020/02/18/docs/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-网页截图"><a class="markdownIt-Anchor" href="#一-网页截图"></a> 一、网页截图</h2><h3 id="1-pc端"><a class="markdownIt-Anchor" href="#1-pc端"></a> 1. PC端</h3><p>打开要截图的网页,<code>F12(Fn+F12)</code>打开控制台,选择<code>Elements</code>,<code>ctrl+shift+p</code>,输入<code>shot</code>即可选择截图方式</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200214140951.png"  /><h3 id="2-手机端"><a class="markdownIt-Anchor" href="#2-手机端"></a> 2. 手机端</h3><p>打开要截图的网页,<code>F12(Fn+F12)</code>打开控制台</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/7@E1EQEGUGVSEIJ3{}MVQSR_WPS图片.png" style="zoom: 80%;" /><h2 id="二-网页设计模式"><a class="markdownIt-Anchor" href="#二-网页设计模式"></a> 二、网页设计模式</h2><p>在控制台输入<code>document.designMode = 'on'</code>,即可修改页面(可以复制文字等…)</p>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签模板</title>
      <link href="2020/02/17/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/02/17/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="有趣的标签模板"><a class="markdownIt-Anchor" href="#有趣的标签模板"></a> 有趣的标签模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*a: variable</span></span><br><span class="line"><span class="comment">*A: string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">strs,...vars</span>)</span>&#123;<span class="built_in">console</span>.log(strs)&#125;</span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">//a[&quot;&quot;]</span></span><br><span class="line">tag<span class="string">`A`</span><span class="comment">//A[&quot;A&quot;]</span></span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>A`</span><span class="comment">// aA[&quot;&quot;, &quot;A&quot;]</span></span><br><span class="line">tag<span class="string">`A<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// Aa[&quot;A&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`AA`</span><span class="comment">// AA[&quot;AA&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// aa[&quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>A`</span><span class="comment">// aaA[&quot;&quot;, &quot;&quot;, &quot;A&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>A<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// aAa[&quot;&quot;, &quot;A&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`A<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// Aaa[&quot;A&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span>AA`</span><span class="comment">// aAA[&quot;&quot;, &quot;AA&quot;]</span></span><br><span class="line">tag<span class="string">`A<span class="subst">$&#123;a&#125;</span>A`</span><span class="comment">// AaA[&quot;A&quot;, &quot;A&quot;]</span></span><br><span class="line">tag<span class="string">`AA<span class="subst">$&#123;a&#125;</span>`</span><span class="comment">// AAa[&quot;AA&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span><span class="subst">$&#123;a&#125;</span>`</span><span class="comment">//aaa[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line">tag<span class="string">`AAA`</span><span class="comment">// AAA[&quot;AAA&quot;] </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XAMPP - Error:Mysql/Apache shutdown unexpectedly</title>
      <link href="2020/01/04/Error%20Collection/XAMPP---ErrorMysqlApache-shutdown-unexpectedly/"/>
      <url>2020/01/04/Error%20Collection/XAMPP---ErrorMysqlApache-shutdown-unexpectedly/</url>
      
        <content type="html"><![CDATA[<h1 id="xampp-errormysqlapache-shutdown-unexpectedly"><a class="markdownIt-Anchor" href="#xampp-errormysqlapache-shutdown-unexpectedly"></a> XAMPP - Error:Mysql/Apache shutdown unexpectedly</h1><h3 id="xampp启动apache或mysql时显示错误"><a class="markdownIt-Anchor" href="#xampp启动apache或mysql时显示错误"></a> XAMPP启动Apache或Mysql时显示错误：</h3><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200104181119.png" alt="" /></p><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法：</h3><h4 id="apache"><a class="markdownIt-Anchor" href="#apache"></a> Apache</h4><p>一般报该错误都是端口被占用导致的。例如：如果装了VM虚拟机那会和443端口产生冲突。</p><p>可以在<code>cmd</code>中输入<code>netstat -ano</code>来查看端口是否被占用。</p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20200104182210.png" alt="" /></p><p>修改<code>httpd.conf</code>中的<code>Listen 80</code>端口号为其他没被占用的端口号 。同理，修改<code>httpd-ssl.conf</code>中的<code>Listen 443</code>端口号。</p><p>重启即可。</p><h4 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> Mysql</h4><p>第一种：将<code>/xampp/mysql/backup</code>里的所有文件都复制粘贴到<code>/xampp/mysql/data</code>中，重启即可。</p><p>第二种：将<code>/xampp/mysql/data</code>下的<code>ibdata1</code>文件删掉，重启（可能会失败）。</p><p>第三种：在<code>/xampp/mysql/bin/my.ini</code> 文件中添加</p><p><strong>[mysqld]<br />innodb_force_recovery = 4</strong></p><p>重启（可能会失败）。</p><p>第四种：利用管理员进入cmd，进入到<code>/xampp/mysql/bin</code>目录下，输入<code>mysqld --install</code>，再输入<code>net start mysql</code>。如果能正常启动，则成功（可能会失败）。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>数据库知识很重要！！！</p>]]></content>
      
      
      <categories>
          
          <category> Error Collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XAMPP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github搭建图床</title>
      <link href="2019/12/22/docs/%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>2019/12/22/docs/%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="利用github搭建图床"><a class="markdownIt-Anchor" href="#利用github搭建图床"></a> 利用github搭建图床</h1><h2 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h2><p>图床就是自动把<code>本地图片</code>转换成各种格式的<code>链接</code>的一种。</p><p>在写markdown时可以方便的插入图片，即使将markdwon分享给别人，别人也能够查看到图片。</p><a id="more"></a><h2 id="二-搭建步骤"><a class="markdownIt-Anchor" href="#二-搭建步骤"></a> 二、搭建步骤</h2><h3 id="1-下载picgo"><a class="markdownIt-Anchor" href="#1-下载picgo"></a> 1. 下载PicGo</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>windows用户直接下载.exe可执行文件；mac用户下载dmg。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222174633.png" style="zoom: 80%;" /><h3 id="2-配置github仓库"><a class="markdownIt-Anchor" href="#2-配置github仓库"></a> 2. 配置github仓库</h3><p>1）在自己的github中新建一个仓库（仓库名可自定义，尽量简单不要出现空格）。</p><p>2）进入个人中心的<code>settings/Developer settings/Personal access tokens</code></p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222175705.png" style="zoom:80%;" /><p>3）点击<code>Generate new token</code>。生成token这样方便我们通过PicGo来快捷的上传图片到github仓库。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222175806.png" style="zoom:80%;" /><p>4）勾选上<code>repo</code>！！！（一定不要忘了勾上），填写<code>Note注释</code>，点击<code>Generate</code>。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180023.png" style="zoom:80%;" /><p>5）将<code>token</code>复制到其他地方保存起来，这个token只显示一次。<img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180544.png" style="zoom:80%;" /></p><h3 id="3-配置picgo"><a class="markdownIt-Anchor" href="#3-配置picgo"></a> 3. 配置PicGo</h3><p>进入<code>图床设置</code>下的<code>GitHub图床</code></p><ul><li><p>设定仓库名：github用户名/新建的仓库名</p></li><li><p>设定分支名：master</p></li><li><p>设定Token：刚刚保存的Token</p></li><li><p>设定存储路径：可以不用设置</p></li><li><p>设定自定义域名：<code>https://cdn.jsdelivr.net/gh/github用户名/新建的仓库名</code></p><p>上传至github会比较慢，可以通过免费的开源CDN，这样上传的会比较快。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180918.png" style="zoom:80%;" /><h2 id="三-测试"><a class="markdownIt-Anchor" href="#三-测试"></a> 三、测试</h2><h3 id="1-上传方式"><a class="markdownIt-Anchor" href="#1-上传方式"></a> 1. 上传方式</h3><p>1）通过快捷键上传</p><p>在<code>PicGo设置</code>中修改<code>上传快捷键</code>。每次截完图之后，可以通过快捷键上传图片。</p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222182950.png" style="zoom:80%;" /><p>2）通过上传区上传</p><p>直接将图片拖到框中即可上传。</p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222183250.png" alt="" /></p><h3 id="2-选择各种格式链接"><a class="markdownIt-Anchor" href="#2-选择各种格式链接"></a> 2. 选择各种格式链接</h3><p>在<code>相册</code>中可以选择各种格式的链接。</p><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222183805.png" alt="" /></p><h2 id="四-总结"><a class="markdownIt-Anchor" href="#四-总结"></a> 四、总结</h2><p>图床工具其实就是将本地图片上传至远程仓库上（也可以说是服务器），帮助我们生成各种链接。这样我们就可以</p><p>通过各种链接来查看图片。所以，不仅仅是可以通过github来搭建图床，也可以通过微博、腾讯云COS、阿里云OSS、七牛等来搭建图床。</p>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCSS</title>
      <link href="2019/10/01/CSS/Sass/"/>
      <url>2019/10/01/CSS/Sass/</url>
      
        <content type="html"><![CDATA[<h1 id="scss"><a class="markdownIt-Anchor" href="#scss"></a> SCSS</h1><h2 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h2><p><img src="https://cdn.jsdelivr.net/gh/MarMomento/image/Scss.png" alt="" /></p><a id="more"></a><h2 id="一-注释"><a class="markdownIt-Anchor" href="#一-注释"></a> 一、 注释</h2><ul><li><code>/* */</code>: 编译后保留,压缩不保留</li><li><code>//</code>: 编译后不保留</li><li><code>/*!*/</code>: 编译后,压缩后都保留</li></ul><h2 id="二-嵌套"><a class="markdownIt-Anchor" href="#二-嵌套"></a> 二、嵌套</h2><blockquote><ul><li><p>父选择器(<code>&amp;</code>)</p></li><li><p>属性嵌套</p></li></ul></blockquote><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: green;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp; &amp;-text &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*嵌套属性*/</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  text: &#123;</span><br><span class="line">    align: center;</span><br><span class="line">    decoration: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.nav-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*嵌套属性*/</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-变量"><a class="markdownIt-Anchor" href="#三-变量"></a> 三、变量</h2><ul><li><code>$</code>定义变量</li><li>插值语法<code>#&#123;$var&#125;</code></li><li>变量支持块级作用域</li></ul><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$success</span>: <span class="number">#000</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    &amp; &amp;-#&#123;success&#125;&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.button .button-success &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="四-rules"><a class="markdownIt-Anchor" href="#四-rules"></a> 四、@rules</h2><h3 id="1-混合指令-mixininclude"><a class="markdownIt-Anchor" href="#1-混合指令-mixininclude"></a> 1. 混合指令: @mixin&amp;@include</h3><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">@mixin</span> btn(<span class="variable">$color</span>, <span class="variable">$bgColor</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bgColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="selector-class">.btn-warning</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> btn(<span class="number">#fff</span>, <span class="number">#f00</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> btn(<span class="variable">$bgColor</span>: green, <span class="variable">$color</span>: <span class="number">#000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-warning</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-warning</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-success</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-继承-extend"><a class="markdownIt-Anchor" href="#2-继承-extend"></a> 2. 继承: @extend</h3><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .btn;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span>, </span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-导入-import"><a class="markdownIt-Anchor" href="#3-导入-import"></a> 3. 导入: @import</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;filename&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>创建文件时使用<code>_</code>开头命名</p></li><li><p>导入时省略<code>_</code></p></li><li><p><code>_</code>作用：当有<code>scss文件</code>不想编译时单独转成<code>css文件</code>，可以使用<code>Partials</code>方式命名文件，使得其不会被单独转成css文件。</p></li></ul></blockquote><h3 id="4-自定义函数-function"><a class="markdownIt-Anchor" href="#4-自定义函数-function"></a> 4. 自定义函数: @function</h3><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">&quot;light&quot;</span>: <span class="number">#eee</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">@function</span> getColor(<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> map-get(<span class="variable">$colors</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: getColor(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: <span class="number">#eee</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="五-数据类型"><a class="markdownIt-Anchor" href="#五-数据类型"></a> 五、数据类型</h2><blockquote><p>检测方法: <code>type-of()</code></p></blockquote><h3 id="1-number"><a class="markdownIt-Anchor" href="#1-number"></a> 1. number</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">5</span>;</span><br><span class="line"><span class="variable">$width</span>: <span class="number">50px</span>;</span><br></pre></td></tr></table></figure><p>内置函数：</p><ul><li><p>percentage()</p></li><li><p>round()</p></li><li><p>ceil()</p></li><li><p>floor()</p></li><li><p>abs()</p></li><li><p>min()</p></li><li><p>max()</p></li><li><p>random()</p></li></ul><h3 id="2-bool"><a class="markdownIt-Anchor" href="#2-bool"></a> 2. bool</h3><p><code>true，false</code></p><h3 id="3-string"><a class="markdownIt-Anchor" href="#3-string"></a> 3. string</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>: <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 有引号</span></span><br><span class="line"><span class="variable">$str</span>: hello;   <span class="comment">// 无引号</span></span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>to-upper-case()</li><li>to-lower-case()</li><li>str-length()</li></ul><h3 id="4-color"><a class="markdownIt-Anchor" href="#4-color"></a> 4. color</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"><span class="variable">$color</span>: <span class="number">#000</span>;</span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>lighten()</li><li>darken()</li></ul><h3 id="5-list"><a class="markdownIt-Anchor" href="#5-list"></a> 5. list</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list</span>: (<span class="number">10px</span>, <span class="string">&#x27;string&#x27;</span>, red);</span><br><span class="line"><span class="variable">$list</span>: (<span class="number">10px</span> <span class="string">&#x27;string&#x27;</span> red);</span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>length()</li><li>nth()</li><li>append()</li><li>index()</li><li>join()</li></ul><h3 id="6-map"><a class="markdownIt-Anchor" href="#6-map"></a> 6. map</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span>: (top: <span class="number">1px</span>, bottom: <span class="number">2px</span>, left: <span class="number">3px</span>, right: <span class="number">4px</span>);</span><br></pre></td></tr></table></figure><p>内置函数:</p><ul><li>map-get()：查找键值</li><li>map-keys()：</li><li>map-values()</li><li>map-has-key()</li><li>map-merge()：合并map</li><li>map-remove()</li></ul><h2 id="六-运算符"><a class="markdownIt-Anchor" href="#六-运算符"></a> 六、运算符</h2><ul><li>算术: <code>+</code> <code>-</code> <code>*</code> <code>/</code></li><li>逻辑: <code>and</code> <code>or</code> <code>not</code></li><li>关系: <code>&gt;</code> <code>&lt;</code> <code>==</code> <code>&gt;=</code> <code>&lt;=</code></li></ul><h2 id="七-流程控制"><a class="markdownIt-Anchor" href="#七-流程控制"></a> 七、流程控制</h2><h3 id="1-条件"><a class="markdownIt-Anchor" href="#1-条件"></a> 1. 条件:</h3><h4 id="if"><a class="markdownIt-Anchor" href="#if"></a> @if</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@if</span> 条件&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">@else</span> if 条件&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">@else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环-foreachwhile"><a class="markdownIt-Anchor" href="#2-循环-foreachwhile"></a> 2. 循环: @for&amp;@each&amp;@while</h3><h4 id="1for"><a class="markdownIt-Anchor" href="#1for"></a> 1）@for</h4><p>编译前:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.button-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button-1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2each"><a class="markdownIt-Anchor" href="#2each"></a> 2）@each</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$value</span> in <span class="variable">$list</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>,<span class="variable">$value</span> in <span class="variable">$map</span></span><br></pre></td></tr></table></figure><h4 id="3while"><a class="markdownIt-Anchor" href="#3while"></a> 3）@while</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@while</span> <span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八-异常"><a class="markdownIt-Anchor" href="#八-异常"></a> 八、异常</h2><ul><li>@warn</li><li>@error</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的for和break</title>
      <link href="2019/08/08/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84break/"/>
      <url>2019/08/08/JavaScript/%E6%9C%89%E8%B6%A3%E7%9A%84break/</url>
      
        <content type="html"><![CDATA[<h1 id="有趣的for和break"><a class="markdownIt-Anchor" href="#有趣的for和break"></a> 有趣的for和break</h1><p>提起<code>for循环</code>和<code>break</code>想必大家都不陌生了，但你可能并不知道for循环还能命名，break还能终止指定名字的for循环。<a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i,j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>从运行结果来看，这和我们平常写的for循环没什么两样，只不过在for前面加了个<code>自定义的名字</code>。</p><p>当满足某个条件时，我们想要终止<code>内层循环</code>时，可以这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="built_in">console</span>.log(i,j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果要终止<code>外层循环</code>呢？这时候我们自定义的名字就起作用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">break</span> outLoop</span><br><span class="line">      <span class="built_in">console</span>.log(i,j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>当然我们也可以用<code>boolean</code>和<code>break</code>的组合来代替命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">outLoop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; !flag; i++) &#123;</span><br><span class="line">  innerLoop: <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：当只写一个break时，默认是终止最靠近的for循环；当在break后追加一个名字时，就会终止指定名字的for循环。其实为for循环命名也叫添加标号label（标签），其他语言里面也有类似的设计，比如C可以用goto，Java的break（虽然Java保留了goto关键字，但不允许使用）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用手册</title>
      <link href="2019/04/30/docs/Typora%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>2019/04/30/docs/Typora%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一级标题-标题"><a class="markdownIt-Anchor" href="#一级标题-标题"></a> 一级标题 <code># 标题</code></h1><h2 id="二级标题-标题"><a class="markdownIt-Anchor" href="#二级标题-标题"></a> 二级标题 <code>## 标题</code></h2><h3 id="三级标题-标题"><a class="markdownIt-Anchor" href="#三级标题-标题"></a> 三级标题 <code>### 标题</code></h3><h4 id="四级标题-标题"><a class="markdownIt-Anchor" href="#四级标题-标题"></a> 四级标题 <code>#### 标题</code></h4><h5 id="五级标题-标题"><a class="markdownIt-Anchor" href="#五级标题-标题"></a> 五级标题 <code>##### 标题</code></h5><a id="more"></a><h6 id="六级标题-标题"><a class="markdownIt-Anchor" href="#六级标题-标题"></a> 六级标题 <code>###### 标题</code></h6><h3 id="分割线-"><a class="markdownIt-Anchor" href="#分割线-"></a> 分割线 <code>---</code></h3><hr /><h3 id="阅读更多-more-"><a class="markdownIt-Anchor" href="#阅读更多-more-"></a> 阅读更多<code>&lt;!--more--&gt;</code></h3><h3 id="注释引用"><a class="markdownIt-Anchor" href="#注释引用"></a> 注释/引用 <code>&gt;</code></h3><blockquote></blockquote><h3 id="无序列表-或-"><a class="markdownIt-Anchor" href="#无序列表-或-"></a> 无序列表 <code>*</code>或<code>-</code></h3><ul><li></li></ul><h3 id="有序列表-1"><a class="markdownIt-Anchor" href="#有序列表-1"></a> 有序列表 <code>1.</code></h3><ol><li></li></ol><h3 id="插入图片-名字图片地址或-ctrlshifti-或img-src-alt-width"><a class="markdownIt-Anchor" href="#插入图片-名字图片地址或-ctrlshifti-或img-src-alt-width"></a> 插入图片 <code>![名字](图片地址)</code>或 Ctrl+shift+i 或<code>&lt;img src='' alt='' width=''&gt;</code></h3><p><img src="http://pic1.nipic.com/2008-12-30/200812308231244_2.jpg" alt="风景" /></p><h3 id="代码块-javascript"><a class="markdownIt-Anchor" href="#代码块-javascript"></a> 代码块 ```javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="粗体-文字"><a class="markdownIt-Anchor" href="#粗体-文字"></a> 粗体 <code>**文字**</code></h3><p><strong>粗体</strong></p><h3 id="斜体-文字"><a class="markdownIt-Anchor" href="#斜体-文字"></a> 斜体 <code>*文字*</code></h3><p><em>斜体</em></p><h3 id="粗体并斜体-文字"><a class="markdownIt-Anchor" href="#粗体并斜体-文字"></a> 粗体并斜体 <code>***文字***</code></h3><p><strong><em>粗体并斜体</em></strong></p><h3 id="删除线-~~文字~~"><a class="markdownIt-Anchor" href="#删除线-~~文字~~"></a> 删除线 <code>~~文字~~</code></h3><p><s>文字</s></p><h3 id="表格-ctrl-t"><a class="markdownIt-Anchor" href="#表格-ctrl-t"></a> 表格 Ctrl + T</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="插入链接-或-ctrlk"><a class="markdownIt-Anchor" href="#插入链接-或-ctrlk"></a> 插入链接 <code>[]()</code>或 Ctrl+k</h3><p><a href="www.baidu.com">Baidu</a></p><h3 id="todo-list-不勾选"><a class="markdownIt-Anchor" href="#todo-list-不勾选"></a> todo list <code>- [ ]不勾选</code></h3><ul><li>[ ] 勾选</li></ul><h3 id="complete-list-x勾选"><a class="markdownIt-Anchor" href="#complete-list-x勾选"></a> complete list <code>- [ x]勾选</code></h3><ul><li>[x] 不勾选</li></ul><h3 id="注释3"><a class="markdownIt-Anchor" href="#注释3"></a> 注释<code>[^3]</code></h3><p>注释注释<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h3 id="emojismile"><a class="markdownIt-Anchor" href="#emojismile"></a> emoji<code>:smile</code></h3><p>😄</p><h3 id="目录toc"><a class="markdownIt-Anchor" href="#目录toc"></a> 目录<code>[toc]</code></h3><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>test <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet使用手册</title>
      <link href="2019/04/30/docs/Emmet%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>2019/04/30/docs/Emmet%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="后代"><a class="markdownIt-Anchor" href="#后代"></a> 后代：&gt;</h3><p><strong>缩写</strong>：nav&gt;ul&gt;li</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟"><a class="markdownIt-Anchor" href="#兄弟"></a> 兄弟：+</h3><p><strong>缩写</strong>：div+p+bq</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="上级"><a class="markdownIt-Anchor" href="#上级"></a> 上级：^</h3><p><strong>缩写</strong>：div+div&gt;p&gt;span+em^bq</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分组"><a class="markdownIt-Anchor" href="#分组"></a> 分组：()</h3><p><strong>缩写</strong>：div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法：*</h3><p><strong>缩写</strong>：ul&gt;li*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自增符号"><a class="markdownIt-Anchor" href="#自增符号"></a> 自增符号：$</h3><p><strong>缩写</strong>：ul&gt;li.item$*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：h<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>t</mi><mi>i</mi><mi>t</mi><mi>l</mi><mi>e</mi><mo>=</mo><mi>i</mi><mi>t</mi><mi>e</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">[title=item</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span></span></span></span>]{Header $}*3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">title</span>=<span class="string">&quot;item3&quot;</span>&gt;</span>Header 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$$$*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$$$*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$@-*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;li.item$@3*5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id-和类属性"><a class="markdownIt-Anchor" href="#id-和类属性"></a> ID 和类属性</h3><p><strong>缩写</strong>：#header</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：.title</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：form#search.wide</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：p.class1.class2.class3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2 class3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义属性"><a class="markdownIt-Anchor" href="#自定义属性"></a> 自定义属性</h3><p><strong>缩写</strong>：p[title=“Hello world”]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;Hello world&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">ht</span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：td[rowspan=2 colspan=3 title]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：[a=‘value1’ b=“value2”]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;value1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;value2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本"><a class="markdownIt-Anchor" href="#文本"></a> 文本：{}</h3><p><strong>缩写</strong>：a{Click me}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：p&gt;{Click }+a{here}+{ to continue}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to continue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="隐式标签"><a class="markdownIt-Anchor" href="#隐式标签"></a> 隐式标签</h3><p><strong>缩写</strong>：.class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：em&gt;.class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：ul&gt;.class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缩写</strong>：table&gt;.row&gt;.col</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
